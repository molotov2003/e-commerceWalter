{"version":3,"file":"transition-map.js","sources":["../src/transition-map.js"],"sourcesContent":["import { Promise as EmberPromise } from 'rsvp';\r\nimport { next } from '@ember/runloop';\r\nimport { getOwner } from '@ember/application';\r\nimport Service from '@ember/service';\r\nimport RunningTransition from './running-transition';\r\nimport DSL from './dsl';\r\nimport Action from './action';\r\nimport Constraints from './constraints';\r\n\r\nexport default class TransitionMapService extends Service {\r\n  constructor() {\r\n    super(...arguments);\r\n\r\n    this.activeCount = 0;\r\n    this.constraints = new Constraints();\r\n    const owner = getOwner(this);\r\n    this.isTest =\r\n      owner.resolveRegistration('config:environment').environment === 'test';\r\n    let config;\r\n    if (owner.factoryFor) {\r\n      const maybeConfig = owner.factoryFor('transitions:main');\r\n      config = maybeConfig && maybeConfig.class;\r\n    } else {\r\n      config = owner._lookupFactory('transitions:main');\r\n    }\r\n    if (config) {\r\n      this.map(config);\r\n    }\r\n  }\r\n\r\n  runningTransitions() {\r\n    return this.activeCount;\r\n  }\r\n\r\n  incrementRunningTransitions() {\r\n    this.activeCount++;\r\n  }\r\n\r\n  decrementRunningTransitions() {\r\n    this.activeCount--;\r\n    next(() => {\r\n      this._maybeResolveIdle();\r\n    });\r\n  }\r\n\r\n  waitUntilIdle() {\r\n    if (this._waitingPromise) {\r\n      return this._waitingPromise;\r\n    }\r\n    return (this._waitingPromise = new EmberPromise((resolve) => {\r\n      this._resolveWaiting = resolve;\r\n      next(() => {\r\n        this._maybeResolveIdle();\r\n      });\r\n    }));\r\n  }\r\n\r\n  _maybeResolveIdle() {\r\n    if (this.activeCount === 0 && this._resolveWaiting) {\r\n      const resolveWaiting = this._resolveWaiting;\r\n      this._resolveWaiting = null;\r\n      this._waitingPromise = null;\r\n      resolveWaiting();\r\n    }\r\n  }\r\n\r\n  lookup(transitionName) {\r\n    const owner = getOwner(this);\r\n    let handler;\r\n    if (owner.factoryFor) {\r\n      const maybeHandler = owner.factoryFor('transition:' + transitionName);\r\n      handler = maybeHandler && maybeHandler.class;\r\n    } else {\r\n      handler = owner._lookupFactory('transition:' + transitionName);\r\n    }\r\n    if (!handler) {\r\n      throw new Error('unknown transition name: ' + transitionName);\r\n    }\r\n    return handler;\r\n  }\r\n\r\n  defaultAction() {\r\n    if (!this._defaultAction) {\r\n      this._defaultAction = new Action(this.lookup('default'));\r\n    }\r\n    return this._defaultAction;\r\n  }\r\n\r\n  constraintsFor(conditions) {\r\n    if (conditions.rules) {\r\n      const constraints = new Constraints();\r\n      this.map(conditions.rules, constraints);\r\n      return constraints;\r\n    } else {\r\n      return this.constraints;\r\n    }\r\n  }\r\n\r\n  transitionFor(conditions) {\r\n    let action;\r\n    if (conditions.use && conditions.firstTime !== 'yes') {\r\n      action = new Action(conditions.use);\r\n      action.validateHandler(this);\r\n    } else {\r\n      const rule = this.constraintsFor(conditions).bestMatch(conditions);\r\n      if (rule) {\r\n        action = rule.use;\r\n      } else {\r\n        action = this.defaultAction();\r\n      }\r\n    }\r\n    return new RunningTransition(this, conditions.versions, action);\r\n  }\r\n\r\n  map(handler, constraints) {\r\n    if (handler) {\r\n      handler.apply(new DSL(this, constraints || this.constraints));\r\n    }\r\n    return this;\r\n  }\r\n}\r\n"],"names":["TransitionMapService","Service","constructor","arguments","activeCount","constraints","Constraints","owner","getOwner","isTest","resolveRegistration","environment","config","factoryFor","maybeConfig","class","_lookupFactory","map","runningTransitions","incrementRunningTransitions","decrementRunningTransitions","next","_maybeResolveIdle","waitUntilIdle","_waitingPromise","EmberPromise","resolve","_resolveWaiting","resolveWaiting","lookup","transitionName","handler","maybeHandler","Error","defaultAction","_defaultAction","Action","constraintsFor","conditions","rules","transitionFor","action","use","firstTime","validateHandler","rule","bestMatch","RunningTransition","versions","apply","DSL"],"mappings":";;;;;;;;;AASe,MAAMA,oBAAoB,SAASC,OAAO,CAAC;AACxDC,EAAAA,WAAWA,GAAG;IACZ,KAAK,CAAC,GAAGC,SAAS,CAAC,CAAA;IAEnB,IAAI,CAACC,WAAW,GAAG,CAAC,CAAA;AACpB,IAAA,IAAI,CAACC,WAAW,GAAG,IAAIC,WAAW,EAAE,CAAA;AACpC,IAAA,MAAMC,KAAK,GAAGC,QAAQ,CAAC,IAAI,CAAC,CAAA;AAC5B,IAAA,IAAI,CAACC,MAAM,GACTF,KAAK,CAACG,mBAAmB,CAAC,oBAAoB,CAAC,CAACC,WAAW,KAAK,MAAM,CAAA;AACxE,IAAA,IAAIC,MAAM,CAAA;IACV,IAAIL,KAAK,CAACM,UAAU,EAAE;AACpB,MAAA,MAAMC,WAAW,GAAGP,KAAK,CAACM,UAAU,CAAC,kBAAkB,CAAC,CAAA;AACxDD,MAAAA,MAAM,GAAGE,WAAW,IAAIA,WAAW,CAACC,KAAK,CAAA;AAC3C,KAAC,MAAM;AACLH,MAAAA,MAAM,GAAGL,KAAK,CAACS,cAAc,CAAC,kBAAkB,CAAC,CAAA;AACnD,KAAA;AACA,IAAA,IAAIJ,MAAM,EAAE;AACV,MAAA,IAAI,CAACK,GAAG,CAACL,MAAM,CAAC,CAAA;AAClB,KAAA;AACF,GAAA;AAEAM,EAAAA,kBAAkBA,GAAG;IACnB,OAAO,IAAI,CAACd,WAAW,CAAA;AACzB,GAAA;AAEAe,EAAAA,2BAA2BA,GAAG;IAC5B,IAAI,CAACf,WAAW,EAAE,CAAA;AACpB,GAAA;AAEAgB,EAAAA,2BAA2BA,GAAG;IAC5B,IAAI,CAAChB,WAAW,EAAE,CAAA;AAClBiB,IAAAA,IAAI,CAAC,MAAM;MACT,IAAI,CAACC,iBAAiB,EAAE,CAAA;AAC1B,KAAC,CAAC,CAAA;AACJ,GAAA;AAEAC,EAAAA,aAAaA,GAAG;IACd,IAAI,IAAI,CAACC,eAAe,EAAE;MACxB,OAAO,IAAI,CAACA,eAAe,CAAA;AAC7B,KAAA;IACA,OAAQ,IAAI,CAACA,eAAe,GAAG,IAAIC,SAAY,CAAEC,OAAO,IAAK;MAC3D,IAAI,CAACC,eAAe,GAAGD,OAAO,CAAA;AAC9BL,MAAAA,IAAI,CAAC,MAAM;QACT,IAAI,CAACC,iBAAiB,EAAE,CAAA;AAC1B,OAAC,CAAC,CAAA;AACJ,KAAC,CAAC,CAAA;AACJ,GAAA;AAEAA,EAAAA,iBAAiBA,GAAG;IAClB,IAAI,IAAI,CAAClB,WAAW,KAAK,CAAC,IAAI,IAAI,CAACuB,eAAe,EAAE;AAClD,MAAA,MAAMC,cAAc,GAAG,IAAI,CAACD,eAAe,CAAA;MAC3C,IAAI,CAACA,eAAe,GAAG,IAAI,CAAA;MAC3B,IAAI,CAACH,eAAe,GAAG,IAAI,CAAA;AAC3BI,MAAAA,cAAc,EAAE,CAAA;AAClB,KAAA;AACF,GAAA;EAEAC,MAAMA,CAACC,cAAc,EAAE;AACrB,IAAA,MAAMvB,KAAK,GAAGC,QAAQ,CAAC,IAAI,CAAC,CAAA;AAC5B,IAAA,IAAIuB,OAAO,CAAA;IACX,IAAIxB,KAAK,CAACM,UAAU,EAAE;MACpB,MAAMmB,YAAY,GAAGzB,KAAK,CAACM,UAAU,CAAC,aAAa,GAAGiB,cAAc,CAAC,CAAA;AACrEC,MAAAA,OAAO,GAAGC,YAAY,IAAIA,YAAY,CAACjB,KAAK,CAAA;AAC9C,KAAC,MAAM;MACLgB,OAAO,GAAGxB,KAAK,CAACS,cAAc,CAAC,aAAa,GAAGc,cAAc,CAAC,CAAA;AAChE,KAAA;IACA,IAAI,CAACC,OAAO,EAAE;AACZ,MAAA,MAAM,IAAIE,KAAK,CAAC,2BAA2B,GAAGH,cAAc,CAAC,CAAA;AAC/D,KAAA;AACA,IAAA,OAAOC,OAAO,CAAA;AAChB,GAAA;AAEAG,EAAAA,aAAaA,GAAG;AACd,IAAA,IAAI,CAAC,IAAI,CAACC,cAAc,EAAE;AACxB,MAAA,IAAI,CAACA,cAAc,GAAG,IAAIC,MAAM,CAAC,IAAI,CAACP,MAAM,CAAC,SAAS,CAAC,CAAC,CAAA;AAC1D,KAAA;IACA,OAAO,IAAI,CAACM,cAAc,CAAA;AAC5B,GAAA;EAEAE,cAAcA,CAACC,UAAU,EAAE;IACzB,IAAIA,UAAU,CAACC,KAAK,EAAE;AACpB,MAAA,MAAMlC,WAAW,GAAG,IAAIC,WAAW,EAAE,CAAA;MACrC,IAAI,CAACW,GAAG,CAACqB,UAAU,CAACC,KAAK,EAAElC,WAAW,CAAC,CAAA;AACvC,MAAA,OAAOA,WAAW,CAAA;AACpB,KAAC,MAAM;MACL,OAAO,IAAI,CAACA,WAAW,CAAA;AACzB,KAAA;AACF,GAAA;EAEAmC,aAAaA,CAACF,UAAU,EAAE;AACxB,IAAA,IAAIG,MAAM,CAAA;IACV,IAAIH,UAAU,CAACI,GAAG,IAAIJ,UAAU,CAACK,SAAS,KAAK,KAAK,EAAE;AACpDF,MAAAA,MAAM,GAAG,IAAIL,MAAM,CAACE,UAAU,CAACI,GAAG,CAAC,CAAA;AACnCD,MAAAA,MAAM,CAACG,eAAe,CAAC,IAAI,CAAC,CAAA;AAC9B,KAAC,MAAM;AACL,MAAA,MAAMC,IAAI,GAAG,IAAI,CAACR,cAAc,CAACC,UAAU,CAAC,CAACQ,SAAS,CAACR,UAAU,CAAC,CAAA;AAClE,MAAA,IAAIO,IAAI,EAAE;QACRJ,MAAM,GAAGI,IAAI,CAACH,GAAG,CAAA;AACnB,OAAC,MAAM;AACLD,QAAAA,MAAM,GAAG,IAAI,CAACP,aAAa,EAAE,CAAA;AAC/B,OAAA;AACF,KAAA;IACA,OAAO,IAAIa,iBAAiB,CAAC,IAAI,EAAET,UAAU,CAACU,QAAQ,EAAEP,MAAM,CAAC,CAAA;AACjE,GAAA;AAEAxB,EAAAA,GAAGA,CAACc,OAAO,EAAE1B,WAAW,EAAE;AACxB,IAAA,IAAI0B,OAAO,EAAE;AACXA,MAAAA,OAAO,CAACkB,KAAK,CAAC,IAAIC,GAAG,CAAC,IAAI,EAAE7C,WAAW,IAAI,IAAI,CAACA,WAAW,CAAC,CAAC,CAAA;AAC/D,KAAA;AACA,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AACF;;;;"}