import { setComponentTemplate } from '@ember/component';
import { precompileTemplate } from '@ember/template-compilation';
import Component from '@glimmer/component';
import { childRoute, routeIsStable, modelIsStable } from '../ember-internals.js';

var TEMPLATE = precompileTemplate("<LfGetOutletState as |outletState|>\r\n  {{~!~}}\r\n  <LiquidBind\r\n    @value={{(lf-lock-model outletState this.outletName)}}\r\n    @containerId={{@containerId}}\r\n    @versionEquality={{this.versionEquality}}\r\n    @matchContext={{(hash outletName=this.outletName helperName=\"liquid-outlet\")}}\r\n    @class={{@class}}\r\n    @use={{@use}}\r\n    @rules={{@rules}}\r\n    @containerless={{@containerless}}\r\n    @containerElement={{@containerElement}}\r\n    @growDuration={{@growDuration}}\r\n    @growPixelsPerSecond={{@growPixelsPerSecond}}\r\n    @growEasing={{@growEasing}}\r\n    @shrinkDelay={{@shrinkDelay}}\r\n    @growDelay={{@growDelay}}\r\n    @enableGrowth={{@enableGrowth}} as |version|\r\n  >\r\n  {{~!~}}\r\n    {{~#-with-dynamic-vars outletState=version~}}\r\n      {{outlet}}\r\n    {{~/-with-dynamic-vars~}}\r\n  {{~!~}}\r\n  </LiquidBind>\r\n  {{~!~}}\r\n</LfGetOutletState>");

class LiquidOutletComponent extends Component {
  get outletName() {
    return this.args.inputOutletName || 'main';
  }
  get versionEquality() {
    const outletName = this.outletName;
    const watchModels = this.args.watchModels;
    return function (oldValue, newValue) {
      const oldChild = childRoute(oldValue, outletName);
      const newChild = childRoute(newValue, outletName);
      return routeIsStable(oldChild, newChild) && (!watchModels || modelIsStable(oldChild, newChild));
    };
  }
}
setComponentTemplate(TEMPLATE, LiquidOutletComponent);

export { LiquidOutletComponent as default };
//# sourceMappingURL=liquid-outlet.js.map
