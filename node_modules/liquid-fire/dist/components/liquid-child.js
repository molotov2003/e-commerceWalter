import { a as _applyDecoratedDescriptor, b as _initializerDefineProperty, _ as _defineProperty } from '../_rollupPluginBabelHelpers-241f4bb8.js';
import { setComponentTemplate } from '@ember/component';
import { precompileTemplate } from '@ember/template-compilation';
import Component from '@glimmer/component';
import { action } from '@ember/object';
import { inject } from '@ember/service';
import { all } from 'rsvp';
import './liquid-child.css';

var TEMPLATE = precompileTemplate("<div class=\"liquid-child {{@class}}\" data-liquid-child={{@uniqueChildId}}\r\n   ...attributes\r\n  {{did-insert this.setup}}\r\n  {{will-destroy this.destroyElement}}\r\n>\r\n  {{~yield~}}\r\n</div>");

var _class, _descriptor;
let LiquidChildComponent = (_class = class LiquidChildComponent extends Component {
  constructor(...args) {
    super(...args);
    _initializerDefineProperty(this, "liquidFireChildren", _descriptor, this);
    _defineProperty(this, "element", null);
    _defineProperty(this, "_waitingFor", []);
    _defineProperty(this, "_isLiquidChild", true);
    _defineProperty(this, "_serviceElement", null);
  }
  setup(element) {
    this.element = element;
    this._serviceElement = this.liquidFireChildren.register(this.args.uniqueChildId, this);
    element.style.visibility = 'hidden';
    this._waitForAll().then(() => {
      if (!this.isDestroying) {
        this.liquidFireChildren._waitingFor = [];
        const didRenderAction = this.args.liquidChildDidRender;
        if (typeof didRenderAction === 'function') {
          didRenderAction(this);
        }
      }
    });
  }
  destroyElement() {
    if (this._serviceElement) {
      this.liquidFireChildren.unregister(this._serviceElement);
      this._serviceElement = null;
    }
  }
  _waitForMe(promise) {
    if (!this.liquidFireChildren._waitingFor) {
      return;
    }
    this.liquidFireChildren._waitingFor.push(promise);
    const ancestor = this.liquidFireChildren.closest(this.element);
    if (ancestor) {
      ancestor._waitForMe(promise);
    }
  }
  _waitForAll() {
    const promises = this.liquidFireChildren._waitingFor;
    this.liquidFireChildren._waitingFor = [];
    return all(promises).then(() => {
      if (this.liquidFireChildren._waitingFor.length > 0) {
        return this._waitForAll();
      }
    });
  }
}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "liquidFireChildren", [inject], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class.prototype, "setup", [action], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "destroyElement", [action], Object.getOwnPropertyDescriptor(_class.prototype, "destroyElement"), _class.prototype)), _class);
setComponentTemplate(TEMPLATE, LiquidChildComponent);

export { LiquidChildComponent as default };
//# sourceMappingURL=liquid-child.js.map
