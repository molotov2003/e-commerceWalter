import { a as _applyDecoratedDescriptor, b as _initializerDefineProperty, _ as _defineProperty } from '../_rollupPluginBabelHelpers-241f4bb8.js';
import { setComponentTemplate } from '@ember/component';
import { precompileTemplate } from '@ember/template-compilation';
import Component from '@glimmer/component';
import { action } from '@ember/object';
import { inject } from '@ember/service';
import { measure, animateGrowth } from '../utils/animate.js';

var TEMPLATE = precompileTemplate("<div class={{@class}}\r\n  ...attributes\r\n  {{did-insert this.setup}}\r\n>\r\n  <LiquidMeasured @didMeasure={{this.sizeChanged}}>\r\n    {{yield}}\r\n  </LiquidMeasured>\r\n</div>");

var _dec, _class, _descriptor;
let LiquidOutletComponent = (_dec = inject('liquid-fire-transitions'), (_class = class LiquidOutletComponent extends Component {
  constructor(...args) {
    super(...args);
    _initializerDefineProperty(this, "transitionMap", _descriptor, this);
    _defineProperty(this, "element", null);
  }
  get enabled() {
    return this.args.enabled || true;
  }
  get growDuration() {
    return this.args.growDuration || 250;
  }
  get growPixelsPerSecond() {
    return this.args.growPixelsPerSecond || 200;
  }
  get growEasing() {
    return this.args.growEasing || 'slide';
  }
  get shrinkDelay() {
    return this.args.shrinkDelay || 0;
  }
  get growDelay() {
    return this.args.growDelay || 0;
  }
  get growWidth() {
    return this.args.growWidth !== undefined ? this.args.growWidth : true;
  }
  get growHeight() {
    return this.args.growHeight !== undefined ? this.args.growHeight : true;
  }
  setup(element) {
    this.element = element;
    const elt = element;
    const child = elt.getElementsByTagName('div')[0];
    const measurements = this.myMeasurements(measure(child));
    element.style.overflow = 'hidden';
    if (this.growWidth) {
      elt.style.width = `${measurements.width}px`;
    }
    if (this.growHeight) {
      elt.style.height = `${measurements.height}px`;
    }
  }
  sizeChanged(measurements) {
    if (!this.enabled) {
      return;
    }
    if (!this.element) {
      return;
    }
    const want = this.myMeasurements(measurements);
    const elt = this.element;
    const have = measure(elt);
    this.animateGrowth(elt, have, want);
  }
  animateGrowth(elt, have, want) {
    return animateGrowth(elt, have, want, this.transitionMap, this.growWidth, this.growHeight, this.growEasing, this.shrinkDelay, this.growDelay, this.growDuration, this.growPixelsPerSecond);
  }

  // given our child's outerWidth & outerHeight, figure out what our
  // outerWidth & outerHeight should be.
  myMeasurements(childMeasurements) {
    const elt = this.element;
    return {
      width: childMeasurements.width + sumCSS(elt, padding('width')) + sumCSS(elt, border('width')),
      height: childMeasurements.height + sumCSS(elt, padding('height')) + sumCSS(elt, border('height'))
    };
  }
}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, "transitionMap", [_dec], {
  configurable: true,
  enumerable: true,
  writable: true,
  initializer: null
}), _applyDecoratedDescriptor(_class.prototype, "setup", [action], Object.getOwnPropertyDescriptor(_class.prototype, "setup"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "sizeChanged", [action], Object.getOwnPropertyDescriptor(_class.prototype, "sizeChanged"), _class.prototype)), _class));
function sides(dimension) {
  return dimension === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];
}
function padding(dimension) {
  const s = sides(dimension);
  return ['padding' + s[0], 'padding' + s[1]];
}
function border(dimension) {
  const s = sides(dimension);
  return ['border' + s[0] + 'Width', 'border' + s[1] + 'Width'];
}
function sumCSS(elt, fields) {
  let accum = 0;
  const style = getComputedStyle(elt);
  for (let i = 0; i < fields.length; i++) {
    const num = parseFloat(style[fields[i]], 10);
    if (!isNaN(num)) {
      accum += num;
    }
  }
  return accum;
}
setComponentTemplate(TEMPLATE, LiquidOutletComponent);

export { LiquidOutletComponent as default };
//# sourceMappingURL=liquid-spacer.js.map
