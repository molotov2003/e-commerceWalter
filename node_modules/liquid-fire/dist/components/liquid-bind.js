import { setComponentTemplate } from '@ember/component';
import { precompileTemplate } from '@ember/template-compilation';
import Component from '@glimmer/component';

var TEMPLATE = precompileTemplate("{{#if @containerless~}}\r\n  <LiquidVersions\r\n    @value={{@value}}\r\n    @use={{@use}}\r\n    @rules={{@rules}}\r\n    @matchContext={{this.forwardMatchContext}}\r\n    @versionEquality={{@versionEquality}}\r\n    @renderWhenFalse={{true}}\r\n    @containerElement={{@containerElement}}\r\n    @class={{@class}} as |version|\r\n  >\r\n    {{~#if (has-block)}}\r\n      {{~yield version~}}\r\n    {{else}}\r\n      {{~version~}}\r\n    {{/if~}}\r\n  </LiquidVersions>\r\n{{~else~}}\r\n  <LiquidContainer\r\n    id={{@containerId}}\r\n    class={{@class}}\r\n    @growDuration={{@growDuration}}\r\n    @growPixelsPerSecond={{@growPixelsPerSecond}}\r\n    @growEasing={{@growEasing}}\r\n    @shrinkDelay={{@shrinkDelay}}\r\n    @growDelay={{@growDelay}}\r\n    @enableGrowth={{@enableGrowth}}\r\n  as |container|>\r\n    {{~!~}}\r\n    <LiquidVersions\r\n      @value={{@value}}\r\n      @notify={{container}}\r\n      @use={{@use}}\r\n      @rules={{@rules}}\r\n      @containerElement={{container.element}}\r\n      @matchContext={{this.forwardMatchContext}}\r\n      @versionEquality={{@versionEquality}}\r\n      @renderWhenFalse={{true}} as |version| \r\n    >\r\n      {{~#if (has-block)}}\r\n        {{~yield version~}}\r\n      {{else}}\r\n        {{~version~}}\r\n      {{/if~}}\r\n    </LiquidVersions>\r\n    {{~!~}}\r\n  </LiquidContainer>\r\n{{~/if}}");

class LiquidBindComponent extends Component {
  get forwardMatchContext() {
    let m = this.args.matchContext;
    if (!m) {
      m = {};
    }
    if (!m.helperName) {
      m.helperName = 'liquid-bind';
    }
    return m;
  }
}
setComponentTemplate(TEMPLATE, LiquidBindComponent);

export { LiquidBindComponent as default };
//# sourceMappingURL=liquid-bind.js.map
