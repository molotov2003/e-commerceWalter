{"version":3,"file":"ember-internals.js","sources":["../src/ember-internals.js"],"sourcesContent":["// Traverses down to the child routeInfo with the given name.\r\nexport function childRoute(routeInfo, outletName) {\r\n  let outlets;\r\n  // TODO: the second condition is only necessary because every\r\n  // constrainable accessor runs against every value all the time. It\r\n  // would be better to add a precondition on helperName that would\r\n  // short-circuit this elsewhere.\r\n  if (routeInfo && (outlets = routeInfo.outlets)) {\r\n    return outlets[outletName];\r\n  }\r\n}\r\n\r\n// Finds the route name from a route state so we can apply our\r\n// matching rules to it.\r\nexport function routeName(routeInfo) {\r\n  if (routeInfo) {\r\n    return [routeInfo.render.name];\r\n  }\r\n}\r\n\r\n// Finds the route's model from a route state so we can apply our\r\n// matching rules to it. On first access, will lock down the value of\r\n// the model so that future changes don't change the answer. This lets\r\n// us avoid the problem of singleton controllers changing underneath\r\n// us.\r\nexport function routeModel(routeInfo) {\r\n  if (routeInfo && !Object.hasOwnProperty.call(routeInfo, '_lf_model')) {\r\n    let r, c;\r\n    if ((r = routeInfo.render) && (c = r.controller)) {\r\n      routeInfo._lf_model = c.model;\r\n    } else {\r\n      routeInfo._lf_model = null;\r\n    }\r\n  }\r\n\r\n  if (routeInfo) {\r\n    return [routeInfo._lf_model];\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport function routeIsStable(oldRouteInfo, newRouteInfo) {\r\n  if (!oldRouteInfo && !newRouteInfo) {\r\n    return true;\r\n  }\r\n\r\n  if (!oldRouteInfo || !newRouteInfo) {\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    oldRouteInfo.render.template === newRouteInfo.render.template &&\r\n    oldRouteInfo.render.controller === newRouteInfo.render.controller\r\n  );\r\n}\r\n\r\n// Only valid for states that already satisfy routeIsStable\r\nexport function modelIsStable(oldRouteInfo, newRouteInfo) {\r\n  const oldModel = routeModel(oldRouteInfo) || [];\r\n  const newModel = routeModel(newRouteInfo) || [];\r\n  return oldModel[0] === newModel[0];\r\n}\r\n"],"names":["childRoute","routeInfo","outletName","outlets","routeName","render","name","routeModel","Object","hasOwnProperty","call","r","c","controller","_lf_model","model","routeIsStable","oldRouteInfo","newRouteInfo","template","modelIsStable","oldModel","newModel"],"mappings":"AAAA;AACO,SAASA,UAAUA,CAACC,SAAS,EAAEC,UAAU,EAAE;AAChD,EAAA,IAAIC,OAAO,CAAA;AACX;AACA;AACA;AACA;EACA,IAAIF,SAAS,KAAKE,OAAO,GAAGF,SAAS,CAACE,OAAO,CAAC,EAAE;IAC9C,OAAOA,OAAO,CAACD,UAAU,CAAC,CAAA;AAC5B,GAAA;AACF,CAAA;;AAEA;AACA;AACO,SAASE,SAASA,CAACH,SAAS,EAAE;AACnC,EAAA,IAAIA,SAAS,EAAE;AACb,IAAA,OAAO,CAACA,SAAS,CAACI,MAAM,CAACC,IAAI,CAAC,CAAA;AAChC,GAAA;AACF,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASC,UAAUA,CAACN,SAAS,EAAE;AACpC,EAAA,IAAIA,SAAS,IAAI,CAACO,MAAM,CAACC,cAAc,CAACC,IAAI,CAACT,SAAS,EAAE,WAAW,CAAC,EAAE;IACpE,IAAIU,CAAC,EAAEC,CAAC,CAAA;AACR,IAAA,IAAI,CAACD,CAAC,GAAGV,SAAS,CAACI,MAAM,MAAMO,CAAC,GAAGD,CAAC,CAACE,UAAU,CAAC,EAAE;AAChDZ,MAAAA,SAAS,CAACa,SAAS,GAAGF,CAAC,CAACG,KAAK,CAAA;AAC/B,KAAC,MAAM;MACLd,SAAS,CAACa,SAAS,GAAG,IAAI,CAAA;AAC5B,KAAA;AACF,GAAA;AAEA,EAAA,IAAIb,SAAS,EAAE;AACb,IAAA,OAAO,CAACA,SAAS,CAACa,SAAS,CAAC,CAAA;AAC9B,GAAC,MAAM;AACL,IAAA,OAAO,EAAE,CAAA;AACX,GAAA;AACF,CAAA;AAEO,SAASE,aAAaA,CAACC,YAAY,EAAEC,YAAY,EAAE;AACxD,EAAA,IAAI,CAACD,YAAY,IAAI,CAACC,YAAY,EAAE;AAClC,IAAA,OAAO,IAAI,CAAA;AACb,GAAA;AAEA,EAAA,IAAI,CAACD,YAAY,IAAI,CAACC,YAAY,EAAE;AAClC,IAAA,OAAO,KAAK,CAAA;AACd,GAAA;EAEA,OACED,YAAY,CAACZ,MAAM,CAACc,QAAQ,KAAKD,YAAY,CAACb,MAAM,CAACc,QAAQ,IAC7DF,YAAY,CAACZ,MAAM,CAACQ,UAAU,KAAKK,YAAY,CAACb,MAAM,CAACQ,UAAU,CAAA;AAErE,CAAA;;AAEA;AACO,SAASO,aAAaA,CAACH,YAAY,EAAEC,YAAY,EAAE;AACxD,EAAA,MAAMG,QAAQ,GAAGd,UAAU,CAACU,YAAY,CAAC,IAAI,EAAE,CAAA;AAC/C,EAAA,MAAMK,QAAQ,GAAGf,UAAU,CAACW,YAAY,CAAC,IAAI,EAAE,CAAA;EAC/C,OAAOG,QAAQ,CAAC,CAAC,CAAC,KAAKC,QAAQ,CAAC,CAAC,CAAC,CAAA;AACpC;;;;"}