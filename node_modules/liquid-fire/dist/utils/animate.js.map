{"version":3,"file":"animate.js","sources":["../../src/utils/animate.js"],"sourcesContent":["import { capitalize } from '@ember/string';\r\nimport { Velocity } from '../index';\r\n\r\nexport function measure($elt) {\r\n  const boundingRect = $elt.getBoundingClientRect();\r\n\r\n  // Calculate the scaling.\r\n  // NOTE: We only handle the simple zoom case.\r\n  const claimedWidth = $elt.offsetWidth;\r\n\r\n  // Round the width because offsetWidth is rounded\r\n  const actualWidth = Math.round(boundingRect.width);\r\n  const scale = actualWidth > 0 ? claimedWidth / actualWidth : 0;\r\n\r\n  return {\r\n    width: boundingRect.width * scale,\r\n    height: boundingRect.height * scale,\r\n  };\r\n}\r\n\r\nexport function animateGrowth(\r\n  elt,\r\n  have,\r\n  want,\r\n  transitionMap,\r\n  growWidth,\r\n  growHeight,\r\n  growEasing,\r\n  shrinkDelay,\r\n  growDelay,\r\n  growDuration,\r\n  growPixelsPerSecond,\r\n) {\r\n  transitionMap.incrementRunningTransitions();\r\n  const adaptations = [];\r\n\r\n  if (growWidth) {\r\n    adaptations.push(\r\n      adaptDimension(\r\n        elt,\r\n        'width',\r\n        have,\r\n        want,\r\n        growEasing,\r\n        shrinkDelay,\r\n        growDelay,\r\n        growDuration,\r\n        growPixelsPerSecond,\r\n      ),\r\n    );\r\n  }\r\n\r\n  if (growHeight) {\r\n    adaptations.push(\r\n      adaptDimension(\r\n        elt,\r\n        'height',\r\n        have,\r\n        want,\r\n        growEasing,\r\n        shrinkDelay,\r\n        growDelay,\r\n        growDuration,\r\n        growPixelsPerSecond,\r\n      ),\r\n    );\r\n  }\r\n\r\n  return Promise.all(adaptations).then(() => {\r\n    transitionMap.decrementRunningTransitions();\r\n  });\r\n}\r\n\r\nfunction adaptDimension(\r\n  elt,\r\n  dimension,\r\n  have,\r\n  want,\r\n  growEasing,\r\n  shrinkDelay,\r\n  growDelay,\r\n  growDuration,\r\n  growPixelsPerSecond,\r\n) {\r\n  if (have[dimension] === want[dimension]) {\r\n    return Promise.resolve();\r\n  }\r\n  const target = {};\r\n  target['outer' + capitalize(dimension)] = [want[dimension], have[dimension]];\r\n  return Velocity(elt, target, {\r\n    delay: delayFor(have[dimension], want[dimension], shrinkDelay, growDelay),\r\n    duration: durationFor(\r\n      have[dimension],\r\n      want[dimension],\r\n      growDuration,\r\n      growPixelsPerSecond,\r\n    ),\r\n    queue: false,\r\n    easing: growEasing,\r\n  });\r\n}\r\n\r\nfunction delayFor(before, after, shrinkDelay, growDelay) {\r\n  if (before > after) {\r\n    return shrinkDelay;\r\n  }\r\n\r\n  return growDelay;\r\n}\r\n\r\nfunction durationFor(before, after, growDuration, growPixelsPerSecond) {\r\n  return Math.min(\r\n    growDuration,\r\n    (1000 * Math.abs(before - after)) / growPixelsPerSecond,\r\n  );\r\n}\r\n"],"names":["measure","$elt","boundingRect","getBoundingClientRect","claimedWidth","offsetWidth","actualWidth","Math","round","width","scale","height","animateGrowth","elt","have","want","transitionMap","growWidth","growHeight","growEasing","shrinkDelay","growDelay","growDuration","growPixelsPerSecond","incrementRunningTransitions","adaptations","push","adaptDimension","Promise","all","then","decrementRunningTransitions","dimension","resolve","target","capitalize","Velocity","delay","delayFor","duration","durationFor","queue","easing","before","after","min","abs"],"mappings":";;;;;;;;;;;;AAGO,SAASA,OAAOA,CAACC,IAAI,EAAE;AAC5B,EAAA,MAAMC,YAAY,GAAGD,IAAI,CAACE,qBAAqB,EAAE,CAAA;;AAEjD;AACA;AACA,EAAA,MAAMC,YAAY,GAAGH,IAAI,CAACI,WAAW,CAAA;;AAErC;EACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACN,YAAY,CAACO,KAAK,CAAC,CAAA;EAClD,MAAMC,KAAK,GAAGJ,WAAW,GAAG,CAAC,GAAGF,YAAY,GAAGE,WAAW,GAAG,CAAC,CAAA;EAE9D,OAAO;AACLG,IAAAA,KAAK,EAAEP,YAAY,CAACO,KAAK,GAAGC,KAAK;AACjCC,IAAAA,MAAM,EAAET,YAAY,CAACS,MAAM,GAAGD,KAAAA;GAC/B,CAAA;AACH,CAAA;AAEO,SAASE,aAAaA,CAC3BC,GAAG,EACHC,IAAI,EACJC,IAAI,EACJC,aAAa,EACbC,SAAS,EACTC,UAAU,EACVC,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,YAAY,EACZC,mBAAmB,EACnB;EACAP,aAAa,CAACQ,2BAA2B,EAAE,CAAA;EAC3C,MAAMC,WAAW,GAAG,EAAE,CAAA;AAEtB,EAAA,IAAIR,SAAS,EAAE;IACbQ,WAAW,CAACC,IAAI,CACdC,cAAc,CACZd,GAAG,EACH,OAAO,EACPC,IAAI,EACJC,IAAI,EACJI,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,YAAY,EACZC,mBACF,CACF,CAAC,CAAA;AACH,GAAA;AAEA,EAAA,IAAIL,UAAU,EAAE;IACdO,WAAW,CAACC,IAAI,CACdC,cAAc,CACZd,GAAG,EACH,QAAQ,EACRC,IAAI,EACJC,IAAI,EACJI,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,YAAY,EACZC,mBACF,CACF,CAAC,CAAA;AACH,GAAA;EAEA,OAAOK,OAAO,CAACC,GAAG,CAACJ,WAAW,CAAC,CAACK,IAAI,CAAC,MAAM;IACzCd,aAAa,CAACe,2BAA2B,EAAE,CAAA;AAC7C,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA,SAASJ,cAAcA,CACrBd,GAAG,EACHmB,SAAS,EACTlB,IAAI,EACJC,IAAI,EACJI,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,YAAY,EACZC,mBAAmB,EACnB;EACA,IAAIT,IAAI,CAACkB,SAAS,CAAC,KAAKjB,IAAI,CAACiB,SAAS,CAAC,EAAE;AACvC,IAAA,OAAOJ,OAAO,CAACK,OAAO,EAAE,CAAA;AAC1B,GAAA;EACA,MAAMC,MAAM,GAAG,EAAE,CAAA;AACjBA,EAAAA,MAAM,CAAC,OAAO,GAAGC,UAAU,CAACH,SAAS,CAAC,CAAC,GAAG,CAACjB,IAAI,CAACiB,SAAS,CAAC,EAAElB,IAAI,CAACkB,SAAS,CAAC,CAAC,CAAA;AAC5E,EAAA,OAAOI,QAAQ,CAACvB,GAAG,EAAEqB,MAAM,EAAE;AAC3BG,IAAAA,KAAK,EAAEC,QAAQ,CAACxB,IAAI,CAACkB,SAAS,CAAC,EAAEjB,IAAI,CAACiB,SAAS,CAAC,EAAEZ,WAAW,EAAEC,SAAS,CAAC;AACzEkB,IAAAA,QAAQ,EAAEC,WAAW,CACnB1B,IAAI,CAACkB,SAAS,CAAC,EACfjB,IAAI,CAACiB,SAAS,CAAC,EACfV,YAAY,EACZC,mBACF,CAAC;AACDkB,IAAAA,KAAK,EAAE,KAAK;AACZC,IAAAA,MAAM,EAAEvB,UAAAA;AACV,GAAC,CAAC,CAAA;AACJ,CAAA;AAEA,SAASmB,QAAQA,CAACK,MAAM,EAAEC,KAAK,EAAExB,WAAW,EAAEC,SAAS,EAAE;EACvD,IAAIsB,MAAM,GAAGC,KAAK,EAAE;AAClB,IAAA,OAAOxB,WAAW,CAAA;AACpB,GAAA;AAEA,EAAA,OAAOC,SAAS,CAAA;AAClB,CAAA;AAEA,SAASmB,WAAWA,CAACG,MAAM,EAAEC,KAAK,EAAEtB,YAAY,EAAEC,mBAAmB,EAAE;AACrE,EAAA,OAAOhB,IAAI,CAACsC,GAAG,CACbvB,YAAY,EACX,IAAI,GAAGf,IAAI,CAACuC,GAAG,CAACH,MAAM,GAAGC,KAAK,CAAC,GAAIrB,mBACtC,CAAC,CAAA;AACH;;;;"}