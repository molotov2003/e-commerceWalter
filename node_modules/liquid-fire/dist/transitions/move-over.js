import { Promise as Promise$1 } from 'rsvp';
import '@ember/runloop';
import '@ember/application';
import '@ember/service';
import '@ember/string';
import { isAnimating, finish, stop, animate } from '../animate.js';
import '@ember/array';
import '@ember/object/internals';
import '../constraints.js';
import '../mutation-observer.js';
import '../velocity-ext.js';

function moveOver(dimension, direction, opts) {
  const oldParams = {},
    newParams = {};
  let firstStep, property, measure;
  if (dimension.toLowerCase() === 'x') {
    property = 'translateX';
    measure = 'width';
  } else {
    property = 'translateY';
    measure = 'height';
  }
  if (isAnimating(this.oldElement, 'moving-in')) {
    firstStep = finish(this.oldElement, 'moving-in');
  } else {
    stop(this.oldElement);
    firstStep = Promise$1.resolve();
  }
  return firstStep.then(() => {
    const bigger = biggestSize(this, measure);
    oldParams[property] = bigger * direction + 'px';
    newParams[property] = ['0px', -1 * bigger * direction + 'px'];
    return Promise$1.all([animate(this.oldElement, oldParams, opts), animate(this.newElement, newParams, opts, 'moving-in')]);
  });
}
function biggestSize(context, dimension) {
  const sizes = [];
  if (context.newElement) {
    sizes.push(parseInt(getComputedStyle(context.newElement)[dimension], 10));
    sizes.push(parseInt(getComputedStyle(context.newElement.parentElement)[dimension], 10));
  }
  if (context.oldElement) {
    sizes.push(parseInt(getComputedStyle(context.oldElement)[dimension], 10));
    sizes.push(parseInt(getComputedStyle(context.oldElement.parentElement)[dimension], 10));
  }
  return Math.max.apply(null, sizes);
}

export { moveOver as default };
//# sourceMappingURL=move-over.js.map
