import 'rsvp';
import '@ember/runloop';
import '@ember/application';
import '@ember/service';
import '@ember/string';
import { finish, isAnimating, timeSpent, stop, animate } from '../animate.js';
import '@ember/array';
import '@ember/object/internals';
import '../constraints.js';
import '../mutation-observer.js';
import '../velocity-ext.js';

// BEGIN-SNIPPET fade-definition
function fade(opts = {}) {
  let firstStep;
  let outOpts = opts;
  const fadingElement = findFadingElement(this);
  if (fadingElement) {
    // We still have some older version that is in the process of
    // fading out, so out first step is waiting for it to finish.
    firstStep = finish(fadingElement, 'fade-out');
  } else {
    if (isAnimating(this.oldElement, 'fade-in')) {
      // if the previous view is partially faded in, scale its
      // fade-out duration appropriately.
      outOpts = {
        duration: timeSpent(this.oldElement, 'fade-in')
      };
    }
    stop(this.oldElement);
    firstStep = animate(this.oldElement, {
      opacity: 0
    }, outOpts, 'fade-out');
  }
  return firstStep.then(() => {
    return animate(this.newElement, {
      opacity: [opts.maxOpacity || 1, 0]
    }, opts, 'fade-in');
  });
}
function findFadingElement(context) {
  for (let i = 0; i < context.older.length; i++) {
    const entry = context.older[i];
    if (isAnimating(entry.element, 'fade-out')) {
      return entry.element;
    }
  }
  if (isAnimating(context.oldElement, 'fade-out')) {
    return context.oldElement;
  }
}
// END-SNIPPET

export { fade as default };
//# sourceMappingURL=fade.js.map
