{"version":3,"file":"index.js","sources":["../../lib/generation/util.ts","../../lib/generation/printer.ts","../../lib/generation/print.ts","../../lib/keywords.ts","../../lib/source/location.ts","../../lib/source/loc/kinds.ts","../../lib/source/loc/match.ts","../../../local-debug-flags/index.ts","../../lib/source/slice.ts","../../lib/source/loc/span.ts","../../lib/source/loc/offset.ts","../../lib/source/source.ts","../../lib/source/span-list.ts","../../lib/syntax-error.ts","../../lib/v1/visitor-keys.ts","../../lib/traversal/errors.ts","../../lib/traversal/path.ts","../../lib/traversal/traverse.ts","../../lib/traversal/walker.ts","../../lib/utils.ts","../../lib/v1/public-builders.ts","../../lib/v1/legacy-interop.ts","../../lib/v1/parser-builders.ts","../../lib/parser.ts","../../lib/parser/handlebars-node-visitors.ts","../../lib/parser/tokenizer-event-handlers.ts","../../lib/get-template-locals.ts","../../lib/v2/objects/node.ts","../../lib/v2/objects/args.ts","../../lib/v2/objects/attr-block.ts","../../lib/v2/objects/content.ts","../../lib/v2/objects/expr.ts","../../lib/v2/objects/internal-node.ts","../../lib/v2/objects/refs.ts","../../lib/v2/objects/resolution.ts","../../lib/symbol-table.ts","../../lib/v2/builders.ts","../../lib/v2/loose-resolution.ts","../../lib/v2/normalize.ts"],"sourcesContent":["import type * as ASTv1 from '../v1/api';\n\nconst enum Char {\n  NBSP = 0xa0,\n  QUOT = 0x22,\n  LT = 0x3c,\n  GT = 0x3e,\n  AMP = 0x26,\n}\n\nconst ATTR_VALUE_REGEX_TEST = /[\"&\\xA0]/u;\nconst ATTR_VALUE_REGEX_REPLACE = new RegExp(ATTR_VALUE_REGEX_TEST.source, 'gu');\n\nconst TEXT_REGEX_TEST = /[&<>\\xA0]/u;\nconst TEXT_REGEX_REPLACE = new RegExp(TEXT_REGEX_TEST.source, 'gu');\n\nfunction attrValueReplacer(char: string): string {\n  switch (char.charCodeAt(0)) {\n    case Char.NBSP:\n      return '&nbsp;';\n    case Char.QUOT:\n      return '&quot;';\n    case Char.AMP:\n      return '&amp;';\n    default:\n      return char;\n  }\n}\n\nfunction textReplacer(char: string): string {\n  switch (char.charCodeAt(0)) {\n    case Char.NBSP:\n      return '&nbsp;';\n    case Char.AMP:\n      return '&amp;';\n    case Char.LT:\n      return '&lt;';\n    case Char.GT:\n      return '&gt;';\n    default:\n      return char;\n  }\n}\n\nexport function escapeAttrValue(attrValue: string): string {\n  if (ATTR_VALUE_REGEX_TEST.test(attrValue)) {\n    return attrValue.replace(ATTR_VALUE_REGEX_REPLACE, attrValueReplacer);\n  }\n  return attrValue;\n}\n\nexport function escapeText(text: string): string {\n  if (TEXT_REGEX_TEST.test(text)) {\n    return text.replace(TEXT_REGEX_REPLACE, textReplacer);\n  }\n  return text;\n}\n\nexport function sortByLoc(a: ASTv1.Node, b: ASTv1.Node): -1 | 0 | 1 {\n  // If either is invisible, don't try to order them\n  if (a.loc.isInvisible || b.loc.isInvisible) {\n    return 0;\n  }\n\n  if (a.loc.startPosition.line < b.loc.startPosition.line) {\n    return -1;\n  }\n\n  if (\n    a.loc.startPosition.line === b.loc.startPosition.line &&\n    a.loc.startPosition.column < b.loc.startPosition.column\n  ) {\n    return -1;\n  }\n\n  if (\n    a.loc.startPosition.line === b.loc.startPosition.line &&\n    a.loc.startPosition.column === b.loc.startPosition.column\n  ) {\n    return 0;\n  }\n\n  return 1;\n}\n","import type * as ASTv1 from '../v1/api';\nimport { escapeAttrValue, escapeText, sortByLoc } from './util';\n\nexport const voidMap = new Set([\n  'area',\n  'base',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'hr',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr',\n]);\n\nexport function getVoidTags() {\n  return [...voidMap];\n}\n\nconst NON_WHITESPACE = /^\\S/u;\n\nexport interface PrinterOptions {\n  entityEncoding: 'transformed' | 'raw';\n\n  /**\n   * Used to override the mechanism of printing a given AST.Node.\n   *\n   * This will generally only be useful to source -> source codemods\n   * where you would like to specialize/override the way a given node is\n   * printed (e.g. you would like to preserve as much of the original\n   * formatting as possible).\n   *\n   * When the provided override returns undefined, the default built in printing\n   * will be done for the AST.Node.\n   *\n   * @param ast the ast node to be printed\n   * @param options the options specified during the print() invocation\n   */\n  override?(ast: ASTv1.Node, options: PrinterOptions): void | string;\n}\n\n/**\n * Examples when true:\n *  - link\n *  - liNK\n *\n * Examples when false:\n *  - Link (component)\n */\nexport function isVoidTag(tag: string): boolean {\n  return voidMap.has(tag.toLowerCase()) && tag[0]?.toLowerCase() === tag[0];\n}\n\nexport default class Printer {\n  private buffer = '';\n  private options: PrinterOptions;\n\n  constructor(options: PrinterOptions) {\n    this.options = options;\n  }\n\n  /*\n    This is used by _all_ methods on this Printer class that add to `this.buffer`,\n    it allows consumers of the printer to use alternate string representations for\n    a given node.\n\n    The primary use case for this are things like source -> source codemod utilities.\n    For example, ember-template-recast attempts to always preserve the original string\n    formatting in each AST node if no modifications are made to it.\n  */\n  handledByOverride(node: ASTv1.Node, ensureLeadingWhitespace = false): boolean {\n    if (this.options.override !== undefined) {\n      let result = this.options.override(node, this.options);\n      if (typeof result === 'string') {\n        if (ensureLeadingWhitespace && NON_WHITESPACE.test(result)) {\n          result = ` ${result}`;\n        }\n\n        this.buffer += result;\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  Node(node: ASTv1.Node): void {\n    switch (node.type) {\n      case 'MustacheStatement':\n      case 'BlockStatement':\n      case 'PartialStatement':\n      case 'MustacheCommentStatement':\n      case 'CommentStatement':\n      case 'TextNode':\n      case 'ElementNode':\n      case 'AttrNode':\n      case 'Block':\n      case 'Template':\n        return this.TopLevelStatement(node);\n      case 'StringLiteral':\n      case 'BooleanLiteral':\n      case 'NumberLiteral':\n      case 'UndefinedLiteral':\n      case 'NullLiteral':\n      case 'PathExpression':\n      case 'SubExpression':\n        return this.Expression(node);\n      case 'Program':\n        return this.Block(node);\n      case 'ConcatStatement':\n        // should have an AttrNode parent\n        return this.ConcatStatement(node);\n      case 'Hash':\n        return this.Hash(node);\n      case 'HashPair':\n        return this.HashPair(node);\n      case 'ElementModifierStatement':\n        return this.ElementModifierStatement(node);\n    }\n  }\n\n  Expression(expression: ASTv1.Expression): void {\n    switch (expression.type) {\n      case 'StringLiteral':\n      case 'BooleanLiteral':\n      case 'NumberLiteral':\n      case 'UndefinedLiteral':\n      case 'NullLiteral':\n        return this.Literal(expression);\n      case 'PathExpression':\n        return this.PathExpression(expression);\n      case 'SubExpression':\n        return this.SubExpression(expression);\n    }\n  }\n\n  Literal(literal: ASTv1.Literal): void {\n    switch (literal.type) {\n      case 'StringLiteral':\n        return this.StringLiteral(literal);\n      case 'BooleanLiteral':\n        return this.BooleanLiteral(literal);\n      case 'NumberLiteral':\n        return this.NumberLiteral(literal);\n      case 'UndefinedLiteral':\n        return this.UndefinedLiteral(literal);\n      case 'NullLiteral':\n        return this.NullLiteral(literal);\n    }\n  }\n\n  TopLevelStatement(statement: ASTv1.TopLevelStatement | ASTv1.Template | ASTv1.AttrNode): void {\n    switch (statement.type) {\n      case 'MustacheStatement':\n        return this.MustacheStatement(statement);\n      case 'BlockStatement':\n        return this.BlockStatement(statement);\n      case 'PartialStatement':\n        return this.PartialStatement(statement);\n      case 'MustacheCommentStatement':\n        return this.MustacheCommentStatement(statement);\n      case 'CommentStatement':\n        return this.CommentStatement(statement);\n      case 'TextNode':\n        return this.TextNode(statement);\n      case 'ElementNode':\n        return this.ElementNode(statement);\n      case 'Block':\n      case 'Template':\n        return this.Block(statement);\n      case 'AttrNode':\n        // should have element\n        return this.AttrNode(statement);\n    }\n  }\n\n  Block(block: ASTv1.Block | ASTv1.Program | ASTv1.Template): void {\n    /*\n      When processing a template like:\n\n      ```hbs\n      {{#if whatever}}\n        whatever\n      {{else if somethingElse}}\n        something else\n      {{else}}\n        fallback\n      {{/if}}\n      ```\n\n      The AST still _effectively_ looks like:\n\n      ```hbs\n      {{#if whatever}}\n        whatever\n      {{else}}{{#if somethingElse}}\n        something else\n      {{else}}\n        fallback\n      {{/if}}{{/if}}\n      ```\n\n      The only way we can tell if that is the case is by checking for\n      `block.chained`, but unfortunately when the actual statements are\n      processed the `block.body[0]` node (which will always be a\n      `BlockStatement`) has no clue that its ancestor `Block` node was\n      chained.\n\n      This \"forwards\" the `chained` setting so that we can check\n      it later when processing the `BlockStatement`.\n    */\n    if (block.chained) {\n      let firstChild = block.body[0] as ASTv1.BlockStatement;\n      firstChild.chained = true;\n    }\n\n    if (this.handledByOverride(block)) {\n      return;\n    }\n\n    this.TopLevelStatements(block.body);\n  }\n\n  TopLevelStatements(statements: ASTv1.TopLevelStatement[]): void {\n    statements.forEach((statement) => this.TopLevelStatement(statement));\n  }\n\n  ElementNode(el: ASTv1.ElementNode): void {\n    if (this.handledByOverride(el)) {\n      return;\n    }\n\n    this.OpenElementNode(el);\n    this.TopLevelStatements(el.children);\n    this.CloseElementNode(el);\n  }\n\n  OpenElementNode(el: ASTv1.ElementNode): void {\n    this.buffer += `<${el.tag}`;\n    const parts = [...el.attributes, ...el.modifiers, ...el.comments].sort(sortByLoc);\n\n    for (const part of parts) {\n      this.buffer += ' ';\n      switch (part.type) {\n        case 'AttrNode':\n          this.AttrNode(part);\n          break;\n        case 'ElementModifierStatement':\n          this.ElementModifierStatement(part);\n          break;\n        case 'MustacheCommentStatement':\n          this.MustacheCommentStatement(part);\n          break;\n      }\n    }\n    if (el.blockParams.length) {\n      this.BlockParams(el.blockParams);\n    }\n    if (el.selfClosing) {\n      this.buffer += ' /';\n    }\n    this.buffer += '>';\n  }\n\n  CloseElementNode(el: ASTv1.ElementNode): void {\n    if (el.selfClosing || isVoidTag(el.tag)) {\n      return;\n    }\n    this.buffer += `</${el.tag}>`;\n  }\n\n  AttrNode(attr: ASTv1.AttrNode): void {\n    if (this.handledByOverride(attr)) {\n      return;\n    }\n\n    let { name, value } = attr;\n\n    this.buffer += name;\n    if (value.type !== 'TextNode' || value.chars.length > 0) {\n      this.buffer += '=';\n      this.AttrNodeValue(value);\n    }\n  }\n\n  AttrNodeValue(value: ASTv1.AttrNode['value']): void {\n    if (value.type === 'TextNode') {\n      this.buffer += '\"';\n      this.TextNode(value, true);\n      this.buffer += '\"';\n    } else {\n      this.Node(value);\n    }\n  }\n\n  TextNode(text: ASTv1.TextNode, isAttr?: boolean): void {\n    if (this.handledByOverride(text)) {\n      return;\n    }\n\n    if (this.options.entityEncoding === 'raw') {\n      this.buffer += text.chars;\n    } else if (isAttr) {\n      this.buffer += escapeAttrValue(text.chars);\n    } else {\n      this.buffer += escapeText(text.chars);\n    }\n  }\n\n  MustacheStatement(mustache: ASTv1.MustacheStatement): void {\n    if (this.handledByOverride(mustache)) {\n      return;\n    }\n\n    this.buffer += mustache.escaped ? '{{' : '{{{';\n\n    if (mustache.strip.open) {\n      this.buffer += '~';\n    }\n\n    this.Expression(mustache.path);\n    this.Params(mustache.params);\n    this.Hash(mustache.hash);\n\n    if (mustache.strip.close) {\n      this.buffer += '~';\n    }\n\n    this.buffer += mustache.escaped ? '}}' : '}}}';\n  }\n\n  BlockStatement(block: ASTv1.BlockStatement): void {\n    if (this.handledByOverride(block)) {\n      return;\n    }\n\n    if (block.chained) {\n      this.buffer += block.inverseStrip.open ? '{{~' : '{{';\n      this.buffer += 'else ';\n    } else {\n      this.buffer += block.openStrip.open ? '{{~#' : '{{#';\n    }\n\n    this.Expression(block.path);\n    this.Params(block.params);\n    this.Hash(block.hash);\n    if (block.program.blockParams.length) {\n      this.BlockParams(block.program.blockParams);\n    }\n\n    if (block.chained) {\n      this.buffer += block.inverseStrip.close ? '~}}' : '}}';\n    } else {\n      this.buffer += block.openStrip.close ? '~}}' : '}}';\n    }\n\n    this.Block(block.program);\n\n    if (block.inverse) {\n      if (!block.inverse.chained) {\n        this.buffer += block.inverseStrip.open ? '{{~' : '{{';\n        this.buffer += 'else';\n        this.buffer += block.inverseStrip.close ? '~}}' : '}}';\n      }\n\n      this.Block(block.inverse);\n    }\n\n    if (!block.chained) {\n      this.buffer += block.closeStrip.open ? '{{~/' : '{{/';\n      this.Expression(block.path);\n      this.buffer += block.closeStrip.close ? '~}}' : '}}';\n    }\n  }\n\n  BlockParams(blockParams: string[]): void {\n    this.buffer += ` as |${blockParams.join(' ')}|`;\n  }\n\n  PartialStatement(partial: ASTv1.PartialStatement): void {\n    if (this.handledByOverride(partial)) {\n      return;\n    }\n\n    this.buffer += '{{>';\n    this.Expression(partial.name);\n    this.Params(partial.params);\n    this.Hash(partial.hash);\n    this.buffer += '}}';\n  }\n\n  ConcatStatement(concat: ASTv1.ConcatStatement): void {\n    if (this.handledByOverride(concat)) {\n      return;\n    }\n\n    this.buffer += '\"';\n    concat.parts.forEach((part) => {\n      if (part.type === 'TextNode') {\n        this.TextNode(part, true);\n      } else {\n        this.Node(part);\n      }\n    });\n    this.buffer += '\"';\n  }\n\n  MustacheCommentStatement(comment: ASTv1.MustacheCommentStatement): void {\n    if (this.handledByOverride(comment)) {\n      return;\n    }\n\n    this.buffer += `{{!--${comment.value}--}}`;\n  }\n\n  ElementModifierStatement(mod: ASTv1.ElementModifierStatement): void {\n    if (this.handledByOverride(mod)) {\n      return;\n    }\n\n    this.buffer += '{{';\n    this.Expression(mod.path);\n    this.Params(mod.params);\n    this.Hash(mod.hash);\n    this.buffer += '}}';\n  }\n\n  CommentStatement(comment: ASTv1.CommentStatement): void {\n    if (this.handledByOverride(comment)) {\n      return;\n    }\n\n    this.buffer += `<!--${comment.value}-->`;\n  }\n\n  PathExpression(path: ASTv1.PathExpression): void {\n    if (this.handledByOverride(path)) {\n      return;\n    }\n\n    this.buffer += path.original;\n  }\n\n  SubExpression(sexp: ASTv1.SubExpression): void {\n    if (this.handledByOverride(sexp)) {\n      return;\n    }\n\n    this.buffer += '(';\n    this.Expression(sexp.path);\n    this.Params(sexp.params);\n    this.Hash(sexp.hash);\n    this.buffer += ')';\n  }\n\n  Params(params: ASTv1.Expression[]): void {\n    // TODO: implement a top level Params AST node (just like the Hash object)\n    // so that this can also be overridden\n    if (params.length) {\n      params.forEach((param) => {\n        this.buffer += ' ';\n        this.Expression(param);\n      });\n    }\n  }\n\n  Hash(hash: ASTv1.Hash): void {\n    if (this.handledByOverride(hash, true)) {\n      return;\n    }\n\n    hash.pairs.forEach((pair) => {\n      this.buffer += ' ';\n      this.HashPair(pair);\n    });\n  }\n\n  HashPair(pair: ASTv1.HashPair): void {\n    if (this.handledByOverride(pair)) {\n      return;\n    }\n\n    this.buffer += pair.key;\n    this.buffer += '=';\n    this.Node(pair.value);\n  }\n\n  StringLiteral(str: ASTv1.StringLiteral): void {\n    if (this.handledByOverride(str)) {\n      return;\n    }\n\n    this.buffer += JSON.stringify(str.value);\n  }\n\n  BooleanLiteral(bool: ASTv1.BooleanLiteral): void {\n    if (this.handledByOverride(bool)) {\n      return;\n    }\n\n    this.buffer += bool.value;\n  }\n\n  NumberLiteral(number: ASTv1.NumberLiteral): void {\n    if (this.handledByOverride(number)) {\n      return;\n    }\n\n    this.buffer += number.value;\n  }\n\n  UndefinedLiteral(node: ASTv1.UndefinedLiteral): void {\n    if (this.handledByOverride(node)) {\n      return;\n    }\n\n    this.buffer += 'undefined';\n  }\n\n  NullLiteral(node: ASTv1.NullLiteral): void {\n    if (this.handledByOverride(node)) {\n      return;\n    }\n\n    this.buffer += 'null';\n  }\n\n  print(node: ASTv1.Node): string {\n    let { options } = this;\n\n    if (options.override) {\n      let result = options.override(node, options);\n\n      if (result !== undefined) {\n        return result;\n      }\n    }\n\n    this.buffer = '';\n    this.Node(node);\n    return this.buffer;\n  }\n}\n","import type * as ASTv1 from '../v1/api';\nimport Printer, { type PrinterOptions } from './printer';\n\nexport default function build(\n  ast: ASTv1.Node,\n  options: PrinterOptions = { entityEncoding: 'transformed' }\n): string {\n  if (!ast) {\n    return '';\n  }\n\n  let printer = new Printer(options);\n  return printer.print(ast);\n}\n","export type KeywordType = 'Call' | 'Modifier' | 'Append' | 'Block';\n\nexport function isKeyword(word: string): boolean {\n  return word in KEYWORDS_TYPES;\n}\n\n/**\n * This includes the full list of keywords currently in use in the template\n * language, and where their valid usages are.\n */\nexport const KEYWORDS_TYPES = {\n  component: ['Call', 'Append', 'Block'],\n  debugger: ['Append'],\n  'each-in': ['Block'],\n  each: ['Block'],\n  'has-block-params': ['Call', 'Append'],\n  'has-block': ['Call', 'Append'],\n  helper: ['Call', 'Append'],\n  if: ['Call', 'Append', 'Block'],\n  'in-element': ['Block'],\n  let: ['Block'],\n  'link-to': ['Append', 'Block'],\n  log: ['Call', 'Append'],\n  modifier: ['Call'],\n  mount: ['Append'],\n  mut: ['Call', 'Append'],\n  outlet: ['Append'],\n  'query-params': ['Call'],\n  readonly: ['Call', 'Append'],\n  unbound: ['Call', 'Append'],\n  unless: ['Call', 'Append', 'Block'],\n  with: ['Block'],\n  yield: ['Append'],\n} satisfies Record<string, readonly KeywordType[]>;\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { isPresentArray } from '@glimmer/util';\n\nimport type { SourceSpan } from './span';\n\nexport interface SourceLocation {\n  start: SourcePosition;\n  end: SourcePosition;\n}\n\nexport interface SourcePosition {\n  /** >= 1 */\n  line: number;\n  /** >= 0 */\n  column: number;\n}\n\nexport const UNKNOWN_POSITION = Object.freeze({\n  line: 1,\n  column: 0,\n} as const);\n\nexport const SYNTHETIC_LOCATION = Object.freeze({\n  source: '(synthetic)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\n/** @deprecated */\nexport const SYNTHETIC = SYNTHETIC_LOCATION;\n\nexport const TEMPORARY_LOCATION = Object.freeze({\n  source: '(temporary)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\nexport const NON_EXISTENT_LOCATION = Object.freeze({\n  source: '(nonexistent)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\nexport const BROKEN_LOCATION = Object.freeze({\n  source: '(broken)',\n  start: UNKNOWN_POSITION,\n  end: UNKNOWN_POSITION,\n} as const);\n\nexport type LocatedWithSpan = { offsets: SourceSpan };\nexport type LocatedWithOptionalSpan = { offsets: SourceSpan | null };\n\nexport type LocatedWithPositions = { loc: SourceLocation };\nexport type LocatedWithOptionalPositions = { loc?: SourceLocation };\n\nexport function isLocatedWithPositionsArray(\n  location: LocatedWithOptionalPositions[]\n): location is PresentArray<LocatedWithPositions> {\n  return isPresentArray(location) && location.every(isLocatedWithPositions);\n}\n\nexport function isLocatedWithPositions(\n  location: LocatedWithOptionalPositions\n): location is LocatedWithPositions {\n  return location.loc !== undefined;\n}\n\nexport type HasSourceLocation =\n  | SourceLocation\n  | LocatedWithPositions\n  | PresentArray<LocatedWithPositions>;\n\nexport type MaybeHasSourceLocation =\n  | null\n  | LocatedWithOptionalPositions\n  | LocatedWithOptionalPositions[];\n","export enum OffsetKind {\n  /**\n   * We have already computed the character position of this offset or span.\n   */\n  CharPosition = 'CharPosition',\n\n  /**\n   * This offset or span was instantiated with a Handlebars SourcePosition or SourceLocation. Its\n   * character position will be computed on demand.\n   */\n  HbsPosition = 'HbsPosition',\n\n  /**\n   * for (rare) situations where a node is created but there was no source location (e.g. the name\n   * \"default\" in default blocks when the word \"default\" never appeared in source). This is used\n   * by the internals when there is a legitimate reason for the internals to synthesize a node\n   * with no location.\n   */\n  InternalsSynthetic = 'InternalsSynthetic',\n  /**\n   * For situations where a node represents zero parts of the source (for example, empty arguments).\n   * In general, we attempt to assign these nodes *some* position (empty arguments can be\n   * positioned immediately after the callee), but it's not always possible\n   */\n  NonExistent = 'NonExistent',\n  /**\n   * For situations where a source location was expected, but it didn't correspond to the node in\n   * the source. This happens if a plugin creates broken locations.\n   */\n  Broken = 'Broken',\n}\n","import { assert, isPresentArray } from '@glimmer/util';\n\nimport { OffsetKind } from './kinds';\nimport type { CharPosition, HbsPosition, InvisiblePosition, PositionData } from './offset';\n\n/**\n * This file implements the DSL used by span and offset in places where they need to exhaustively\n * consider all combinations of states (Handlebars offsets, character offsets and invisible/broken\n * offsets).\n *\n * It's probably overkill, but it makes the code that uses it clear. It could be refactored or\n * removed.\n */\n\nexport const MatchAny = 'MATCH_ANY';\nexport type MatchAny = 'MATCH_ANY';\n\ntype Matches =\n  | 'Char,Hbs'\n  | 'Hbs,Char'\n  | 'Hbs,Hbs'\n  | 'Char,Char'\n  | 'Invisible,Any'\n  | 'Any,Invisible';\n\nexport const IsInvisible = 'IS_INVISIBLE';\nexport type IsInvisible = 'IS_INVISIBLE';\n\ntype Pattern = OffsetKind | IsInvisible | MatchAny;\n\nclass WhenList<Out> {\n  _whens: When<Out>[];\n\n  constructor(whens: When<Out>[]) {\n    this._whens = whens;\n  }\n\n  first(kind: OffsetKind): Out | null {\n    for (const when of this._whens) {\n      const value = when.match(kind);\n      if (isPresentArray(value)) {\n        return value[0];\n      }\n    }\n\n    return null;\n  }\n}\n\nclass When<Out> {\n  _map: Map<Pattern, Out> = new Map();\n\n  get(pattern: Pattern, or: () => Out): Out {\n    let value = this._map.get(pattern);\n\n    if (value) {\n      return value;\n    }\n\n    value = or();\n\n    this._map.set(pattern, value);\n\n    return value;\n  }\n\n  add(pattern: Pattern, out: Out): void {\n    this._map.set(pattern, out);\n  }\n\n  match(kind: OffsetKind): Out[] {\n    const pattern = patternFor(kind);\n\n    const out: Out[] = [];\n\n    const exact = this._map.get(pattern);\n    const fallback = this._map.get(MatchAny);\n\n    if (exact) {\n      out.push(exact);\n    }\n\n    if (fallback) {\n      out.push(fallback);\n    }\n\n    return out;\n  }\n}\n\ntype ExhaustiveCheck<Out, In extends Matches, Removed extends Matches> = Exclude<\n  In,\n  Removed\n> extends never\n  ? ExhaustiveMatcher<Out>\n  : Matcher<Out, Exclude<In, Removed>>;\n\nexport type MatchFn<Out> = (left: PositionData, right: PositionData) => Out;\n\ninterface ExhaustiveMatcher<Out> {\n  check(): MatchFn<Out>;\n}\n\nexport function match<Out>(callback: (m: Matcher<Out>) => ExhaustiveMatcher<Out>): MatchFn<Out> {\n  return callback(new Matcher()).check();\n}\n\nclass Matcher<Out, M extends Matches = Matches> {\n  _whens: When<When<(left: PositionData, right: PositionData) => Out>> = new When();\n\n  /**\n   * You didn't exhaustively match all possibilities.\n   */\n  protected check(): MatchFn<Out> {\n    return (left, right) => this.matchFor(left.kind, right.kind)(left, right);\n  }\n\n  private matchFor(\n    left: OffsetKind,\n    right: OffsetKind\n  ): (left: PositionData, right: PositionData) => Out {\n    const nesteds = this._whens.match(left);\n\n    assert(\n      isPresentArray(nesteds),\n      `no match defined for (${left}, ${right}) and no AnyMatch defined either`\n    );\n\n    const callback = new WhenList(nesteds).first(right);\n\n    assert(\n      callback !== null,\n      `no match defined for (${left}, ${right}) and no AnyMatch defined either`\n    );\n\n    return callback;\n  }\n\n  // This big block is the bulk of the heavy lifting in this file. It facilitates exhaustiveness\n  // checking so that matchers can ensure they've actually covered all the cases (and TypeScript\n  // will treat it as an exhaustive match).\n  when(\n    left: OffsetKind.CharPosition,\n    right: OffsetKind.HbsPosition,\n    callback: (left: CharPosition, right: HbsPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Char,Hbs'>;\n  when(\n    left: OffsetKind.HbsPosition,\n    right: OffsetKind.CharPosition,\n    callback: (left: HbsPosition, right: CharPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Hbs,Char'>;\n  when(\n    left: OffsetKind.HbsPosition,\n    right: OffsetKind.HbsPosition,\n    callback: (left: HbsPosition, right: HbsPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Hbs,Hbs'>;\n  when(\n    left: OffsetKind.CharPosition,\n    right: OffsetKind.CharPosition,\n    callback: (left: CharPosition, right: CharPosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Char,Char'>;\n  when(\n    left: IsInvisible,\n    right: MatchAny,\n    callback: (left: InvisiblePosition, right: PositionData) => Out\n  ): Matcher<Out, Exclude<M, 'Invisible,Any'>>;\n  when(\n    left: MatchAny,\n    right: IsInvisible,\n    callback: (left: PositionData, right: InvisiblePosition) => Out\n  ): ExhaustiveCheck<Out, M, 'Any,Invisible'>;\n  when(\n    left: MatchAny,\n    right: MatchAny,\n    callback: (left: PositionData, right: PositionData) => Out\n  ): ExhaustiveMatcher<Out>;\n  when(\n    left: Pattern,\n    right: Pattern,\n     \n    callback: (left: any, right: any) => Out\n  ): Matcher<Out, Matches> | ExhaustiveMatcher<Out> {\n    this._whens.get(left, () => new When()).add(right, callback);\n\n    return this;\n  }\n}\n\nfunction patternFor(kind: OffsetKind): Pattern {\n  switch (kind) {\n    case OffsetKind.Broken:\n    case OffsetKind.InternalsSynthetic:\n    case OffsetKind.NonExistent:\n      return IsInvisible;\n    default:\n      return kind;\n  }\n}\n","\n\nexport const LOCAL_DEBUG: true | false =\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  import.meta.env.VM_LOCAL_DEV &&\n  (() => {\n    let location = typeof window !== 'undefined' && window.location;\n    if (location && /[&?]disable_local_debug/u.test(window.location.search)) {\n      return false;\n    }\n    return true;\n  })();\n\nexport const LOCAL_SHOULD_LOG: true | false =\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  import.meta.env.VM_LOCAL_DEV &&\n  (() => {\n    let location = typeof window !== 'undefined' && window.location;\n    if (location && /[&?]enable_local_should_log/u.test(window.location.search)) {\n      return true;\n    }\n    return false;\n  })();\n","import * as src from './api';\n\nexport type SerializedSourceSlice<Chars extends string = string> = [\n  chars: Chars,\n  span: src.SerializedSourceSpan\n];\n\nexport class SourceSlice<Chars extends string = string> {\n  static synthetic<S extends string>(chars: S): SourceSlice<S> {\n    let offsets = src.SourceSpan.synthetic(chars);\n    return new SourceSlice({ loc: offsets, chars: chars });\n  }\n\n  static load(source: src.Source, slice: SerializedSourceSlice): SourceSlice {\n    return new SourceSlice({\n      loc: src.SourceSpan.load(source, slice[1]),\n      chars: slice[0],\n    });\n  }\n\n  readonly chars: Chars;\n  readonly loc: src.SourceSpan;\n\n  constructor(options: { loc: src.SourceSpan; chars: Chars }) {\n    this.loc = options.loc;\n    this.chars = options.chars;\n  }\n\n  getString(): string {\n    return this.chars;\n  }\n\n  serialize(): SerializedSourceSlice<Chars> {\n    return [this.chars, this.loc.serialize()];\n  }\n}\n"," \n\nimport { LOCAL_DEBUG } from '@glimmer/local-debug-flags';\nimport { assertNever } from '@glimmer/util';\n\nimport {\n  BROKEN_LOCATION,\n  NON_EXISTENT_LOCATION,\n  type SourceLocation,\n  type SourcePosition,\n} from '../location';\nimport { SourceSlice } from '../slice';\nimport type { Source } from '../source';\nimport { OffsetKind } from './kinds';\nimport { IsInvisible, match, MatchAny, type MatchFn } from './match';\nimport {\n  type AnyPosition,\n  BROKEN,\n  CharPosition,\n  HbsPosition,\n  InvisiblePosition,\n  type SourceOffset,\n} from './offset';\n\n/**\n * All spans have these details in common.\n */\ninterface SpanData {\n  readonly kind: OffsetKind;\n\n  /**\n   * Convert this span into a string. If the span is broken, return `''`.\n   */\n  asString(): string;\n\n  /**\n   * Gets the module the span was located in.\n   */\n  getModule(): string;\n\n  /**\n   * Get the starting position for this span. Try to avoid creating new position objects, as they\n   * cache computations.\n   */\n  getStart(): AnyPosition;\n\n  /**\n   * Get the ending position for this span. Try to avoid creating new position objects, as they\n   * cache computations.\n   */\n  getEnd(): AnyPosition;\n\n  /**\n   * Compute the `SourceLocation` for this span, returned as an instance of `HbsSpan`.\n   */\n  toHbsSpan(): HbsSpan | null;\n\n  /**\n   * For compatibility, whenever the `start` or `end` of a {@see SourceOffset} changes, spans are\n   * notified of the change so they can update themselves. This shouldn't happen outside of AST\n   * plugins.\n   */\n  locDidUpdate(changes: { start?: SourcePosition; end?: SourcePosition }): void;\n\n  /**\n   * Serialize into a {@see SerializedSourceSpan}, which is compact and designed for readability in\n   * context like AST Explorer. If you need a {@see SourceLocation}, use {@see toJSON}.\n   */\n  serialize(): SerializedSourceSpan;\n}\n\n/**\n * A `SourceSpan` object represents a span of characters inside of a template source.\n *\n * There are three kinds of `SourceSpan` objects:\n *\n * - `ConcreteSourceSpan`, which contains byte offsets\n * - `LazySourceSpan`, which contains `SourceLocation`s from the Handlebars AST, which can be\n *   converted to byte offsets on demand.\n * - `InvisibleSourceSpan`, which represent source strings that aren't present in the source,\n *   because:\n *     - they were created synthetically\n *     - their location is nonsensical (the span is broken)\n *     - they represent nothing in the source (this currently happens only when a bug in the\n *       upstream Handlebars parser fails to assign a location to empty blocks)\n *\n * At a high level, all `SourceSpan` objects provide:\n *\n * - byte offsets\n * - source in column and line format\n *\n * And you can do these operations on `SourceSpan`s:\n *\n * - collapse it to a `SourceSpan` representing its starting or ending position\n * - slice out some characters, optionally skipping some characters at the beginning or end\n * - create a new `SourceSpan` with a different starting or ending offset\n *\n * All SourceSpan objects implement `SourceLocation`, for compatibility. All SourceSpan\n * objects have a `toJSON` that emits `SourceLocation`, also for compatibility.\n *\n * For compatibility, subclasses of `AbstractSourceSpan` must implement `locDidUpdate`, which\n * happens when an AST plugin attempts to modify the `start` or `end` of a span directly.\n *\n * The goal is to avoid creating any problems for use-cases like AST Explorer.\n */\nexport class SourceSpan implements SourceLocation {\n  static get NON_EXISTENT(): SourceSpan {\n    return new InvisibleSpan(OffsetKind.NonExistent, NON_EXISTENT_LOCATION).wrap();\n  }\n\n  static load(source: Source, serialized: SerializedSourceSpan): SourceSpan {\n    if (typeof serialized === 'number') {\n      return SourceSpan.forCharPositions(source, serialized, serialized);\n    } else if (typeof serialized === 'string') {\n      return SourceSpan.synthetic(serialized);\n    } else if (Array.isArray(serialized)) {\n      return SourceSpan.forCharPositions(source, serialized[0], serialized[1]);\n    } else if (serialized === OffsetKind.NonExistent) {\n      return SourceSpan.NON_EXISTENT;\n    } else if (serialized === OffsetKind.Broken) {\n      return SourceSpan.broken(BROKEN_LOCATION);\n    }\n\n    assertNever(serialized);\n  }\n\n  static forHbsLoc(source: Source, loc: SourceLocation): SourceSpan {\n    const start = new HbsPosition(source, loc.start);\n    const end = new HbsPosition(source, loc.end);\n    return new HbsSpan(source, { start, end }, loc).wrap();\n  }\n\n  static forCharPositions(source: Source, startPos: number, endPos: number): SourceSpan {\n    const start = new CharPosition(source, startPos);\n    const end = new CharPosition(source, endPos);\n\n    return new CharPositionSpan(source, { start, end }).wrap();\n  }\n\n  static synthetic(chars: string): SourceSpan {\n    return new InvisibleSpan(OffsetKind.InternalsSynthetic, NON_EXISTENT_LOCATION, chars).wrap();\n  }\n\n  static broken(pos: SourceLocation = BROKEN_LOCATION): SourceSpan {\n    return new InvisibleSpan(OffsetKind.Broken, pos).wrap();\n  }\n\n  readonly isInvisible: boolean;\n\n  constructor(private data: SpanData & AnySpan) {\n    this.isInvisible =\n      data.kind !== OffsetKind.CharPosition && data.kind !== OffsetKind.HbsPosition;\n  }\n\n  getStart(): SourceOffset {\n    return this.data.getStart().wrap();\n  }\n\n  getEnd(): SourceOffset {\n    return this.data.getEnd().wrap();\n  }\n\n  get loc(): SourceLocation {\n    const span = this.data.toHbsSpan();\n    return span === null ? BROKEN_LOCATION : span.toHbsLoc();\n  }\n\n  get module(): string {\n    return this.data.getModule();\n  }\n\n  /**\n   * Get the starting `SourcePosition` for this `SourceSpan`, lazily computing it if needed.\n   */\n  get startPosition(): SourcePosition {\n    return this.loc.start;\n  }\n\n  /**\n   * Get the ending `SourcePosition` for this `SourceSpan`, lazily computing it if needed.\n   */\n  get endPosition(): SourcePosition {\n    return this.loc.end;\n  }\n\n  /**\n   * Support converting ASTv1 nodes into a serialized format using JSON.stringify.\n   */\n  toJSON(): SourceLocation {\n    return this.loc;\n  }\n\n  /**\n   * Create a new span with the current span's end and a new beginning.\n   */\n  withStart(other: SourceOffset): SourceSpan {\n    return span(other.data, this.data.getEnd());\n  }\n\n  /**\n   * Create a new span with the current span's beginning and a new ending.\n   */\n  withEnd(this: SourceSpan, other: SourceOffset): SourceSpan {\n    return span(this.data.getStart(), other.data);\n  }\n\n  asString(): string {\n    return this.data.asString();\n  }\n\n  /**\n   * Convert this `SourceSpan` into a `SourceSlice`. In debug mode, this method optionally checks\n   * that the byte offsets represented by this `SourceSpan` actually correspond to the expected\n   * string.\n   */\n  toSlice(expected?: string): SourceSlice {\n    const chars = this.data.asString();\n\n    if (import.meta.env.DEV) {\n      if (expected !== undefined && chars !== expected) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `unexpectedly found ${JSON.stringify(\n            chars\n          )} when slicing source, but expected ${JSON.stringify(expected)}`\n        );\n      }\n    }\n\n    return new SourceSlice({\n      loc: this,\n      chars: expected || chars,\n    });\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use startPosition instead\n   */\n  get start(): SourcePosition {\n    return this.loc.start;\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use withStart instead\n   */\n  set start(position: SourcePosition) {\n    this.data.locDidUpdate({ start: position });\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use endPosition instead\n   */\n  get end(): SourcePosition {\n    return this.loc.end;\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use withEnd instead\n   */\n  set end(position: SourcePosition) {\n    this.data.locDidUpdate({ end: position });\n  }\n\n  /**\n   * For compatibility with SourceLocation in AST plugins\n   *\n   * @deprecated use module instead\n   */\n  get source(): string {\n    return this.module;\n  }\n\n  collapse(where: 'start' | 'end'): SourceSpan {\n    switch (where) {\n      case 'start':\n        return this.getStart().collapsed();\n      case 'end':\n        return this.getEnd().collapsed();\n    }\n  }\n\n  extend(other: SourceSpan): SourceSpan {\n    return span(this.data.getStart(), other.data.getEnd());\n  }\n\n  serialize(): SerializedSourceSpan {\n    return this.data.serialize();\n  }\n\n  slice({ skipStart = 0, skipEnd = 0 }: { skipStart?: number; skipEnd?: number }): SourceSpan {\n    return span(this.getStart().move(skipStart).data, this.getEnd().move(-skipEnd).data);\n  }\n\n  sliceStartChars({ skipStart = 0, chars }: { skipStart?: number; chars: number }): SourceSpan {\n    return span(this.getStart().move(skipStart).data, this.getStart().move(skipStart + chars).data);\n  }\n\n  sliceEndChars({ skipEnd = 0, chars }: { skipEnd?: number; chars: number }): SourceSpan {\n    return span(this.getEnd().move(skipEnd - chars).data, this.getStart().move(-skipEnd).data);\n  }\n}\n\ntype AnySpan = HbsSpan | CharPositionSpan | InvisibleSpan;\n\nclass CharPositionSpan implements SpanData {\n  readonly kind = OffsetKind.CharPosition;\n\n  _locPosSpan: HbsSpan | BROKEN | null = null;\n\n  constructor(\n    readonly source: Source,\n    readonly charPositions: { start: CharPosition; end: CharPosition }\n  ) {}\n\n  wrap(): SourceSpan {\n    return new SourceSpan(this);\n  }\n\n  asString(): string {\n    return this.source.slice(this.charPositions.start.charPos, this.charPositions.end.charPos);\n  }\n\n  getModule(): string {\n    return this.source.module;\n  }\n\n  getStart(): AnyPosition {\n    return this.charPositions.start;\n  }\n\n  getEnd(): AnyPosition {\n    return this.charPositions.end;\n  }\n\n  locDidUpdate() {\n    if (LOCAL_DEBUG) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `updating a location that came from a CharPosition span doesn't work reliably. Don't try to update locations after the plugin phase`\n      );\n    }\n  }\n\n  toHbsSpan(): HbsSpan | null {\n    let locPosSpan = this._locPosSpan;\n\n    if (locPosSpan === null) {\n      const start = this.charPositions.start.toHbsPos();\n      const end = this.charPositions.end.toHbsPos();\n\n      if (start === null || end === null) {\n        locPosSpan = this._locPosSpan = BROKEN;\n      } else {\n        locPosSpan = this._locPosSpan = new HbsSpan(this.source, {\n          start,\n          end,\n        });\n      }\n    }\n\n    return locPosSpan === BROKEN ? null : locPosSpan;\n  }\n\n  serialize(): SerializedSourceSpan {\n    const {\n      start: { charPos: start },\n      end: { charPos: end },\n    } = this.charPositions;\n\n    if (start === end) {\n      return start;\n    } else {\n      return [start, end];\n    }\n  }\n\n  toCharPosSpan(): CharPositionSpan {\n    return this;\n  }\n}\n\nexport class HbsSpan implements SpanData {\n  readonly kind = OffsetKind.HbsPosition;\n\n  _charPosSpan: CharPositionSpan | BROKEN | null = null;\n\n  // the source location from Handlebars + AST Plugins -- could be wrong\n  _providedHbsLoc: SourceLocation | null;\n\n  constructor(\n    readonly source: Source,\n    readonly hbsPositions: { start: HbsPosition; end: HbsPosition },\n    providedHbsLoc: SourceLocation | null = null\n  ) {\n    this._providedHbsLoc = providedHbsLoc;\n  }\n\n  serialize(): SerializedConcreteSourceSpan {\n    const charPos = this.toCharPosSpan();\n    return charPos === null ? OffsetKind.Broken : charPos.wrap().serialize();\n  }\n\n  wrap(): SourceSpan {\n    return new SourceSpan(this);\n  }\n\n  private updateProvided(pos: SourcePosition, edge: 'start' | 'end') {\n    if (this._providedHbsLoc) {\n      this._providedHbsLoc[edge] = pos;\n    }\n\n    // invalidate computed character offsets\n    this._charPosSpan = null;\n    this._providedHbsLoc = {\n      start: pos,\n      end: pos,\n    };\n  }\n\n  locDidUpdate({ start, end }: { start?: SourcePosition; end?: SourcePosition }): void {\n    if (start !== undefined) {\n      this.updateProvided(start, 'start');\n      this.hbsPositions.start = new HbsPosition(this.source, start, null);\n    }\n\n    if (end !== undefined) {\n      this.updateProvided(end, 'end');\n      this.hbsPositions.end = new HbsPosition(this.source, end, null);\n    }\n  }\n\n  asString(): string {\n    const span = this.toCharPosSpan();\n    return span === null ? '' : span.asString();\n  }\n\n  getModule(): string {\n    return this.source.module;\n  }\n\n  getStart(): AnyPosition {\n    return this.hbsPositions.start;\n  }\n\n  getEnd(): AnyPosition {\n    return this.hbsPositions.end;\n  }\n\n  toHbsLoc(): SourceLocation {\n    return {\n      start: this.hbsPositions.start.hbsPos,\n      end: this.hbsPositions.end.hbsPos,\n    };\n  }\n\n  toHbsSpan(): HbsSpan {\n    return this;\n  }\n\n  toCharPosSpan(): CharPositionSpan | null {\n    let charPosSpan = this._charPosSpan;\n\n    if (charPosSpan === null) {\n      const start = this.hbsPositions.start.toCharPos();\n      const end = this.hbsPositions.end.toCharPos();\n\n      if (start && end) {\n        charPosSpan = this._charPosSpan = new CharPositionSpan(this.source, {\n          start,\n          end,\n        });\n      } else {\n        charPosSpan = this._charPosSpan = BROKEN;\n        return null;\n      }\n    }\n\n    return charPosSpan === BROKEN ? null : charPosSpan;\n  }\n}\n\nclass InvisibleSpan implements SpanData {\n  constructor(\n    readonly kind: OffsetKind.Broken | OffsetKind.InternalsSynthetic | OffsetKind.NonExistent,\n    // whatever was provided, possibly broken\n    readonly loc: SourceLocation,\n    // if the span represents a synthetic string\n    readonly string: string | null = null\n  ) {}\n\n  serialize(): SerializedConcreteSourceSpan {\n    switch (this.kind) {\n      case OffsetKind.Broken:\n      case OffsetKind.NonExistent:\n        return this.kind;\n      case OffsetKind.InternalsSynthetic:\n        return this.string || '';\n    }\n  }\n\n  wrap(): SourceSpan {\n    return new SourceSpan(this);\n  }\n\n  asString(): string {\n    return this.string || '';\n  }\n\n  locDidUpdate({ start, end }: { start?: SourcePosition; end?: SourcePosition }) {\n    if (start !== undefined) {\n      this.loc.start = start;\n    }\n\n    if (end !== undefined) {\n      this.loc.end = end;\n    }\n  }\n\n  getModule(): string {\n    // TODO: Make this reflect the actual module this span originated from\n    return 'an unknown module';\n  }\n\n  getStart(): AnyPosition {\n    return new InvisiblePosition(this.kind, this.loc.start);\n  }\n\n  getEnd(): AnyPosition {\n    return new InvisiblePosition(this.kind, this.loc.end);\n  }\n\n  toCharPosSpan(): InvisibleSpan {\n    return this;\n  }\n\n  toHbsSpan(): null {\n    return null;\n  }\n\n  toHbsLoc(): SourceLocation {\n    return BROKEN_LOCATION;\n  }\n}\n\nexport const span: MatchFn<SourceSpan> = match((m) =>\n  m\n    .when(OffsetKind.HbsPosition, OffsetKind.HbsPosition, (left, right) =>\n      new HbsSpan(left.source, {\n        start: left,\n        end: right,\n      }).wrap()\n    )\n    .when(OffsetKind.CharPosition, OffsetKind.CharPosition, (left, right) =>\n      new CharPositionSpan(left.source, {\n        start: left,\n        end: right,\n      }).wrap()\n    )\n    .when(OffsetKind.CharPosition, OffsetKind.HbsPosition, (left, right) => {\n      const rightCharPos = right.toCharPos();\n\n      if (rightCharPos === null) {\n        return new InvisibleSpan(OffsetKind.Broken, BROKEN_LOCATION).wrap();\n      } else {\n        return span(left, rightCharPos);\n      }\n    })\n    .when(OffsetKind.HbsPosition, OffsetKind.CharPosition, (left, right) => {\n      const leftCharPos = left.toCharPos();\n\n      if (leftCharPos === null) {\n        return new InvisibleSpan(OffsetKind.Broken, BROKEN_LOCATION).wrap();\n      } else {\n        return span(leftCharPos, right);\n      }\n    })\n    .when(IsInvisible, MatchAny, (left) => new InvisibleSpan(left.kind, BROKEN_LOCATION).wrap())\n    .when(MatchAny, IsInvisible, (_, right) =>\n      new InvisibleSpan(right.kind, BROKEN_LOCATION).wrap()\n    )\n);\n\nexport type SerializedConcreteSourceSpan =\n  | /** collapsed */ number\n  | /** normal */ [start: number, size: number]\n  | /** synthetic */ string;\n\nexport type SerializedSourceSpan =\n  | SerializedConcreteSourceSpan\n  | OffsetKind.NonExistent\n  | OffsetKind.Broken;\n"," \nimport { type SourcePosition, UNKNOWN_POSITION } from '../location';\nimport type { Source } from '../source';\nimport { OffsetKind } from './kinds';\nimport { match, MatchAny } from './match';\nimport { type SourceSpan, span } from './span';\n\n/**\n * All positions have these details in common. Most notably, all three kinds of positions can\n * must be able to attempt to convert themselves into {@see CharPosition}.\n */\nexport interface PositionData {\n  readonly kind: OffsetKind;\n  toCharPos(): CharPosition | null;\n  toJSON(): SourcePosition;\n}\n\n/**\n * Used to indicate that an attempt to convert a `SourcePosition` to a character offset failed. It\n * is separate from `null` so that `null` can be used to indicate that the computation wasn't yet\n * attempted (and therefore to cache the failure)\n */\nexport const BROKEN = 'BROKEN';\nexport type BROKEN = 'BROKEN';\n\nexport type AnyPosition = HbsPosition | CharPosition | InvisiblePosition;\n\n/**\n * A `SourceOffset` represents a single position in the source.\n *\n * There are three kinds of backing data for `SourceOffset` objects:\n *\n * - `CharPosition`, which contains a character offset into the raw source string\n * - `HbsPosition`, which contains a `SourcePosition` from the Handlebars AST, which can be\n *   converted to a `CharPosition` on demand.\n * - `InvisiblePosition`, which represents a position not in source (@see {InvisiblePosition})\n */\nexport class SourceOffset {\n  /**\n   * Create a `SourceOffset` from a Handlebars `SourcePosition`. It's stored as-is, and converted\n   * into a character offset on demand, which avoids unnecessarily computing the offset of every\n   * `SourceLocation`, but also means that broken `SourcePosition`s are not always detected.\n   */\n  static forHbsPos(source: Source, pos: SourcePosition): SourceOffset {\n    return new HbsPosition(source, pos, null).wrap();\n  }\n\n  /**\n   * Create a `SourceOffset` that corresponds to a broken `SourcePosition`. This means that the\n   * calling code determined (or knows) that the `SourceLocation` doesn't correspond correctly to\n   * any part of the source.\n   */\n  static broken(pos: SourcePosition = UNKNOWN_POSITION): SourceOffset {\n    return new InvisiblePosition(OffsetKind.Broken, pos).wrap();\n  }\n\n  constructor(readonly data: PositionData & AnyPosition) {}\n\n  /**\n   * Get the character offset for this `SourceOffset`, if possible.\n   */\n  get offset(): number | null {\n    const charPos = this.data.toCharPos();\n    return charPos === null ? null : charPos.offset;\n  }\n\n  /**\n   * Compare this offset with another one.\n   *\n   * If both offsets are `HbsPosition`s, they're equivalent as long as their lines and columns are\n   * the same. This avoids computing offsets unnecessarily.\n   *\n   * Otherwise, two `SourceOffset`s are equivalent if their successfully computed character offsets\n   * are the same.\n   */\n  eql(right: SourceOffset): boolean {\n    return eql(this.data, right.data);\n  }\n\n  /**\n   * Create a span that starts from this source offset and ends with another source offset. Avoid\n   * computing character offsets if both `SourceOffset`s are still lazy.\n   */\n  until(other: SourceOffset): SourceSpan {\n    return span(this.data, other.data);\n  }\n\n  /**\n   * Create a `SourceOffset` by moving the character position represented by this source offset\n   * forward or backward (if `by` is negative), if possible.\n   *\n   * If this `SourceOffset` can't compute a valid character offset, `move` returns a broken offset.\n   *\n   * If the resulting character offset is less than 0 or greater than the size of the source, `move`\n   * returns a broken offset.\n   */\n  move(by: number): SourceOffset {\n    const charPos = this.data.toCharPos();\n\n    if (charPos === null) {\n      return SourceOffset.broken();\n    } else {\n      const result = charPos.offset + by;\n\n      if (charPos.source.check(result)) {\n        return new CharPosition(charPos.source, result).wrap();\n      } else {\n        return SourceOffset.broken();\n      }\n    }\n  }\n\n  /**\n   * Create a new `SourceSpan` that represents a collapsed range at this source offset. Avoid\n   * computing the character offset if it has not already been computed.\n   */\n  collapsed(): SourceSpan {\n    return span(this.data, this.data);\n  }\n\n  /**\n   * Convert this `SourceOffset` into a Handlebars {@see SourcePosition} for compatibility with\n   * existing plugins.\n   */\n  toJSON(): SourcePosition {\n    return this.data.toJSON();\n  }\n}\n\nexport class CharPosition implements PositionData {\n  readonly kind = OffsetKind.CharPosition;\n\n  /** Computed from char offset */\n  _locPos: HbsPosition | BROKEN | null = null;\n\n  constructor(readonly source: Source, readonly charPos: number) {}\n\n  /**\n   * This is already a `CharPosition`.\n   *\n   * {@see HbsPosition} for the alternative.\n   */\n  toCharPos(): CharPosition {\n    return this;\n  }\n\n  /**\n   * Produce a Handlebars {@see SourcePosition} for this `CharPosition`. If this `CharPosition` was\n   * computed using {@see SourceOffset#move}, this will compute the `SourcePosition` for the offset.\n   */\n  toJSON(): SourcePosition {\n    const hbs = this.toHbsPos();\n    return hbs === null ? UNKNOWN_POSITION : hbs.toJSON();\n  }\n\n  wrap(): SourceOffset {\n    return new SourceOffset(this);\n  }\n\n  /**\n   * A `CharPosition` always has an offset it can produce without any additional computation.\n   */\n  get offset(): number {\n    return this.charPos;\n  }\n\n  /**\n   * Convert the current character offset to an `HbsPosition`, if it was not already computed. Once\n   * a `CharPosition` has computed its `HbsPosition`, it will not need to do compute it again, and\n   * the same `CharPosition` is retained when used as one of the ends of a `SourceSpan`, so\n   * computing the `HbsPosition` should be a one-time operation.\n   */\n  toHbsPos(): HbsPosition | null {\n    let locPos = this._locPos;\n\n    if (locPos === null) {\n      const hbsPos = this.source.hbsPosFor(this.charPos);\n\n      if (hbsPos === null) {\n        this._locPos = locPos = BROKEN;\n      } else {\n        this._locPos = locPos = new HbsPosition(this.source, hbsPos, this.charPos);\n      }\n    }\n\n    return locPos === BROKEN ? null : locPos;\n  }\n}\n\nexport class HbsPosition implements PositionData {\n  readonly kind = OffsetKind.HbsPosition;\n\n  _charPos: CharPosition | BROKEN | null;\n\n  constructor(\n    readonly source: Source,\n    readonly hbsPos: SourcePosition,\n    charPos: number | null = null\n  ) {\n    this._charPos = charPos === null ? null : new CharPosition(source, charPos);\n  }\n\n  /**\n   * Lazily compute the character offset from the {@see SourcePosition}. Once an `HbsPosition` has\n   * computed its `CharPosition`, it will not need to do compute it again, and the same\n   * `HbsPosition` is retained when used as one of the ends of a `SourceSpan`, so computing the\n   * `CharPosition` should be a one-time operation.\n   */\n  toCharPos(): CharPosition | null {\n    let charPos = this._charPos;\n\n    if (charPos === null) {\n      const charPosNumber = this.source.charPosFor(this.hbsPos);\n\n      if (charPosNumber === null) {\n        this._charPos = charPos = BROKEN;\n      } else {\n        this._charPos = charPos = new CharPosition(this.source, charPosNumber);\n      }\n    }\n\n    return charPos === BROKEN ? null : charPos;\n  }\n\n  /**\n   * Return the {@see SourcePosition} that this `HbsPosition` was instantiated with. This operation\n   * does not need to compute anything.\n   */\n  toJSON(): SourcePosition {\n    return this.hbsPos;\n  }\n\n  wrap(): SourceOffset {\n    return new SourceOffset(this);\n  }\n\n  /**\n   * This is already an `HbsPosition`.\n   *\n   * {@see CharPosition} for the alternative.\n   */\n  toHbsPos(): HbsPosition {\n    return this;\n  }\n}\n\nexport class InvisiblePosition implements PositionData {\n  constructor(\n    readonly kind: OffsetKind.Broken | OffsetKind.InternalsSynthetic | OffsetKind.NonExistent,\n    // whatever was provided, possibly broken\n    readonly pos: SourcePosition\n  ) {}\n\n  /**\n   * A broken position cannot be turned into a {@see CharacterPosition}.\n   */\n  toCharPos(): null {\n    return null;\n  }\n\n  /**\n   * The serialization of an `InvisiblePosition is whatever Handlebars {@see SourcePosition} was\n   * originally identified as broken, non-existent or synthetic.\n   *\n   * If an `InvisiblePosition` never had an source offset at all, this method returns\n   * {@see UNKNOWN_POSITION} for compatibility.\n   */\n  toJSON(): SourcePosition {\n    return this.pos;\n  }\n\n  wrap(): SourceOffset {\n    return new SourceOffset(this);\n  }\n\n  get offset(): null {\n    return null;\n  }\n}\n\n/**\n * Compare two {@see AnyPosition} and determine whether they are equal.\n *\n * @see {SourceOffset#eql}\n */\nconst eql = match<boolean>((m) =>\n  m\n    .when(\n      OffsetKind.HbsPosition,\n      OffsetKind.HbsPosition,\n      ({ hbsPos: left }, { hbsPos: right }) =>\n        left.column === right.column && left.line === right.line\n    )\n    .when(\n      OffsetKind.CharPosition,\n      OffsetKind.CharPosition,\n      ({ charPos: left }, { charPos: right }) => left === right\n    )\n    .when(\n      OffsetKind.CharPosition,\n      OffsetKind.HbsPosition,\n      ({ offset: left }, right) => left === right.toCharPos()?.offset\n    )\n    .when(\n      OffsetKind.HbsPosition,\n      OffsetKind.CharPosition,\n      (left, { offset: right }) => left.toCharPos()?.offset === right\n    )\n    .when(MatchAny, MatchAny, () => false)\n);\n","import type { Nullable } from '@glimmer/interfaces';\nimport { assert } from '@glimmer/util';\n\nimport type { PrecompileOptions } from '../parser/tokenizer-event-handlers';\nimport type { SourceLocation, SourcePosition } from './location';\nimport { SourceOffset, SourceSpan } from './span';\n\nexport class Source {\n  static from(source: string, options: PrecompileOptions = {}): Source {\n    return new Source(source, options.meta?.moduleName);\n  }\n\n  constructor(readonly source: string, readonly module: string = 'an unknown module') {}\n\n  /**\n   * Validate that the character offset represents a position in the source string.\n   */\n  check(offset: number): boolean {\n    return offset >= 0 && offset <= this.source.length;\n  }\n\n  slice(start: number, end: number): string {\n    return this.source.slice(start, end);\n  }\n\n  offsetFor(line: number, column: number): SourceOffset {\n    return SourceOffset.forHbsPos(this, { line, column });\n  }\n\n  spanFor({ start, end }: Readonly<SourceLocation>): SourceSpan {\n    return SourceSpan.forHbsLoc(this, {\n      start: { line: start.line, column: start.column },\n      end: { line: end.line, column: end.column },\n    });\n  }\n\n  hbsPosFor(offset: number): Nullable<SourcePosition> {\n    let seenLines = 0;\n    let seenChars = 0;\n\n    if (offset > this.source.length) {\n      return null;\n    }\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      let nextLine = this.source.indexOf('\\n', seenChars);\n\n      if (offset <= nextLine || nextLine === -1) {\n        return {\n          line: seenLines + 1,\n          column: offset - seenChars,\n        };\n      } else {\n        seenLines += 1;\n        seenChars = nextLine + 1;\n      }\n    }\n  }\n\n  charPosFor(position: SourcePosition): number | null {\n    let { line, column } = position;\n    let sourceString = this.source;\n    let sourceLength = sourceString.length;\n    let seenLines = 0;\n    let seenChars = 0;\n\n    while (seenChars < sourceLength) {\n      let nextLine = this.source.indexOf('\\n', seenChars);\n      if (nextLine === -1) nextLine = this.source.length;\n\n      if (seenLines === line - 1) {\n        if (seenChars + column > nextLine) return nextLine;\n\n        if (import.meta.env.DEV) {\n          let roundTrip = this.hbsPosFor(seenChars + column);\n          assert(roundTrip !== null, `the returned offset failed to round-trip`);\n          assert(roundTrip.line === line, `the round-tripped line didn't match the original line`);\n          assert(\n            roundTrip.column === column,\n            `the round-tripped column didn't match the original column`\n          );\n        }\n\n        return seenChars + column;\n      } else if (nextLine === -1) {\n        return 0;\n      } else {\n        seenLines += 1;\n        seenChars = nextLine + 1;\n      }\n    }\n\n    return sourceLength;\n  }\n}\n"," \nimport type { PresentArray } from '@glimmer/interfaces';\nimport { getFirst, getLast, isPresentArray } from '@glimmer/util';\n\nimport type { LocatedWithOptionalSpan, LocatedWithSpan } from './location';\nimport { type SourceOffset, SourceSpan } from './span';\n\nexport type HasSpan = SourceSpan | LocatedWithSpan | PresentArray<LocatedWithSpan>;\nexport type MaybeHasSpan = SourceSpan | LocatedWithOptionalSpan | LocatedWithOptionalSpan[] | null;\n\nexport type ToSourceOffset = number | SourceOffset;\n\nexport class SpanList {\n  static range(span: PresentArray<HasSourceSpan>): SourceSpan;\n  static range(span: HasSourceSpan[], fallback: SourceSpan): SourceSpan;\n  static range(span: HasSourceSpan[], fallback: SourceSpan = SourceSpan.NON_EXISTENT): SourceSpan {\n    return new SpanList(span.map(loc)).getRangeOffset(fallback);\n  }\n\n  _span: SourceSpan[];\n\n  constructor(span: SourceSpan[] = []) {\n    this._span = span;\n  }\n\n  add(offset: SourceSpan): void {\n    this._span.push(offset);\n  }\n\n  getRangeOffset(fallback: SourceSpan): SourceSpan {\n    if (isPresentArray(this._span)) {\n      let first = getFirst(this._span);\n      let last = getLast(this._span);\n      return first.extend(last);\n    } else {\n      return fallback;\n    }\n  }\n}\n\nexport type HasSourceSpan = { loc: SourceSpan } | SourceSpan | [HasSourceSpan, ...HasSourceSpan[]];\n\nexport function loc(span: HasSourceSpan): SourceSpan {\n  if (Array.isArray(span)) {\n    let first = getFirst(span);\n    let last = getLast(span);\n    return loc(first).extend(loc(last));\n  } else if (span instanceof SourceSpan) {\n    return span;\n  } else {\n    return span.loc;\n  }\n}\n\nexport type MaybeHasSourceSpan = { loc: SourceSpan } | SourceSpan | MaybeHasSourceSpan[];\n\nexport function hasSpan(span: MaybeHasSourceSpan): span is HasSourceSpan {\n  if (Array.isArray(span) && span.length === 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function maybeLoc(location: MaybeHasSourceSpan, fallback: SourceSpan): SourceSpan {\n  if (hasSpan(location)) {\n    return loc(location);\n  } else {\n    return fallback;\n  }\n}\n","import type * as src from './source/api';\n\nexport interface GlimmerSyntaxError extends Error {\n  location: src.SourceSpan | null;\n  code: string | null;\n}\n\nexport function generateSyntaxError(message: string, location: src.SourceSpan): GlimmerSyntaxError {\n  let { module, loc } = location;\n  let { line, column } = loc.start;\n\n  let code = location.asString();\n  let quotedCode = code ? `\\n\\n|\\n|  ${code.split('\\n').join('\\n|  ')}\\n|\\n\\n` : '';\n\n  let error = new Error(\n    `${message}: ${quotedCode}(error occurred in '${module}' @ line ${line} : column ${column})`\n  ) as GlimmerSyntaxError;\n\n  error.name = 'SyntaxError';\n  error.location = location;\n  error.code = code;\n\n  return error;\n}\n","import type * as ASTv1 from './api';\n\n// ensure stays in sync with typing\n// ParentNode and ChildKey types are derived from VisitorKeysMap\nconst visitorKeys = {\n  Program: ['body'],\n  Template: ['body'],\n  Block: ['body'],\n\n  MustacheStatement: ['path', 'params', 'hash'],\n  BlockStatement: ['path', 'params', 'hash', 'program', 'inverse'],\n  ElementModifierStatement: ['path', 'params', 'hash'],\n  PartialStatement: ['name', 'params', 'hash'],\n  CommentStatement: [],\n  MustacheCommentStatement: [],\n  ElementNode: ['attributes', 'modifiers', 'children', 'comments'],\n  AttrNode: ['value'],\n  TextNode: [],\n\n  ConcatStatement: ['parts'],\n  SubExpression: ['path', 'params', 'hash'],\n  PathExpression: [],\n  PathHead: [],\n\n  StringLiteral: [],\n  BooleanLiteral: [],\n  NumberLiteral: [],\n  NullLiteral: [],\n  UndefinedLiteral: [],\n\n  Hash: ['pairs'],\n  HashPair: ['value'],\n\n  // v2 new nodes\n  NamedBlock: ['attributes', 'modifiers', 'children', 'comments'],\n  SimpleElement: ['attributes', 'modifiers', 'children', 'comments'],\n  Component: ['head', 'attributes', 'modifiers', 'children', 'comments'],\n} as const;\n\ntype VisitorKeysMap = typeof visitorKeys;\n\nexport type VisitorKeys = { [P in keyof VisitorKeysMap]: VisitorKeysMap[P][number] };\nexport type VisitorKey<N extends ASTv1.Node> = VisitorKeys[N['type']] & keyof N;\n\nexport default visitorKeys;\n","import type { Nullable } from '@glimmer/interfaces';\n\nimport type * as ASTv1 from '../v1/api';\n\nexport interface TraversalError extends Error {\n  constructor: TraversalErrorConstructor;\n  key: string;\n  node: ASTv1.Node;\n  parent: Nullable<ASTv1.Node>;\n  stack?: string;\n}\n\nexport interface TraversalErrorConstructor {\n  new (message: string, node: ASTv1.Node, parent: Nullable<ASTv1.Node>, key: string): TraversalError;\n  readonly prototype: TraversalError;\n}\n\nconst TraversalError: TraversalErrorConstructor = (function () {\n  TraversalError.prototype = Object.create(Error.prototype);\n  TraversalError.prototype.constructor = TraversalError;\n\n  function TraversalError(\n    this: TraversalError,\n    message: string,\n    node: ASTv1.Node,\n    parent: Nullable<ASTv1.Node>,\n    key: string\n  ) {\n    let error = Error.call(this, message);\n\n    this.key = key;\n    this.message = message;\n    this.node = node;\n    this.parent = parent;\n\n    if (error.stack) {\n      this.stack = error.stack;\n    }\n  }\n\n  return TraversalError as unknown as TraversalErrorConstructor;\n})();\n\nexport default TraversalError;\n\nexport function cannotRemoveNode(\n  node: ASTv1.Node,\n  parent: ASTv1.Node,\n  key: string\n): TraversalError {\n  return new TraversalError(\n    'Cannot remove a node unless it is part of an array',\n    node,\n    parent,\n    key\n  );\n}\n\nexport function cannotReplaceNode(\n  node: ASTv1.Node,\n  parent: ASTv1.Node,\n  key: string\n): TraversalError {\n  return new TraversalError(\n    'Cannot replace a node with multiple nodes unless it is part of an array',\n    node,\n    parent,\n    key\n  );\n}\n\nexport function cannotReplaceOrRemoveInKeyHandlerYet(\n  node: ASTv1.Node,\n  key: string\n): TraversalError {\n  return new TraversalError(\n    'Replacing and removing in key handlers is not yet supported.',\n    node,\n    null,\n    key\n  );\n}\n","import type * as ASTv1 from '../v1/api';\n\nexport default class WalkerPath<N extends ASTv1.Node> {\n  node: N;\n  parent: WalkerPath<ASTv1.Node> | null;\n  parentKey: string | null;\n\n  constructor(\n    node: N,\n    parent: WalkerPath<ASTv1.Node> | null = null,\n    parentKey: string | null = null\n  ) {\n    this.node = node;\n    this.parent = parent;\n    this.parentKey = parentKey;\n  }\n\n  get parentNode(): ASTv1.Node | null {\n    return this.parent ? this.parent.node : null;\n  }\n\n  parents(): Iterable<WalkerPath<ASTv1.Node> | null> {\n    return {\n      [Symbol.iterator]: () => {\n        return new PathParentsIterator(this);\n      },\n    };\n  }\n}\n\nclass PathParentsIterator implements Iterator<WalkerPath<ASTv1.Node> | null> {\n  path: WalkerPath<ASTv1.Node>;\n\n  constructor(path: WalkerPath<ASTv1.Node>) {\n    this.path = path;\n  }\n\n  next() {\n    if (this.path.parent) {\n      this.path = this.path.parent;\n      return { done: false, value: this.path };\n    } else {\n      return { done: true, value: null };\n    }\n  }\n}\n","import { LOCAL_DEBUG } from '@glimmer/local-debug-flags';\nimport { deprecate, unwrap } from '@glimmer/util';\n\nimport type * as ASTv1 from '../v1/api';\nimport visitorKeys, { type VisitorKey, type VisitorKeys } from '../v1/visitor-keys';\nimport {\n  cannotRemoveNode,\n  cannotReplaceNode,\n  cannotReplaceOrRemoveInKeyHandlerYet,\n} from './errors';\nimport WalkerPath from './path';\nimport type { KeyHandler, KeyTraversal, NodeHandler, NodeTraversal, NodeVisitor } from './visitor';\n\nfunction getEnterFunction<N extends ASTv1.Node>(\n  handler: NodeTraversal<N>\n): NodeHandler<N> | undefined;\nfunction getEnterFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: KeyTraversal<N, K>\n): KeyHandler<N, K> | undefined;\nfunction getEnterFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: NodeTraversal<N> | KeyTraversal<N, K>\n): NodeHandler<N> | KeyHandler<N, K> | undefined {\n  if (typeof handler === 'function') {\n    return handler;\n  } else {\n    return handler.enter as NodeHandler<N> | KeyHandler<N, K>;\n  }\n}\n\nfunction getExitFunction<N extends ASTv1.Node>(\n  handler: NodeTraversal<N>\n): NodeHandler<N> | undefined;\nfunction getExitFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: KeyTraversal<N, K>\n): KeyHandler<N, K> | undefined;\nfunction getExitFunction<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: NodeTraversal<N> | KeyTraversal<N, K>\n): NodeHandler<N> | KeyHandler<N, K> | undefined {\n  if (typeof handler === 'function') {\n    return undefined;\n  } else {\n    return handler.exit as NodeHandler<N> | KeyHandler<N, K>;\n  }\n}\n\nfunction getKeyHandler<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  handler: NodeTraversal<N>,\n  key: K\n): KeyTraversal<N, K> | KeyTraversal<N, VisitorKey<N>> | undefined {\n  let keyVisitor = typeof handler !== 'function' ? handler.keys : undefined;\n  if (keyVisitor === undefined) return;\n\n  let keyHandler = keyVisitor[key];\n  if (keyHandler !== undefined) {\n    return keyHandler as KeyTraversal<N, K>;\n  }\n  return keyVisitor.All;\n}\n\nfunction getNodeHandler<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  nodeType: N['type']\n): NodeTraversal<N>;\nfunction getNodeHandler(visitor: NodeVisitor, nodeType: 'All'): NodeTraversal<ASTv1.Node>;\nfunction getNodeHandler<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  nodeType: N['type']\n): NodeTraversal<ASTv1.Node> | undefined {\n  if (nodeType === 'Template' || nodeType === 'Block') {\n    if (visitor.Program) {\n      if (LOCAL_DEBUG) {\n        deprecate(\n          `The 'Program' visitor node is deprecated. Use 'Template' or 'Block' instead (node was '${nodeType}') `\n        );\n      }\n\n      return visitor.Program as NodeTraversal<ASTv1.Node>;\n    }\n  }\n\n  let handler = visitor[nodeType];\n  if (handler !== undefined) {\n    return handler as unknown as NodeTraversal<ASTv1.Node>;\n  }\n  return visitor.All;\n}\n\nfunction visitNode<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  path: WalkerPath<N>\n): ASTv1.Node | ASTv1.Node[] | undefined | null | void {\n  let { node, parent, parentKey } = path;\n\n  let handler: NodeTraversal<N> = getNodeHandler(visitor, node.type);\n  let enter;\n  let exit;\n\n  if (handler !== undefined) {\n    enter = getEnterFunction(handler);\n    exit = getExitFunction(handler);\n  }\n\n  let result: ASTv1.Node | ASTv1.Node[] | undefined | null | void;\n  if (enter !== undefined) {\n    result = enter(node, path);\n  }\n\n  if (result !== undefined && result !== null) {\n    if (JSON.stringify(node) === JSON.stringify(result)) {\n      result = undefined;\n    } else if (Array.isArray(result)) {\n      visitArray(visitor, result, parent, parentKey);\n      return result;\n    } else {\n      let path = new WalkerPath(result, parent, parentKey);\n      return visitNode(visitor, path) || result;\n    }\n  }\n\n  if (result === undefined) {\n    let keys = visitorKeys[node.type];\n\n    for (let i = 0; i < keys.length; i++) {\n      let key = keys[i] as VisitorKeys[N['type']] & keyof N;\n      // we know if it has child keys we can widen to a ParentNode\n      visitKey(visitor, handler, path, key);\n    }\n\n    if (exit !== undefined) {\n      result = exit(node, path);\n    }\n  }\n\n  return result;\n}\n\nfunction get<N extends ASTv1.Node>(\n  node: N,\n  key: VisitorKeys[N['type']] & keyof N\n): ASTv1.Node | ASTv1.Node[] {\n  return node[key] as unknown as ASTv1.Node | ASTv1.Node[];\n}\n\nfunction set<N extends ASTv1.Node, K extends keyof N>(node: N, key: K, value: N[K]): void {\n  node[key] = value;\n}\n\nfunction visitKey<N extends ASTv1.Node>(\n  visitor: NodeVisitor,\n  handler: NodeTraversal<N>,\n  path: WalkerPath<N>,\n  key: VisitorKeys[N['type']] & keyof N\n) {\n  let { node } = path;\n\n  let value = get(node, key);\n  if (!value) {\n    return;\n  }\n\n  let keyEnter;\n  let keyExit;\n\n  if (handler !== undefined) {\n    let keyHandler = getKeyHandler(handler, key);\n    if (keyHandler !== undefined) {\n      keyEnter = getEnterFunction(keyHandler);\n      keyExit = getExitFunction(keyHandler);\n    }\n  }\n\n  if (keyEnter !== undefined) {\n    if (keyEnter(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n\n  if (Array.isArray(value)) {\n    visitArray(visitor, value, path, key);\n  } else {\n    let keyPath = new WalkerPath(value, path, key);\n    let result = visitNode(visitor, keyPath);\n    if (result !== undefined) {\n      // TODO: dynamically check the results by having a table of\n      // expected node types in value space, not just type space\n       \n      assignKey(node, key, value, result as any);\n    }\n  }\n\n  if (keyExit !== undefined) {\n    if (keyExit(node, key) !== undefined) {\n      throw cannotReplaceOrRemoveInKeyHandlerYet(node, key);\n    }\n  }\n}\n\nfunction visitArray(\n  visitor: NodeVisitor,\n  array: ASTv1.Node[],\n  parent: WalkerPath<ASTv1.Node> | null,\n  parentKey: string | null\n) {\n  for (let i = 0; i < array.length; i++) {\n    let node = unwrap(array[i]);\n    let path = new WalkerPath(node, parent, parentKey);\n    let result = visitNode(visitor, path);\n    if (result !== undefined) {\n      i += spliceArray(array, i, result) - 1;\n    }\n  }\n}\n\nfunction assignKey<N extends ASTv1.Node, K extends VisitorKey<N>>(\n  node: N,\n  key: K,\n  value: ASTv1.Node,\n  result: N[K] | [N[K]] | null\n) {\n  if (result === null) {\n    throw cannotRemoveNode(value, node, key);\n  } else if (Array.isArray(result)) {\n    if (result.length === 1) {\n      set(node, key, result[0]);\n    } else {\n      if (result.length === 0) {\n        throw cannotRemoveNode(value, node, key);\n      } else {\n        throw cannotReplaceNode(value, node, key);\n      }\n    }\n  } else {\n    set(node, key, result);\n  }\n}\n\nfunction spliceArray(array: ASTv1.Node[], index: number, result: ASTv1.Node | ASTv1.Node[] | null) {\n  if (result === null) {\n    array.splice(index, 1);\n    return 0;\n  } else if (Array.isArray(result)) {\n    array.splice(index, 1, ...result);\n    return result.length;\n  } else {\n    array.splice(index, 1, result);\n    return 1;\n  }\n}\n\nexport default function traverse(node: ASTv1.Node, visitor: NodeVisitor): void {\n  let path = new WalkerPath(node);\n  visitNode(visitor, path);\n}\n","import type { Nullable } from '@glimmer/interfaces';\n\nimport type * as ASTv1 from '../v1/api';\n\nexport type NodeCallback<N extends ASTv1.Node> = (node: N, walker: Walker) => void;\n\nexport default class Walker {\n  public stack: unknown[] = [];\n  constructor(public order?: unknown) {}\n\n  visit<N extends ASTv1.Node>(node: Nullable<N>, visitor: NodeCallback<N>): void {\n    if (!node) {\n      return;\n    }\n\n    this.stack.push(node);\n\n    if (this.order === 'post') {\n      this.children(node, visitor);\n      visitor(node, this);\n    } else {\n      visitor(node, this);\n      this.children(node, visitor);\n    }\n\n    this.stack.pop();\n  }\n\n  children<N extends ASTv1.Node>(\n    node: N & ASTv1.Node,\n    callback: NodeCallback<N & ASTv1.Node>\n  ): void {\n    switch (node.type) {\n      case 'Block':\n      case 'Template':\n        return visitors.Program(this, node as unknown as ASTv1.Program, callback);\n      case 'ElementNode':\n        return visitors.ElementNode(this, node, callback);\n      case 'BlockStatement':\n        return visitors.BlockStatement(this, node, callback);\n      default:\n        return;\n    }\n  }\n}\n\nconst visitors = {\n  Program(walker: Walker, node: ASTv1.Program, callback: NodeCallback<ASTv1.Statement>) {\n    walkBody(walker, node.body, callback);\n  },\n\n  Template(walker: Walker, node: ASTv1.Template, callback: NodeCallback<ASTv1.Node>) {\n    walkBody(walker, node.body, callback);\n  },\n\n  Block(walker: Walker, node: ASTv1.Block, callback: NodeCallback<ASTv1.Node>) {\n    walkBody(walker, node.body, callback);\n  },\n\n  ElementNode(walker: Walker, node: ASTv1.ElementNode, callback: NodeCallback<ASTv1.Node>) {\n    walkBody(walker, node.children, callback);\n  },\n\n  BlockStatement(walker: Walker, node: ASTv1.BlockStatement, callback: NodeCallback<ASTv1.Block>) {\n    walker.visit(node.program, callback);\n    walker.visit(node.inverse || null, callback);\n  },\n} as const;\n\nfunction walkBody(\n  walker: Walker,\n  body: ASTv1.Statement[],\n  callback: NodeCallback<ASTv1.Statement>\n) {\n  for (const child of body) {\n    walker.visit(child, callback);\n  }\n}\n","import type { Nullable } from '@glimmer/interfaces';\nimport { expect, unwrap } from '@glimmer/util';\n\nimport { generateSyntaxError } from './syntax-error';\nimport type * as ASTv1 from './v1/api';\nimport type * as HBS from './v1/handlebars-ast';\n\n// Regex to validate the identifier for block parameters.\n// Based on the ID validation regex in Handlebars.\n\nlet ID_INVERSE_PATTERN = /[!\"#%&'()*+./;<=>@[\\\\\\]^`{|}~]/u;\n\n// Checks the element's attributes to see if it uses block params.\n// If it does, registers the block params with the program and\n// removes the corresponding attributes from the element.\n\nexport function parseElementBlockParams(element: ASTv1.ElementNode): void {\n  let params = parseBlockParams(element);\n  if (params) element.blockParams = params;\n}\n\nfunction parseBlockParams(element: ASTv1.ElementNode): Nullable<string[]> {\n  let l = element.attributes.length;\n  let attrNames = [];\n\n  for (let i = 0; i < l; i++) {\n    attrNames.push(unwrap(element.attributes[i]).name);\n  }\n\n  let asIndex = attrNames.indexOf('as');\n\n  if (\n    asIndex === -1 &&\n    attrNames.length > 0 &&\n    unwrap(attrNames[attrNames.length - 1]).charAt(0) === '|'\n  ) {\n    throw generateSyntaxError(\n      'Block parameters must be preceded by the `as` keyword, detected block parameters without `as`',\n      element.loc\n    );\n  }\n\n  if (asIndex !== -1 && l > asIndex && unwrap(attrNames[asIndex + 1]).charAt(0) === '|') {\n    // Some basic validation, since we're doing the parsing ourselves\n    let paramsString = attrNames.slice(asIndex).join(' ');\n    if (\n      paramsString.charAt(paramsString.length - 1) !== '|' ||\n      expect(paramsString.match(/\\|/gu), `block params must exist here`).length !== 2\n    ) {\n      throw generateSyntaxError(\n        \"Invalid block parameters syntax, '\" + paramsString + \"'\",\n        element.loc\n      );\n    }\n\n    let params = [];\n    for (let i = asIndex + 1; i < l; i++) {\n      let param = unwrap(attrNames[i]).replace(/\\|/gu, '');\n      if (param !== '') {\n        if (ID_INVERSE_PATTERN.test(param)) {\n          throw generateSyntaxError(\n            \"Invalid identifier for block parameters, '\" + param + \"'\",\n            element.loc\n          );\n        }\n        params.push(param);\n      }\n    }\n\n    if (params.length === 0) {\n      throw generateSyntaxError('Cannot use zero block parameters', element.loc);\n    }\n\n    element.attributes = element.attributes.slice(0, asIndex);\n    return params;\n  }\n\n  return null;\n}\n\nexport function childrenFor(\n  node: ASTv1.Block | ASTv1.Template | ASTv1.ElementNode\n): ASTv1.TopLevelStatement[] {\n  switch (node.type) {\n    case 'Block':\n    case 'Template':\n      return node.body;\n    case 'ElementNode':\n      return node.children;\n  }\n}\n\nexport function appendChild(\n  parent: ASTv1.Block | ASTv1.Template | ASTv1.ElementNode,\n  node: ASTv1.Statement\n): void {\n  childrenFor(parent).push(node);\n}\n\nexport function isHBSLiteral(path: HBS.Expression): path is HBS.Literal;\nexport function isHBSLiteral(path: ASTv1.Expression): path is ASTv1.Literal;\nexport function isHBSLiteral(\n  path: HBS.Expression | ASTv1.Expression\n): path is HBS.Literal | ASTv1.Literal {\n  return (\n    path.type === 'StringLiteral' ||\n    path.type === 'BooleanLiteral' ||\n    path.type === 'NumberLiteral' ||\n    path.type === 'NullLiteral' ||\n    path.type === 'UndefinedLiteral'\n  );\n}\n\nexport function printLiteral(literal: ASTv1.Literal): string {\n  if (literal.type === 'UndefinedLiteral') {\n    return 'undefined';\n  } else {\n    return JSON.stringify(literal.value);\n  }\n}\n\nexport function isUpperCase(tag: string): boolean {\n  return tag[0] === tag[0]?.toUpperCase() && tag[0] !== tag[0]?.toLowerCase();\n}\n\nexport function isLowerCase(tag: string): boolean {\n  return tag[0] === tag[0]?.toLowerCase() && tag[0] !== tag[0]?.toUpperCase();\n}\n","import type { Dict, Nullable } from '@glimmer/interfaces';\nimport { LOCAL_DEBUG } from '@glimmer/local-debug-flags';\nimport { asPresentArray, assert, assign, deprecate, isPresentArray } from '@glimmer/util';\n\nimport { type SourceLocation, type SourcePosition, SYNTHETIC_LOCATION } from '../source/location';\nimport { Source } from '../source/source';\nimport { SourceSpan } from '../source/span';\nimport type * as ASTv1 from './api';\nimport { PathExpressionImplV1 } from './legacy-interop';\n\nlet _SOURCE: Source | undefined;\n\nfunction SOURCE(): Source {\n  if (!_SOURCE) {\n    _SOURCE = new Source('', '(synthetic)');\n  }\n\n  return _SOURCE;\n}\n\n// const SOURCE = new Source('', '(tests)');\n\n// Statements\n\nexport type BuilderHead = string | ASTv1.Expression;\nexport type TagDescriptor = string | { name: string; selfClosing: boolean };\n\nfunction buildMustache(\n  path: BuilderHead | ASTv1.Literal,\n  params?: ASTv1.Expression[],\n  hash?: ASTv1.Hash,\n  raw?: boolean,\n  loc?: SourceLocation,\n  strip?: ASTv1.StripFlags\n): ASTv1.MustacheStatement {\n  if (typeof path === 'string') {\n    path = buildPath(path);\n  }\n\n  return {\n    type: 'MustacheStatement',\n    path,\n    params: params || [],\n    hash: hash || buildHash([]),\n    escaped: !raw,\n    trusting: !!raw,\n    loc: buildLoc(loc || null),\n    strip: strip || { open: false, close: false },\n  };\n}\n\nfunction buildBlock(\n  path: BuilderHead,\n  params: Nullable<ASTv1.Expression[]>,\n  hash: Nullable<ASTv1.Hash>,\n  _defaultBlock: ASTv1.PossiblyDeprecatedBlock,\n  _elseBlock?: Nullable<ASTv1.PossiblyDeprecatedBlock>,\n  loc?: SourceLocation,\n  openStrip?: ASTv1.StripFlags,\n  inverseStrip?: ASTv1.StripFlags,\n  closeStrip?: ASTv1.StripFlags\n): ASTv1.BlockStatement {\n  let defaultBlock: ASTv1.Block;\n  let elseBlock: Nullable<ASTv1.Block> | undefined;\n\n  if (_defaultBlock.type === 'Template') {\n    if (LOCAL_DEBUG) {\n      deprecate(`b.program is deprecated. Use b.blockItself instead.`);\n    }\n\n    defaultBlock = assign({}, _defaultBlock, { type: 'Block' }) as unknown as ASTv1.Block;\n  } else {\n    defaultBlock = _defaultBlock;\n  }\n\n  if (_elseBlock !== undefined && _elseBlock !== null && _elseBlock.type === 'Template') {\n    if (LOCAL_DEBUG) {\n      deprecate(`b.program is deprecated. Use b.blockItself instead.`);\n    }\n\n    elseBlock = assign({}, _elseBlock, { type: 'Block' }) as unknown as ASTv1.Block;\n  } else {\n    elseBlock = _elseBlock;\n  }\n\n  return {\n    type: 'BlockStatement',\n    path: buildPath(path),\n    params: params || [],\n    hash: hash || buildHash([]),\n    program: defaultBlock || null,\n    inverse: elseBlock || null,\n    loc: buildLoc(loc || null),\n    openStrip: openStrip || { open: false, close: false },\n    inverseStrip: inverseStrip || { open: false, close: false },\n    closeStrip: closeStrip || { open: false, close: false },\n  };\n}\n\nfunction buildElementModifier(\n  path: BuilderHead | ASTv1.Expression,\n  params?: ASTv1.Expression[],\n  hash?: ASTv1.Hash,\n  loc?: Nullable<SourceLocation>\n): ASTv1.ElementModifierStatement {\n  return {\n    type: 'ElementModifierStatement',\n    path: buildPath(path),\n    params: params || [],\n    hash: hash || buildHash([]),\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildPartial(\n  name: ASTv1.PathExpression,\n  params?: ASTv1.Expression[],\n  hash?: ASTv1.Hash,\n  indent?: string,\n  loc?: SourceLocation\n): ASTv1.PartialStatement {\n  return {\n    type: 'PartialStatement',\n    name: name,\n    params: params || [],\n    hash: hash || buildHash([]),\n    indent: indent || '',\n    strip: { open: false, close: false },\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildComment(value: string, loc?: SourceLocation): ASTv1.CommentStatement {\n  return {\n    type: 'CommentStatement',\n    value: value,\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildMustacheComment(value: string, loc?: SourceLocation): ASTv1.MustacheCommentStatement {\n  return {\n    type: 'MustacheCommentStatement',\n    value: value,\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildConcat(\n  parts: (ASTv1.TextNode | ASTv1.MustacheStatement)[],\n  loc?: SourceLocation\n): ASTv1.ConcatStatement {\n  if (!isPresentArray(parts)) {\n    throw new Error(`b.concat requires at least one part`);\n  }\n\n  return {\n    type: 'ConcatStatement',\n    parts: parts || [],\n    loc: buildLoc(loc || null),\n  };\n}\n\n// Nodes\n\nexport type ElementParts =\n  | ['attrs', ...AttrSexp[]]\n  | ['modifiers', ...ModifierSexp[]]\n  | ['body', ...ASTv1.Statement[]]\n  | ['comments', ...ElementComment[]]\n  | ['as', ...string[]]\n  | ['loc', SourceLocation];\n\nexport type PathSexp = string | ['path', string, LocSexp?];\n\nexport type ModifierSexp =\n  | string\n  | [PathSexp, LocSexp?]\n  | [PathSexp, ASTv1.Expression[], LocSexp?]\n  | [PathSexp, ASTv1.Expression[], Dict<ASTv1.Expression>, LocSexp?];\n\nexport type AttrSexp = [string, ASTv1.AttrNode['value'] | string, LocSexp?];\n\nexport type LocSexp = ['loc', SourceLocation];\n\nexport type ElementComment = ASTv1.MustacheCommentStatement | SourceLocation | string;\n\nexport type SexpValue =\n  | string\n  | ASTv1.Expression[]\n  | Dict<ASTv1.Expression>\n  | LocSexp\n  | PathSexp\n  | undefined;\n\nexport interface BuildElementOptions {\n  attrs?: ASTv1.AttrNode[];\n  modifiers?: ASTv1.ElementModifierStatement[];\n  children?: ASTv1.Statement[];\n  comments?: ElementComment[];\n  blockParams?: string[];\n  loc?: SourceSpan;\n}\n\nfunction buildElement(tag: TagDescriptor, options: BuildElementOptions = {}): ASTv1.ElementNode {\n  let { attrs, blockParams, modifiers, comments, children, loc } = options;\n\n  let tagName: string;\n\n  // this is used for backwards compat, prior to `selfClosing` being part of the ElementNode AST\n  let selfClosing = false;\n  if (typeof tag === 'object') {\n    selfClosing = tag.selfClosing;\n    tagName = tag.name;\n  } else if (tag.slice(-1) === '/') {\n    tagName = tag.slice(0, -1);\n    selfClosing = true;\n  } else {\n    tagName = tag;\n  }\n\n  return {\n    type: 'ElementNode',\n    tag: tagName,\n    selfClosing: selfClosing,\n    attributes: attrs || [],\n    blockParams: blockParams || [],\n    modifiers: modifiers || [],\n    comments: (comments as ASTv1.MustacheCommentStatement[]) || [],\n    children: children || [],\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildAttr(\n  name: string,\n  value: ASTv1.AttrNode['value'],\n  loc?: SourceLocation\n): ASTv1.AttrNode {\n  return {\n    type: 'AttrNode',\n    name: name,\n    value: value,\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildText(chars?: string, loc?: SourceLocation): ASTv1.TextNode {\n  return {\n    type: 'TextNode',\n    chars: chars || '',\n    loc: buildLoc(loc || null),\n  };\n}\n\n// Expressions\n\nfunction buildSexpr(\n  path: BuilderHead,\n  params?: ASTv1.Expression[],\n  hash?: ASTv1.Hash,\n  loc?: SourceLocation\n): ASTv1.SubExpression {\n  return {\n    type: 'SubExpression',\n    path: buildPath(path),\n    params: params || [],\n    hash: hash || buildHash([]),\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction headToString(head: ASTv1.PathHead): { original: string; parts: string[] } {\n  switch (head.type) {\n    case 'AtHead':\n      return { original: head.name, parts: [head.name] };\n    case 'ThisHead':\n      return { original: `this`, parts: [] };\n    case 'VarHead':\n      return { original: head.name, parts: [head.name] };\n  }\n}\n\nfunction buildHead(\n  original: string,\n  loc: SourceLocation\n): { head: ASTv1.PathHead; tail: string[] } {\n  let [head, ...tail] = asPresentArray(original.split('.'));\n  let headNode: ASTv1.PathHead;\n\n  if (head === 'this') {\n    headNode = {\n      type: 'ThisHead',\n      loc: buildLoc(loc || null),\n    };\n  } else if (head[0] === '@') {\n    headNode = {\n      type: 'AtHead',\n      name: head,\n      loc: buildLoc(loc || null),\n    };\n  } else {\n    headNode = {\n      type: 'VarHead',\n      name: head,\n      loc: buildLoc(loc || null),\n    };\n  }\n\n  return {\n    head: headNode,\n    tail,\n  };\n}\n\nfunction buildThis(loc: SourceLocation): ASTv1.PathHead {\n  return {\n    type: 'ThisHead',\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildAtName(name: string, loc: SourceLocation): ASTv1.PathHead {\n  // the `@` should be included so we have a complete source range\n  assert(name[0] === '@', `call builders.at() with a string that starts with '@'`);\n\n  return {\n    type: 'AtHead',\n    name,\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildVar(name: string, loc: SourceLocation): ASTv1.PathHead {\n  assert(name !== 'this', `You called builders.var() with 'this'. Call builders.this instead`);\n  assert(\n    name[0] !== '@',\n    `You called builders.var() with '${name}'. Call builders.at('${name}') instead`\n  );\n\n  return {\n    type: 'VarHead',\n    name,\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildHeadFromString(head: string, loc: SourceLocation): ASTv1.PathHead {\n  if (head[0] === '@') {\n    return buildAtName(head, loc);\n  } else if (head === 'this') {\n    return buildThis(loc);\n  } else {\n    return buildVar(head, loc);\n  }\n}\n\nfunction buildNamedBlockName(name: string, loc?: SourceLocation): ASTv1.NamedBlockName {\n  return {\n    type: 'NamedBlockName',\n    name,\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildCleanPath(\n  head: ASTv1.PathHead,\n  tail: string[],\n  loc: SourceLocation\n): ASTv1.PathExpression {\n  let { original: originalHead, parts: headParts } = headToString(head);\n  let parts = [...headParts, ...tail];\n  let original = [...originalHead, ...parts].join('.');\n\n  return new PathExpressionImplV1(original, head, tail, buildLoc(loc || null));\n}\n\nfunction buildPath(\n  path: ASTv1.PathExpression | string | { head: string; tail: string[] },\n  loc?: SourceLocation\n): ASTv1.PathExpression;\nfunction buildPath(path: ASTv1.Expression, loc?: SourceLocation): ASTv1.Expression;\nfunction buildPath(path: BuilderHead | ASTv1.Expression, loc?: SourceLocation): ASTv1.Expression;\nfunction buildPath(\n  path: BuilderHead | ASTv1.Expression | { head: string; tail: string[] },\n  loc?: SourceLocation\n): ASTv1.Expression {\n  if (typeof path !== 'string') {\n    if ('type' in path) {\n      return path;\n    } else {\n      let { head, tail } = buildHead(path.head, SourceSpan.broken());\n\n      assert(\n        tail.length === 0,\n        `builder.path({ head, tail }) should not be called with a head with dots in it`\n      );\n\n      let { original: originalHead } = headToString(head);\n\n      return new PathExpressionImplV1(\n        [originalHead, ...tail].join('.'),\n        head,\n        tail,\n        buildLoc(loc || null)\n      );\n    }\n  }\n\n  let { head, tail } = buildHead(path, SourceSpan.broken());\n\n  return new PathExpressionImplV1(path, head, tail, buildLoc(loc || null));\n}\n\nfunction buildLiteral<T extends ASTv1.Literal>(\n  type: T['type'],\n  value: T['value'],\n  loc?: SourceLocation\n): T {\n  return {\n    type,\n    value,\n    original: value,\n    loc: buildLoc(loc || null),\n  } as T;\n}\n\n// Miscellaneous\n\nfunction buildHash(pairs?: ASTv1.HashPair[], loc?: SourceLocation): ASTv1.Hash {\n  return {\n    type: 'Hash',\n    pairs: pairs || [],\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildPair(key: string, value: ASTv1.Expression, loc?: SourceLocation): ASTv1.HashPair {\n  return {\n    type: 'HashPair',\n    key: key,\n    value,\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildProgram(\n  body?: ASTv1.Statement[],\n  blockParams?: string[],\n  loc?: SourceLocation\n): ASTv1.Template {\n  return {\n    type: 'Template',\n    body: body || [],\n    blockParams: blockParams || [],\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildBlockItself(\n  body?: ASTv1.Statement[],\n  blockParams?: string[],\n  chained = false,\n  loc?: SourceLocation\n): ASTv1.Block {\n  return {\n    type: 'Block',\n    body: body || [],\n    blockParams: blockParams || [],\n    chained,\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildTemplate(\n  body?: ASTv1.Statement[],\n  blockParams?: string[],\n  loc?: SourceLocation\n): ASTv1.Template {\n  return {\n    type: 'Template',\n    body: body || [],\n    blockParams: blockParams || [],\n    loc: buildLoc(loc || null),\n  };\n}\n\nfunction buildPosition(line: number, column: number): SourcePosition {\n  return {\n    line,\n    column,\n  };\n}\n\nfunction buildLoc(loc: Nullable<SourceLocation>): SourceSpan;\nfunction buildLoc(\n  startLine: number,\n  startColumn: number,\n  endLine?: number,\n  endColumn?: number,\n  source?: string\n): SourceSpan;\n\nfunction buildLoc(...args: any[]): SourceSpan {\n  if (args.length === 1) {\n    let loc = args[0];\n\n    if (loc && typeof loc === 'object') {\n      return SourceSpan.forHbsLoc(SOURCE(), loc);\n    } else {\n      return SourceSpan.forHbsLoc(SOURCE(), SYNTHETIC_LOCATION);\n    }\n  } else {\n    let [startLine, startColumn, endLine, endColumn, _source] = args;\n    let source = _source ? new Source('', _source) : SOURCE();\n\n    return SourceSpan.forHbsLoc(source, {\n      start: {\n        line: startLine,\n        column: startColumn,\n      },\n      end: {\n        line: endLine,\n        column: endColumn,\n      },\n    });\n  }\n}\n\nexport default {\n  mustache: buildMustache,\n  block: buildBlock,\n  partial: buildPartial,\n  comment: buildComment,\n  mustacheComment: buildMustacheComment,\n  element: buildElement,\n  elementModifier: buildElementModifier,\n  attr: buildAttr,\n  text: buildText,\n  sexpr: buildSexpr,\n\n  concat: buildConcat,\n  hash: buildHash,\n  pair: buildPair,\n  literal: buildLiteral,\n  program: buildProgram,\n  blockItself: buildBlockItself,\n  template: buildTemplate,\n  loc: buildLoc,\n  pos: buildPosition,\n\n  path: buildPath,\n\n  fullPath: buildCleanPath,\n  head: buildHeadFromString,\n  at: buildAtName,\n  var: buildVar,\n  this: buildThis,\n  blockName: buildNamedBlockName,\n\n  string: literal('StringLiteral') as (value: string) => ASTv1.StringLiteral,\n  boolean: literal('BooleanLiteral') as (value: boolean) => ASTv1.BooleanLiteral,\n  number: literal('NumberLiteral') as (value: number) => ASTv1.NumberLiteral,\n  undefined(): ASTv1.UndefinedLiteral {\n    return buildLiteral('UndefinedLiteral', undefined);\n  },\n  null(): ASTv1.NullLiteral {\n    return buildLiteral('NullLiteral', null);\n  },\n};\n\ntype BuildLiteral<T extends ASTv1.Literal> = (value: T['value']) => T;\n\nfunction literal<T extends ASTv1.Literal>(type: T['type']): BuildLiteral<T> {\n  return function (value: T['value'], loc?: SourceLocation): T {\n    return buildLiteral(type, value, loc);\n  };\n}\n","import { asPresentArray, assertPresentArray, getFirst } from '@glimmer/util';\n\nimport type { SourceSpan } from '../source/span';\nimport type { PathExpression, PathHead } from './nodes-v1';\nimport b from './public-builders';\n\nexport class PathExpressionImplV1 implements PathExpression {\n  type = 'PathExpression' as const;\n  public parts: string[];\n  public this = false;\n  public data = false;\n\n  constructor(public original: string, head: PathHead, tail: string[], public loc: SourceSpan) {\n    let parts = tail.slice();\n\n    if (head.type === 'ThisHead') {\n      this.this = true;\n    } else if (head.type === 'AtHead') {\n      this.data = true;\n      parts.unshift(head.name.slice(1));\n    } else {\n      parts.unshift(head.name);\n    }\n\n    this.parts = parts;\n  }\n\n  // Cache for the head value.\n  _head?: PathHead = undefined;\n\n  get head(): PathHead {\n    if (this._head) {\n      return this._head;\n    }\n\n    let firstPart: string;\n\n    if (this.this) {\n      firstPart = 'this';\n    } else if (this.data) {\n      firstPart = `@${getFirst(asPresentArray(this.parts))}`;\n    } else {\n      assertPresentArray(this.parts);\n      firstPart = getFirst(this.parts);\n    }\n\n    let firstPartLoc = this.loc.collapse('start').sliceStartChars({\n      chars: firstPart.length,\n    }).loc;\n\n    return (this._head = b.head(firstPart, firstPartLoc));\n  }\n\n  get tail(): string[] {\n    return this.this ? this.parts : this.parts.slice(1);\n  }\n}\n","import type { Dict, Nullable, PresentArray } from '@glimmer/interfaces';\nimport { assert } from '@glimmer/util';\n\nimport type { ParserNodeBuilder } from '../parser';\nimport type { SourceLocation } from '../source/location';\nimport type { SourceOffset, SourceSpan } from '../source/span';\nimport type * as ASTv1 from './api';\nimport { PathExpressionImplV1 } from './legacy-interop';\n\nconst DEFAULT_STRIP = {\n  close: false,\n  open: false,\n};\n\n/**\n * The Parser Builder differentiates from the public builder API by:\n *\n * 1. Offering fewer different ways to instantiate nodes\n * 2. Mandating source locations\n */\nclass Builders {\n  pos(line: number, column: number) {\n    return {\n      line,\n      column,\n    };\n  }\n\n  blockItself({\n    body = [],\n    blockParams = [],\n    chained = false,\n    loc,\n  }: {\n    body?: ASTv1.Statement[] | undefined;\n    blockParams?: string[] | undefined;\n    chained?: boolean | undefined;\n    loc: SourceSpan;\n  }): ASTv1.Block {\n    return {\n      type: 'Block',\n      body: body,\n      blockParams: blockParams,\n      chained,\n      loc,\n    };\n  }\n\n  template({\n    body,\n    blockParams,\n    loc,\n  }: {\n    body?: ASTv1.Statement[];\n    blockParams?: string[];\n    loc: SourceSpan;\n  }): ASTv1.Template {\n    return {\n      type: 'Template',\n      body: body || [],\n      blockParams: blockParams || [],\n      loc,\n    };\n  }\n\n  mustache({\n    path,\n    params,\n    hash,\n    trusting,\n    loc,\n    strip = DEFAULT_STRIP,\n  }: {\n    path: ASTv1.Expression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    trusting: boolean;\n    loc: SourceSpan;\n    strip: ASTv1.StripFlags;\n  }): ASTv1.MustacheStatement {\n    return {\n      type: 'MustacheStatement',\n      path,\n      params,\n      hash,\n      escaped: !trusting,\n      trusting,\n      loc,\n      strip: strip || { open: false, close: false },\n    };\n  }\n\n  block({\n    path,\n    params,\n    hash,\n    defaultBlock,\n    elseBlock = null,\n    loc,\n    openStrip = DEFAULT_STRIP,\n    inverseStrip = DEFAULT_STRIP,\n    closeStrip = DEFAULT_STRIP,\n  }: {\n    path: ASTv1.PathExpression | ASTv1.SubExpression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    defaultBlock: ASTv1.Block;\n    elseBlock?: Nullable<ASTv1.Block>;\n    loc: SourceSpan;\n    openStrip: ASTv1.StripFlags;\n    inverseStrip: ASTv1.StripFlags;\n    closeStrip: ASTv1.StripFlags;\n  }): ASTv1.BlockStatement {\n    return {\n      type: 'BlockStatement',\n      path: path,\n      params,\n      hash,\n      program: defaultBlock,\n      inverse: elseBlock,\n      loc: loc,\n      openStrip: openStrip,\n      inverseStrip: inverseStrip,\n      closeStrip: closeStrip,\n    };\n  }\n\n  comment(value: string, loc: SourceOffset): ParserNodeBuilder<ASTv1.CommentStatement> {\n    return {\n      type: 'CommentStatement',\n      value: value,\n      loc,\n    };\n  }\n\n  mustacheComment(value: string, loc: SourceSpan): ASTv1.MustacheCommentStatement {\n    return {\n      type: 'MustacheCommentStatement',\n      value: value,\n      loc,\n    };\n  }\n\n  concat(\n    parts: PresentArray<ASTv1.TextNode | ASTv1.MustacheStatement>,\n    loc: SourceSpan\n  ): ASTv1.ConcatStatement {\n    return {\n      type: 'ConcatStatement',\n      parts,\n      loc,\n    };\n  }\n\n  element({\n    tag,\n    selfClosing,\n    attrs,\n    blockParams,\n    modifiers,\n    comments,\n    children,\n    loc,\n  }: BuildElementOptions): ASTv1.ElementNode {\n    return {\n      type: 'ElementNode',\n      tag,\n      selfClosing: selfClosing,\n      attributes: attrs || [],\n      blockParams: blockParams || [],\n      modifiers: modifiers || [],\n      comments: (comments as ASTv1.MustacheCommentStatement[]) || [],\n      children: children || [],\n      loc,\n    };\n  }\n\n  elementModifier({\n    path,\n    params,\n    hash,\n    loc,\n  }: {\n    path: ASTv1.PathExpression | ASTv1.SubExpression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    loc: SourceSpan;\n  }): ASTv1.ElementModifierStatement {\n    return {\n      type: 'ElementModifierStatement',\n      path,\n      params,\n      hash,\n      loc,\n    };\n  }\n\n  attr({\n    name,\n    value,\n    loc,\n  }: {\n    name: string;\n    value: ASTv1.AttrNode['value'];\n    loc: SourceSpan;\n  }): ASTv1.AttrNode {\n    return {\n      type: 'AttrNode',\n      name: name,\n      value: value,\n      loc,\n    };\n  }\n\n  text({ chars, loc }: { chars: string; loc: SourceSpan }): ASTv1.TextNode {\n    return {\n      type: 'TextNode',\n      chars,\n      loc,\n    };\n  }\n\n  sexpr({\n    path,\n    params,\n    hash,\n    loc,\n  }: {\n    path: ASTv1.PathExpression | ASTv1.SubExpression;\n    params: ASTv1.Expression[];\n    hash: ASTv1.Hash;\n    loc: SourceSpan;\n  }): ASTv1.SubExpression {\n    return {\n      type: 'SubExpression',\n      path,\n      params,\n      hash,\n      loc,\n    };\n  }\n\n  path({\n    head,\n    tail,\n    loc,\n  }: {\n    head: ASTv1.PathHead;\n    tail: string[];\n    loc: SourceSpan;\n  }): ASTv1.PathExpression {\n    let { original: originalHead } = headToString(head);\n    let original = [...originalHead, ...tail].join('.');\n\n    return new PathExpressionImplV1(original, head, tail, loc);\n  }\n\n  head(head: string, loc: SourceSpan): ASTv1.PathHead {\n    if (head[0] === '@') {\n      return this.atName(head, loc);\n    } else if (head === 'this') {\n      return this.this(loc);\n    } else {\n      return this.var(head, loc);\n    }\n  }\n\n  this(loc: SourceSpan): ASTv1.PathHead {\n    return {\n      type: 'ThisHead',\n      loc,\n    };\n  }\n\n  atName(name: string, loc: SourceSpan): ASTv1.PathHead {\n    // the `@` should be included so we have a complete source range\n    assert(name[0] === '@', `call builders.at() with a string that starts with '@'`);\n\n    return {\n      type: 'AtHead',\n      name,\n      loc,\n    };\n  }\n\n  var(name: string, loc: SourceSpan): ASTv1.PathHead {\n    assert(name !== 'this', `You called builders.var() with 'this'. Call builders.this instead`);\n    assert(\n      name[0] !== '@',\n      `You called builders.var() with '${name}'. Call builders.at('${name}') instead`\n    );\n\n    return {\n      type: 'VarHead',\n      name,\n      loc,\n    };\n  }\n\n  hash(pairs: ASTv1.HashPair[], loc: SourceSpan): ASTv1.Hash {\n    return {\n      type: 'Hash',\n      pairs: pairs || [],\n      loc,\n    };\n  }\n\n  pair({\n    key,\n    value,\n    loc,\n  }: {\n    key: string;\n    value: ASTv1.Expression;\n    loc: SourceSpan;\n  }): ASTv1.HashPair {\n    return {\n      type: 'HashPair',\n      key: key,\n      value,\n      loc,\n    };\n  }\n\n  literal<T extends ASTv1.Literal>({\n    type,\n    value,\n    loc,\n  }: {\n    type: T['type'];\n    value: T['value'];\n    loc?: SourceLocation;\n  }): T {\n    return {\n      type,\n      value,\n      original: value,\n      loc,\n    } as T;\n  }\n\n  undefined(): ASTv1.UndefinedLiteral {\n    return this.literal({ type: 'UndefinedLiteral', value: undefined });\n  }\n\n  null(): ASTv1.NullLiteral {\n    return this.literal({ type: 'NullLiteral', value: null });\n  }\n\n  string(value: string, loc: SourceSpan): ASTv1.StringLiteral {\n    return this.literal({ type: 'StringLiteral', value, loc });\n  }\n\n  boolean(value: boolean, loc: SourceSpan): ASTv1.BooleanLiteral {\n    return this.literal({ type: 'BooleanLiteral', value, loc });\n  }\n\n  number(value: number, loc: SourceSpan): ASTv1.NumberLiteral {\n    return this.literal({ type: 'NumberLiteral', value, loc });\n  }\n}\n\n// Nodes\n\nexport type ElementParts =\n  | ['attrs', ...AttrSexp[]]\n  | ['modifiers', ...ModifierSexp[]]\n  | ['body', ...ASTv1.Statement[]]\n  | ['comments', ...ElementComment[]]\n  | ['as', ...string[]]\n  | ['loc', SourceLocation];\n\nexport type PathSexp = string | ['path', string, LocSexp?];\n\nexport type ModifierSexp =\n  | string\n  | [PathSexp, LocSexp?]\n  | [PathSexp, ASTv1.Expression[], LocSexp?]\n  | [PathSexp, ASTv1.Expression[], Dict<ASTv1.Expression>, LocSexp?];\n\nexport type AttrSexp = [string, ASTv1.AttrNode['value'] | string, LocSexp?];\n\nexport type LocSexp = ['loc', SourceLocation];\n\nexport type ElementComment = ASTv1.MustacheCommentStatement | SourceLocation | string;\n\nexport type SexpValue =\n  | string\n  | ASTv1.Expression[]\n  | Dict<ASTv1.Expression>\n  | LocSexp\n  | PathSexp\n  | undefined;\n\nexport interface BuildElementOptions {\n  tag: string;\n  selfClosing: boolean;\n  attrs: ASTv1.AttrNode[];\n  modifiers: ASTv1.ElementModifierStatement[];\n  children: ASTv1.Statement[];\n  comments: ElementComment[];\n  blockParams: string[];\n  loc: SourceSpan;\n}\n\n// Expressions\n\nfunction headToString(head: ASTv1.PathHead): { original: string; parts: string[] } {\n  switch (head.type) {\n    case 'AtHead':\n      return { original: head.name, parts: [head.name] };\n    case 'ThisHead':\n      return { original: `this`, parts: [] };\n    case 'VarHead':\n      return { original: head.name, parts: [head.name] };\n  }\n}\n\nexport default new Builders();\n","import type { Nullable } from '@glimmer/interfaces';\nimport { asPresentArray, assert, assign, expect, getLast, unwrap } from '@glimmer/util';\nimport {\n  EntityParser,\n  EventedTokenizer,\n  HTML5NamedCharRefs as namedCharRefs,\n} from 'simple-html-tokenizer';\n\nimport type * as src from './source/api';\nimport type * as ASTv1 from './v1/api';\nimport type * as HBS from './v1/handlebars-ast';\n\nexport type ParserNodeBuilder<N extends { loc: src.SourceSpan }> = Omit<N, 'loc'> & {\n  loc: src.SourceOffset;\n};\n\nexport interface Tag<T extends 'StartTag' | 'EndTag'> {\n  readonly type: T;\n  name: string;\n  readonly attributes: ASTv1.AttrNode[];\n  readonly modifiers: ASTv1.ElementModifierStatement[];\n  readonly comments: ASTv1.MustacheCommentStatement[];\n  selfClosing: boolean;\n  readonly loc: src.SourceSpan;\n}\n\nexport interface Attribute {\n  name: string;\n  currentPart: ASTv1.TextNode | null;\n  parts: (ASTv1.MustacheStatement | ASTv1.TextNode)[];\n  isQuoted: boolean;\n  isDynamic: boolean;\n  start: src.SourceOffset;\n  valueSpan: src.SourceSpan;\n}\n\nexport abstract class Parser {\n  protected elementStack: ASTv1.ParentNode[] = [];\n  private lines: string[];\n  readonly source: src.Source;\n  public currentAttribute: Nullable<Attribute> = null;\n  public currentNode: Nullable<\n    Readonly<\n      | ParserNodeBuilder<ASTv1.CommentStatement>\n      | ASTv1.TextNode\n      | ParserNodeBuilder<Tag<'StartTag'>>\n      | ParserNodeBuilder<Tag<'EndTag'>>\n    >\n  > = null;\n  public tokenizer: EventedTokenizer;\n\n  constructor(\n    source: src.Source,\n    entityParser = new EntityParser(namedCharRefs),\n    mode: 'precompile' | 'codemod' = 'precompile'\n  ) {\n    this.source = source;\n    this.lines = source.source.split(/\\r\\n?|\\n/u);\n    this.tokenizer = new EventedTokenizer(this, entityParser, mode);\n  }\n\n  offset(): src.SourceOffset {\n    let { line, column } = this.tokenizer;\n    return this.source.offsetFor(line, column);\n  }\n\n  pos({ line, column }: src.SourcePosition): src.SourceOffset {\n    return this.source.offsetFor(line, column);\n  }\n\n  finish<T extends { loc: src.SourceSpan }>(node: ParserNodeBuilder<T>): T {\n    return assign({}, node, {\n      loc: node.loc.until(this.offset()),\n    } as const) as unknown as T;\n\n    // node.loc = node.loc.withEnd(end);\n  }\n\n  abstract Program(node: HBS.Program): HBS.Output<'Program'>;\n  abstract MustacheStatement(node: HBS.MustacheStatement): HBS.Output<'MustacheStatement'>;\n  abstract Decorator(node: HBS.Decorator): HBS.Output<'Decorator'>;\n  abstract BlockStatement(node: HBS.BlockStatement): HBS.Output<'BlockStatement'>;\n  abstract DecoratorBlock(node: HBS.DecoratorBlock): HBS.Output<'DecoratorBlock'>;\n  abstract PartialStatement(node: HBS.PartialStatement): HBS.Output<'PartialStatement'>;\n  abstract PartialBlockStatement(\n    node: HBS.PartialBlockStatement\n  ): HBS.Output<'PartialBlockStatement'>;\n  abstract ContentStatement(node: HBS.ContentStatement): HBS.Output<'ContentStatement'>;\n  abstract CommentStatement(node: HBS.CommentStatement): HBS.Output<'CommentStatement'>;\n  abstract SubExpression(node: HBS.SubExpression): HBS.Output<'SubExpression'>;\n  abstract PathExpression(node: HBS.PathExpression): HBS.Output<'PathExpression'>;\n  abstract StringLiteral(node: HBS.StringLiteral): HBS.Output<'StringLiteral'>;\n  abstract BooleanLiteral(node: HBS.BooleanLiteral): HBS.Output<'BooleanLiteral'>;\n  abstract NumberLiteral(node: HBS.NumberLiteral): HBS.Output<'NumberLiteral'>;\n  abstract UndefinedLiteral(node: HBS.UndefinedLiteral): HBS.Output<'UndefinedLiteral'>;\n  abstract NullLiteral(node: HBS.NullLiteral): HBS.Output<'NullLiteral'>;\n\n  abstract reset(): void;\n  abstract finishData(): void;\n  abstract tagOpen(): void;\n  abstract beginData(): void;\n  abstract appendToData(char: string): void;\n  abstract beginStartTag(): void;\n  abstract appendToTagName(char: string): void;\n  abstract beginAttribute(): void;\n  abstract appendToAttributeName(char: string): void;\n  abstract beginAttributeValue(quoted: boolean): void;\n  abstract appendToAttributeValue(char: string): void;\n  abstract finishAttributeValue(): void;\n  abstract markTagAsSelfClosing(): void;\n  abstract beginEndTag(): void;\n  abstract finishTag(): void;\n  abstract beginComment(): void;\n  abstract appendToCommentData(char: string): void;\n  abstract finishComment(): void;\n  abstract reportSyntaxError(error: string): void;\n\n  get currentAttr(): Attribute {\n    return expect(this.currentAttribute, 'expected attribute');\n  }\n\n  get currentTag(): ParserNodeBuilder<Tag<'StartTag' | 'EndTag'>> {\n    let node = this.currentNode;\n    assert(node && (node.type === 'StartTag' || node.type === 'EndTag'), 'expected tag');\n    return node;\n  }\n\n  get currentStartTag(): ParserNodeBuilder<Tag<'StartTag'>> {\n    let node = this.currentNode;\n    assert(node && node.type === 'StartTag', 'expected start tag');\n    return node;\n  }\n\n  get currentEndTag(): ParserNodeBuilder<Tag<'EndTag'>> {\n    let node = this.currentNode;\n    assert(node && node.type === 'EndTag', 'expected end tag');\n    return node;\n  }\n\n  get currentComment(): ParserNodeBuilder<ASTv1.CommentStatement> {\n    let node = this.currentNode;\n    assert(node && node.type === 'CommentStatement', 'expected a comment');\n    return node;\n  }\n\n  get currentData(): ASTv1.TextNode {\n    let node = this.currentNode;\n    assert(node && node.type === 'TextNode', 'expected a text node');\n    return node;\n  }\n\n  acceptTemplate(node: HBS.Program): ASTv1.Template {\n    return this[node.type as 'Program'](node) as ASTv1.Template;\n  }\n\n  acceptNode(node: HBS.Program): ASTv1.Block | ASTv1.Template;\n  acceptNode<U extends HBS.Node | ASTv1.Node>(node: HBS.Node): U;\n  acceptNode<T extends HBS.NodeType>(node: HBS.Node<T>): HBS.Output<T> {\n    return (this[node.type as T] as (node: HBS.Node<T>) => HBS.Output<T>)(node);\n  }\n\n  currentElement(): ASTv1.ParentNode {\n    return getLast(asPresentArray(this.elementStack));\n  }\n\n  sourceForNode(node: HBS.Node, endNode?: { loc: HBS.SourceLocation }): string {\n    let firstLine = node.loc.start.line - 1;\n    let currentLine = firstLine - 1;\n    let firstColumn = node.loc.start.column;\n    let string = [];\n    let line: string;\n\n    let lastLine: number;\n    let lastColumn: number;\n\n    if (endNode) {\n      lastLine = endNode.loc.end.line - 1;\n      lastColumn = endNode.loc.end.column;\n    } else {\n      lastLine = node.loc.end.line - 1;\n      lastColumn = node.loc.end.column;\n    }\n\n    while (currentLine < lastLine) {\n      currentLine++;\n      line = unwrap(this.lines[currentLine]);\n\n      if (currentLine === firstLine) {\n        if (firstLine === lastLine) {\n          string.push(line.slice(firstColumn, lastColumn));\n        } else {\n          string.push(line.slice(firstColumn));\n        }\n      } else if (currentLine === lastLine) {\n        string.push(line.slice(0, lastColumn));\n      } else {\n        string.push(line);\n      }\n    }\n\n    return string.join('\\n');\n  }\n}\n","import type { Nullable, Recast } from '@glimmer/interfaces';\nimport { getLast, isPresentArray, unwrap } from '@glimmer/util';\nimport type { TokenizerState } from 'simple-html-tokenizer';\n\nimport { Parser, type ParserNodeBuilder, type Tag } from '../parser';\nimport { NON_EXISTENT_LOCATION } from '../source/location';\nimport { generateSyntaxError } from '../syntax-error';\nimport { appendChild, isHBSLiteral, printLiteral } from '../utils';\nimport type * as ASTv1 from '../v1/api';\nimport type * as HBS from '../v1/handlebars-ast';\nimport { PathExpressionImplV1 } from '../v1/legacy-interop';\nimport b from '../v1/parser-builders';\n\nconst BEFORE_ATTRIBUTE_NAME = 'beforeAttributeName' as TokenizerState;\nconst ATTRIBUTE_VALUE_UNQUOTED = 'attributeValueUnquoted' as TokenizerState;\n\nexport abstract class HandlebarsNodeVisitors extends Parser {\n  abstract override appendToCommentData(s: string): void;\n  abstract override beginAttributeValue(quoted: boolean): void;\n  abstract override finishAttributeValue(): void;\n\n  private get isTopLevel() {\n    return this.elementStack.length === 0;\n  }\n\n  Program(program: HBS.Program): ASTv1.Block;\n  Program(program: HBS.Program): ASTv1.Template;\n  Program(program: HBS.Program): ASTv1.Template | ASTv1.Block;\n  Program(program: HBS.Program): ASTv1.Block | ASTv1.Template {\n    const body: ASTv1.Statement[] = [];\n    let node;\n\n    if (this.isTopLevel) {\n      node = b.template({\n        body,\n        blockParams: program.blockParams,\n        loc: this.source.spanFor(program.loc),\n      });\n    } else {\n      node = b.blockItself({\n        body,\n        blockParams: program.blockParams,\n        chained: program.chained,\n        loc: this.source.spanFor(program.loc),\n      });\n    }\n\n    let i,\n      l = program.body.length;\n\n    this.elementStack.push(node);\n\n    if (l === 0) {\n      return this.elementStack.pop() as ASTv1.Block | ASTv1.Template;\n    }\n\n    for (i = 0; i < l; i++) {\n      this.acceptNode(unwrap(program.body[i]));\n    }\n\n    // Ensure that that the element stack is balanced properly.\n    const poppedNode = this.elementStack.pop();\n    if (poppedNode !== node) {\n      const elementNode = poppedNode as ASTv1.ElementNode;\n\n      throw generateSyntaxError(`Unclosed element \\`${elementNode.tag}\\``, elementNode.loc);\n    }\n\n    return node;\n  }\n\n  BlockStatement(block: HBS.BlockStatement): ASTv1.BlockStatement | void {\n    if (this.tokenizer.state === 'comment') {\n      this.appendToCommentData(this.sourceForNode(block));\n      return;\n    }\n\n    if (this.tokenizer.state !== 'data' && this.tokenizer.state !== 'beforeData') {\n      throw generateSyntaxError(\n        'A block may only be used inside an HTML element or another block.',\n        this.source.spanFor(block.loc)\n      );\n    }\n\n    const { path, params, hash } = acceptCallNodes(this, block);\n\n    // These are bugs in Handlebars upstream\n    if (!block.program.loc) {\n      block.program.loc = NON_EXISTENT_LOCATION;\n    }\n\n    if (block.inverse && !block.inverse.loc) {\n      block.inverse.loc = NON_EXISTENT_LOCATION;\n    }\n\n    const program = this.Program(block.program);\n    const inverse = block.inverse ? this.Program(block.inverse) : null;\n\n    const node = b.block({\n      path,\n      params,\n      hash,\n      defaultBlock: program,\n      elseBlock: inverse,\n      loc: this.source.spanFor(block.loc),\n      openStrip: block.openStrip,\n      inverseStrip: block.inverseStrip,\n      closeStrip: block.closeStrip,\n    });\n\n    const parentProgram = this.currentElement();\n\n    appendChild(parentProgram, node);\n  }\n\n  MustacheStatement(rawMustache: HBS.MustacheStatement): ASTv1.MustacheStatement | void {\n    const { tokenizer } = this;\n\n    if (tokenizer.state === 'comment') {\n      this.appendToCommentData(this.sourceForNode(rawMustache));\n      return;\n    }\n\n    let mustache: ASTv1.MustacheStatement;\n    const { escaped, loc, strip } = rawMustache;\n\n    if (isHBSLiteral(rawMustache.path)) {\n      mustache = b.mustache({\n        path: this.acceptNode<ASTv1.Literal>(rawMustache.path),\n        params: [],\n        hash: b.hash([], this.source.spanFor(rawMustache.path.loc).collapse('end')),\n        trusting: !escaped,\n        loc: this.source.spanFor(loc),\n        strip,\n      });\n    } else {\n      const { path, params, hash } = acceptCallNodes(\n        this,\n        rawMustache as HBS.MustacheStatement & {\n          path: HBS.PathExpression | HBS.SubExpression;\n        }\n      );\n      mustache = b.mustache({\n        path,\n        params,\n        hash,\n        trusting: !escaped,\n        loc: this.source.spanFor(loc),\n        strip,\n      });\n    }\n\n    switch (tokenizer.state) {\n      // Tag helpers\n      case 'tagOpen':\n      case 'tagName':\n        throw generateSyntaxError(`Cannot use mustaches in an elements tagname`, mustache.loc);\n\n      case 'beforeAttributeName':\n        addElementModifier(this.currentStartTag, mustache);\n        break;\n      case 'attributeName':\n      case 'afterAttributeName':\n        this.beginAttributeValue(false);\n        this.finishAttributeValue();\n        addElementModifier(this.currentStartTag, mustache);\n        tokenizer.transitionTo(BEFORE_ATTRIBUTE_NAME);\n        break;\n      case 'afterAttributeValueQuoted':\n        addElementModifier(this.currentStartTag, mustache);\n        tokenizer.transitionTo(BEFORE_ATTRIBUTE_NAME);\n        break;\n\n      // Attribute values\n      case 'beforeAttributeValue':\n        this.beginAttributeValue(false);\n        this.appendDynamicAttributeValuePart(mustache);\n        tokenizer.transitionTo(ATTRIBUTE_VALUE_UNQUOTED);\n        break;\n      case 'attributeValueDoubleQuoted':\n      case 'attributeValueSingleQuoted':\n      case 'attributeValueUnquoted':\n        this.appendDynamicAttributeValuePart(mustache);\n        break;\n\n      // TODO: Only append child when the tokenizer state makes\n      // sense to do so, otherwise throw an error.\n      default:\n        appendChild(this.currentElement(), mustache);\n    }\n\n    return mustache;\n  }\n\n  appendDynamicAttributeValuePart(part: ASTv1.MustacheStatement): void {\n    this.finalizeTextPart();\n    const attr = this.currentAttr;\n    attr.isDynamic = true;\n    attr.parts.push(part);\n  }\n\n  finalizeTextPart(): void {\n    const attr = this.currentAttr;\n    const text = attr.currentPart;\n    if (text !== null) {\n      this.currentAttr.parts.push(text);\n      this.startTextPart();\n    }\n  }\n\n  startTextPart(): void {\n    this.currentAttr.currentPart = null;\n  }\n\n  ContentStatement(content: HBS.ContentStatement): void {\n    updateTokenizerLocation(this.tokenizer, content);\n\n    this.tokenizer.tokenizePart(content.value);\n    this.tokenizer.flushData();\n  }\n\n  CommentStatement(rawComment: HBS.CommentStatement): Nullable<ASTv1.MustacheCommentStatement> {\n    const { tokenizer } = this;\n\n    if (tokenizer.state === 'comment') {\n      this.appendToCommentData(this.sourceForNode(rawComment));\n      return null;\n    }\n\n    const { value, loc } = rawComment;\n    const comment = b.mustacheComment(value, this.source.spanFor(loc));\n\n    switch (tokenizer.state) {\n      case 'beforeAttributeName':\n      case 'afterAttributeName':\n        this.currentStartTag.comments.push(comment);\n        break;\n\n      case 'beforeData':\n      case 'data':\n        appendChild(this.currentElement(), comment);\n        break;\n\n      default:\n        throw generateSyntaxError(\n          `Using a Handlebars comment when in the \\`${tokenizer['state']}\\` state is not supported`,\n          this.source.spanFor(rawComment.loc)\n        );\n    }\n\n    return comment;\n  }\n\n  PartialStatement(partial: HBS.PartialStatement): never {\n    throw generateSyntaxError(\n      `Handlebars partials are not supported`,\n      this.source.spanFor(partial.loc)\n    );\n  }\n\n  PartialBlockStatement(partialBlock: HBS.PartialBlockStatement): never {\n    throw generateSyntaxError(\n      `Handlebars partial blocks are not supported`,\n      this.source.spanFor(partialBlock.loc)\n    );\n  }\n\n  Decorator(decorator: HBS.Decorator): never {\n    throw generateSyntaxError(\n      `Handlebars decorators are not supported`,\n      this.source.spanFor(decorator.loc)\n    );\n  }\n\n  DecoratorBlock(decoratorBlock: HBS.DecoratorBlock): never {\n    throw generateSyntaxError(\n      `Handlebars decorator blocks are not supported`,\n      this.source.spanFor(decoratorBlock.loc)\n    );\n  }\n\n  SubExpression(sexpr: HBS.SubExpression): ASTv1.SubExpression {\n    const { path, params, hash } = acceptCallNodes(this, sexpr);\n    return b.sexpr({ path, params, hash, loc: this.source.spanFor(sexpr.loc) });\n  }\n\n  PathExpression(path: HBS.PathExpression): ASTv1.PathExpression {\n    const { original } = path;\n    let parts: string[];\n\n    if (original.indexOf('/') !== -1) {\n      if (original.slice(0, 2) === './') {\n        throw generateSyntaxError(\n          `Using \"./\" is not supported in Glimmer and unnecessary`,\n          this.source.spanFor(path.loc)\n        );\n      }\n      if (original.slice(0, 3) === '../') {\n        throw generateSyntaxError(\n          `Changing context using \"../\" is not supported in Glimmer`,\n          this.source.spanFor(path.loc)\n        );\n      }\n      if (original.indexOf('.') !== -1) {\n        throw generateSyntaxError(\n          `Mixing '.' and '/' in paths is not supported in Glimmer; use only '.' to separate property paths`,\n          this.source.spanFor(path.loc)\n        );\n      }\n      parts = [path.parts.join('/')];\n    } else if (original === '.') {\n      throw generateSyntaxError(\n        `'.' is not a supported path in Glimmer; check for a path with a trailing '.'`,\n        this.source.spanFor(path.loc)\n      );\n    } else {\n      parts = path.parts;\n    }\n\n    let thisHead = false;\n\n    // This is to fix a bug in the Handlebars AST where the path expressions in\n    // `{{this.foo}}` (and similarly `{{foo-bar this.foo named=this.foo}}` etc)\n    // are simply turned into `{{foo}}`. The fix is to push it back onto the\n    // parts array and let the runtime see the difference. However, we cannot\n    // simply use the string `this` as it means literally the property called\n    // \"this\" in the current context (it can be expressed in the syntax as\n    // `{{[this]}}`, where the square bracket are generally for this kind of\n    // escaping – such as `{{foo.[\"bar.baz\"]}}` would mean lookup a property\n    // named literally \"bar.baz\" on `this.foo`). By convention, we use `null`\n    // for this purpose.\n    if (/^this(?:\\..+)?$/u.test(original)) {\n      thisHead = true;\n    }\n\n    let pathHead: ASTv1.PathHead;\n    if (thisHead) {\n      pathHead = {\n        type: 'ThisHead',\n        loc: {\n          start: path.loc.start,\n          end: { line: path.loc.start.line, column: path.loc.start.column + 4 },\n        },\n      };\n    } else if (path.data) {\n      const head = parts.shift();\n\n      if (head === undefined) {\n        throw generateSyntaxError(\n          `Attempted to parse a path expression, but it was not valid. Paths beginning with @ must start with a-z.`,\n          this.source.spanFor(path.loc)\n        );\n      }\n\n      pathHead = {\n        type: 'AtHead',\n        name: `@${head}`,\n        loc: {\n          start: path.loc.start,\n          end: { line: path.loc.start.line, column: path.loc.start.column + head.length + 1 },\n        },\n      };\n    } else {\n      const head = parts.shift();\n\n      if (head === undefined) {\n        throw generateSyntaxError(\n          `Attempted to parse a path expression, but it was not valid. Paths must start with a-z or A-Z.`,\n          this.source.spanFor(path.loc)\n        );\n      }\n\n      pathHead = {\n        type: 'VarHead',\n        name: head,\n        loc: {\n          start: path.loc.start,\n          end: { line: path.loc.start.line, column: path.loc.start.column + head.length },\n        },\n      };\n    }\n\n    return new PathExpressionImplV1(path.original, pathHead, parts, this.source.spanFor(path.loc));\n  }\n\n  Hash(hash: HBS.Hash): ASTv1.Hash {\n    const pairs = hash.pairs.map((pair) =>\n      b.pair({\n        key: pair.key,\n        value: this.acceptNode(pair.value),\n        loc: this.source.spanFor(pair.loc),\n      })\n    );\n\n    return b.hash(pairs, this.source.spanFor(hash.loc));\n  }\n\n  StringLiteral(string: HBS.StringLiteral): ASTv1.StringLiteral {\n    return b.literal({ type: 'StringLiteral', value: string.value, loc: string.loc });\n  }\n\n  BooleanLiteral(boolean: HBS.BooleanLiteral): ASTv1.BooleanLiteral {\n    return b.literal({ type: 'BooleanLiteral', value: boolean.value, loc: boolean.loc });\n  }\n\n  NumberLiteral(number: HBS.NumberLiteral): ASTv1.NumberLiteral {\n    return b.literal({ type: 'NumberLiteral', value: number.value, loc: number.loc });\n  }\n\n  UndefinedLiteral(undef: HBS.UndefinedLiteral): ASTv1.UndefinedLiteral {\n    return b.literal({ type: 'UndefinedLiteral', value: undefined, loc: undef.loc });\n  }\n\n  NullLiteral(nul: HBS.NullLiteral): ASTv1.NullLiteral {\n    return b.literal({ type: 'NullLiteral', value: null, loc: nul.loc });\n  }\n}\n\nfunction calculateRightStrippedOffsets(original: string, value: string) {\n  if (value === '') {\n    // if it is empty, just return the count of newlines\n    // in original\n    return {\n      lines: original.split('\\n').length - 1,\n      columns: 0,\n    };\n  }\n\n  // otherwise, return the number of newlines prior to\n  // `value`\n  const [difference] = original.split(value) as [string];\n  const lines = difference.split(/\\n/u);\n  const lineCount = lines.length - 1;\n\n  return {\n    lines: lineCount,\n    columns: unwrap(lines[lineCount]).length,\n  };\n}\n\nfunction updateTokenizerLocation(tokenizer: Parser['tokenizer'], content: HBS.ContentStatement) {\n  let line = content.loc.start.line;\n  let column = content.loc.start.column;\n\n  const offsets = calculateRightStrippedOffsets(\n    content.original as Recast<HBS.StripFlags, string>,\n    content.value\n  );\n\n  line = line + offsets.lines;\n  if (offsets.lines) {\n    column = offsets.columns;\n  } else {\n    column = column + offsets.columns;\n  }\n\n  tokenizer.line = line;\n  tokenizer.column = column;\n}\n\nfunction acceptCallNodes(\n  compiler: HandlebarsNodeVisitors,\n  node: {\n    path:\n      | HBS.PathExpression\n      | HBS.SubExpression\n      | HBS.StringLiteral\n      | HBS.UndefinedLiteral\n      | HBS.NullLiteral\n      | HBS.NumberLiteral\n      | HBS.BooleanLiteral;\n    params: HBS.Expression[];\n    hash: HBS.Hash;\n  }\n): {\n  path: ASTv1.PathExpression | ASTv1.SubExpression;\n  params: ASTv1.Expression[];\n  hash: ASTv1.Hash;\n} {\n  if (node.path.type.endsWith('Literal')) {\n    const path = node.path as unknown as\n      | HBS.StringLiteral\n      | HBS.UndefinedLiteral\n      | HBS.NullLiteral\n      | HBS.NumberLiteral\n      | HBS.BooleanLiteral;\n\n    let value = '';\n    if (path.type === 'BooleanLiteral') {\n      value = path.original.toString();\n    } else if (path.type === 'StringLiteral') {\n      value = `\"${path.original}\"`;\n    } else if (path.type === 'NullLiteral') {\n      value = 'null';\n    } else if (path.type === 'NumberLiteral') {\n      value = path.value.toString();\n    } else {\n      value = 'undefined';\n    }\n    throw generateSyntaxError(\n      `${path.type} \"${\n        path.type === 'StringLiteral' ? path.original : value\n      }\" cannot be called as a sub-expression, replace (${value}) with ${value}`,\n      compiler.source.spanFor(path.loc)\n    );\n  }\n\n  const path =\n    node.path.type === 'PathExpression'\n      ? compiler.PathExpression(node.path)\n      : compiler.SubExpression(node.path as unknown as HBS.SubExpression);\n  const params = node.params\n    ? node.params.map((e) => compiler.acceptNode<ASTv1.Expression>(e))\n    : [];\n\n  // if there is no hash, position it as a collapsed node immediately after the last param (or the\n  // path, if there are also no params)\n  const end = isPresentArray(params) ? getLast(params).loc : path.loc;\n\n  const hash = node.hash\n    ? compiler.Hash(node.hash)\n    : ({\n        type: 'Hash',\n        pairs: [] as ASTv1.HashPair[],\n        loc: compiler.source.spanFor(end).collapse('end'),\n      } as const);\n\n  return { path, params, hash };\n}\n\nfunction addElementModifier(\n  element: ParserNodeBuilder<Tag<'StartTag'>>,\n  mustache: ASTv1.MustacheStatement\n) {\n  const { path, params, hash, loc } = mustache;\n\n  if (isHBSLiteral(path)) {\n    const modifier = `{{${printLiteral(path)}}}`;\n    const tag = `<${element.name} ... ${modifier} ...`;\n\n    throw generateSyntaxError(`In ${tag}, ${modifier} is not a valid modifier`, mustache.loc);\n  }\n\n  const modifier = b.elementModifier({ path, params, hash, loc });\n  element.modifiers.push(modifier);\n}\n","import type { Nullable } from '@glimmer/interfaces';\nimport { assertPresentArray, assign, getFirst, getLast, isPresentArray } from '@glimmer/util';\nimport { parse, parseWithoutProcessing } from '@handlebars/parser';\nimport { EntityParser } from 'simple-html-tokenizer';\n\nimport print from '../generation/print';\nimport { voidMap } from '../generation/printer';\nimport type { Tag } from '../parser';\nimport * as src from '../source/api';\nimport { generateSyntaxError } from '../syntax-error';\nimport traverse from '../traversal/traverse';\nimport type { NodeVisitor } from '../traversal/visitor';\nimport Walker from '../traversal/walker';\nimport { appendChild, parseElementBlockParams } from '../utils';\nimport type * as ASTv1 from '../v1/api';\nimport type * as HBS from '../v1/handlebars-ast';\nimport b from '../v1/parser-builders';\nimport publicBuilder from '../v1/public-builders';\nimport { HandlebarsNodeVisitors } from './handlebars-node-visitors';\n\nexport class TokenizerEventHandlers extends HandlebarsNodeVisitors {\n  private tagOpenLine = 0;\n  private tagOpenColumn = 0;\n\n  reset(): void {\n    this.currentNode = null;\n  }\n\n  // Comment\n\n  beginComment(): void {\n    this.currentNode = b.comment('', this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn));\n  }\n\n  appendToCommentData(char: string): void {\n    this.currentComment.value += char;\n  }\n\n  finishComment(): void {\n    appendChild(this.currentElement(), this.finish(this.currentComment));\n  }\n\n  // Data\n\n  beginData(): void {\n    this.currentNode = b.text({\n      chars: '',\n      loc: this.offset().collapsed(),\n    });\n  }\n\n  appendToData(char: string): void {\n    this.currentData.chars += char;\n  }\n\n  finishData(): void {\n    this.currentData.loc = this.currentData.loc.withEnd(this.offset());\n\n    appendChild(this.currentElement(), this.currentData);\n  }\n\n  // Tags - basic\n\n  tagOpen(): void {\n    this.tagOpenLine = this.tokenizer.line;\n    this.tagOpenColumn = this.tokenizer.column;\n  }\n\n  beginStartTag(): void {\n    this.currentNode = {\n      type: 'StartTag',\n      name: '',\n      attributes: [],\n      modifiers: [],\n      comments: [],\n      selfClosing: false,\n      loc: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn),\n    };\n  }\n\n  beginEndTag(): void {\n    this.currentNode = {\n      type: 'EndTag',\n      name: '',\n      attributes: [],\n      modifiers: [],\n      comments: [],\n      selfClosing: false,\n      loc: this.source.offsetFor(this.tagOpenLine, this.tagOpenColumn),\n    };\n  }\n\n  finishTag(): void {\n    let tag = this.finish(this.currentTag);\n\n    if (tag.type === 'StartTag') {\n      this.finishStartTag();\n\n      if (tag.name === ':') {\n        throw generateSyntaxError(\n          'Invalid named block named detected, you may have created a named block without a name, or you may have began your name with a number. Named blocks must have names that are at least one character long, and begin with a lower case letter',\n          this.source.spanFor({\n            start: this.currentTag.loc.toJSON(),\n            end: this.offset().toJSON(),\n          })\n        );\n      }\n\n      if (voidMap.has(tag.name) || tag.selfClosing) {\n        this.finishEndTag(true);\n      }\n    } else if (tag.type === 'EndTag') {\n      this.finishEndTag(false);\n    }\n  }\n\n  finishStartTag(): void {\n    let {\n      name,\n      attributes: attrs,\n      modifiers,\n      comments,\n      selfClosing,\n      loc,\n    } = this.finish(this.currentStartTag);\n\n    let element = b.element({\n      tag: name,\n      selfClosing,\n      attrs,\n      modifiers,\n      comments,\n      children: [],\n      blockParams: [],\n      loc,\n    });\n    this.elementStack.push(element);\n  }\n\n  finishEndTag(isVoid: boolean): void {\n    let tag = this.finish(this.currentTag);\n\n    let element = this.elementStack.pop() as ASTv1.ElementNode;\n\n    this.validateEndTag(tag, element, isVoid);\n    let parent = this.currentElement();\n\n    element.loc = element.loc.withEnd(this.offset());\n    parseElementBlockParams(element);\n    appendChild(parent, element);\n  }\n\n  markTagAsSelfClosing(): void {\n    this.currentTag.selfClosing = true;\n  }\n\n  // Tags - name\n\n  appendToTagName(char: string): void {\n    this.currentTag.name += char;\n  }\n\n  // Tags - attributes\n\n  beginAttribute(): void {\n    let offset = this.offset();\n\n    this.currentAttribute = {\n      name: '',\n      parts: [],\n      currentPart: null,\n      isQuoted: false,\n      isDynamic: false,\n      start: offset,\n      valueSpan: offset.collapsed(),\n    };\n  }\n\n  appendToAttributeName(char: string): void {\n    this.currentAttr.name += char;\n  }\n\n  beginAttributeValue(isQuoted: boolean): void {\n    this.currentAttr.isQuoted = isQuoted;\n    this.startTextPart();\n    this.currentAttr.valueSpan = this.offset().collapsed();\n  }\n\n  appendToAttributeValue(char: string): void {\n    let parts = this.currentAttr.parts;\n    let lastPart = parts[parts.length - 1];\n\n    let current = this.currentAttr.currentPart;\n\n    if (current) {\n      current.chars += char;\n\n      // update end location for each added char\n      current.loc = current.loc.withEnd(this.offset());\n    } else {\n      // initially assume the text node is a single char\n      let loc: src.SourceOffset = this.offset();\n\n      // the tokenizer line/column have already been advanced, correct location info\n      if (char === '\\n') {\n        loc = lastPart ? lastPart.loc.getEnd() : this.currentAttr.valueSpan.getStart();\n      } else {\n        loc = loc.move(-1);\n      }\n\n      this.currentAttr.currentPart = b.text({ chars: char, loc: loc.collapsed() });\n    }\n  }\n\n  finishAttributeValue(): void {\n    this.finalizeTextPart();\n\n    let tag = this.currentTag;\n    let tokenizerPos = this.offset();\n\n    if (tag.type === 'EndTag') {\n      throw generateSyntaxError(\n        `Invalid end tag: closing tag must not have attributes`,\n        this.source.spanFor({ start: tag.loc.toJSON(), end: tokenizerPos.toJSON() })\n      );\n    }\n\n    let { name, parts, start, isQuoted, isDynamic, valueSpan } = this.currentAttr;\n    let value = this.assembleAttributeValue(parts, isQuoted, isDynamic, start.until(tokenizerPos));\n    value.loc = valueSpan.withEnd(tokenizerPos);\n\n    let attribute = b.attr({ name, value, loc: start.until(tokenizerPos) });\n\n    this.currentStartTag.attributes.push(attribute);\n  }\n\n  reportSyntaxError(message: string): void {\n    throw generateSyntaxError(message, this.offset().collapsed());\n  }\n\n  assembleConcatenatedValue(\n    parts: (ASTv1.MustacheStatement | ASTv1.TextNode)[]\n  ): ASTv1.ConcatStatement {\n    for (const part of parts) {\n      if (part.type !== 'MustacheStatement' && part.type !== 'TextNode') {\n        throw generateSyntaxError(\n          `Unsupported node in quoted attribute value: ${part['type'] as string}`,\n          (part as ASTv1.BaseNode).loc\n        );\n      }\n    }\n\n    assertPresentArray(parts, `the concatenation parts of an element should not be empty`);\n\n    let first = getFirst(parts);\n    let last = getLast(parts);\n\n    return b.concat(parts, this.source.spanFor(first.loc).extend(this.source.spanFor(last.loc)));\n  }\n\n  validateEndTag(\n    tag: Tag<'StartTag' | 'EndTag'>,\n    element: ASTv1.ElementNode,\n    selfClosing: boolean\n  ): void {\n    if (voidMap.has(tag.name) && !selfClosing) {\n      // EngTag is also called by StartTag for void and self-closing tags (i.e.\n      // <input> or <br />, so we need to check for that here. Otherwise, we would\n      // throw an error for those cases.\n      throw generateSyntaxError(\n        `<${tag.name}> elements do not need end tags. You should remove it`,\n        tag.loc\n      );\n    } else if (element.tag === undefined) {\n      throw generateSyntaxError(`Closing tag </${tag.name}> without an open tag`, tag.loc);\n    } else if (element.tag !== tag.name) {\n      throw generateSyntaxError(\n        `Closing tag </${tag.name}> did not match last open tag <${element.tag}> (on line ${element.loc.startPosition.line})`,\n        tag.loc\n      );\n    }\n  }\n\n  assembleAttributeValue(\n    parts: ASTv1.AttrPart[],\n    isQuoted: boolean,\n    isDynamic: boolean,\n    span: src.SourceSpan\n  ): ASTv1.AttrValue {\n    if (isDynamic) {\n      if (isQuoted) {\n        return this.assembleConcatenatedValue(parts);\n      } else {\n        assertPresentArray(parts);\n\n        const [head, a] = parts;\n        if (a === undefined || (a.type === 'TextNode' && a.chars === '/')) {\n          return head;\n        } else {\n          throw generateSyntaxError(\n            `An unquoted attribute value must be a string or a mustache, ` +\n            `preceded by whitespace or a '=' character, and ` +\n            `followed by whitespace, a '>' character, or '/>'`,\n            span\n          );\n        }\n      }\n    } else if (isPresentArray(parts)) {\n      return parts[0];\n    } else {\n      return b.text({ chars: '', loc: span });\n    }\n  }\n}\n\n/**\n  ASTPlugins can make changes to the Glimmer template AST before\n  compilation begins.\n*/\nexport interface ASTPluginBuilder<TEnv extends ASTPluginEnvironment = ASTPluginEnvironment> {\n  (env: TEnv): ASTPlugin;\n}\n\nexport interface ASTPlugin {\n  name: string;\n  visitor: NodeVisitor;\n}\n\nexport interface ASTPluginEnvironment {\n  meta?: object;\n  syntax: Syntax;\n}\n\ninterface HandlebarsParseOptions {\n  srcName?: string;\n  ignoreStandalone?: boolean;\n}\n\nexport interface TemplateIdFn {\n  (src: string): Nullable<string>;\n}\n\nexport interface PrecompileOptions extends PreprocessOptions {\n  id?: TemplateIdFn;\n  customizeComponentName?: ((input: string) => string) | undefined;\n}\n\nexport interface PrecompileOptionsWithLexicalScope extends PrecompileOptions {\n  lexicalScope: (variable: string) => boolean;\n}\n\nexport interface PreprocessOptions {\n  strictMode?: boolean;\n  locals?: string[];\n  meta?: {\n    moduleName?: string;\n  };\n  plugins?: {\n    ast?: ASTPluginBuilder[];\n  };\n  parseOptions?: HandlebarsParseOptions;\n  customizeComponentName?: ((input: string) => string) | undefined;\n\n  /**\n    Useful for specifying a group of options together.\n\n    When `'codemod'` we disable all whitespace control in handlebars\n    (to preserve as much as possible) and we also avoid any\n    escaping/unescaping of HTML entity codes.\n   */\n  mode?: 'codemod' | 'precompile';\n}\n\nexport interface Syntax {\n  parse: typeof preprocess;\n  builders: typeof publicBuilder;\n  print: typeof print;\n  traverse: typeof traverse;\n  Walker: typeof Walker;\n}\n\nconst syntax: Syntax = {\n  parse: preprocess,\n  builders: publicBuilder,\n  print,\n  traverse,\n  Walker,\n};\n\nclass CodemodEntityParser extends EntityParser {\n  // match upstream types, but never match an entity\n  constructor() {\n    super({});\n  }\n\n  override parse(): string | undefined {\n    return undefined;\n  }\n}\n\nexport function preprocess(\n  input: string | src.Source | HBS.Program,\n  options: PreprocessOptions = {}\n): ASTv1.Template {\n  let mode = options.mode || 'precompile';\n\n  let source: src.Source;\n  let ast: HBS.Program;\n  if (typeof input === 'string') {\n    source = new src.Source(input, options.meta?.moduleName);\n\n    if (mode === 'codemod') {\n      ast = parseWithoutProcessing(input, options.parseOptions) as HBS.Program;\n    } else {\n      ast = parse(input, options.parseOptions) as HBS.Program;\n    }\n  } else if (input instanceof src.Source) {\n    source = input;\n\n    if (mode === 'codemod') {\n      ast = parseWithoutProcessing(input.source, options.parseOptions) as HBS.Program;\n    } else {\n      ast = parse(input.source, options.parseOptions) as HBS.Program;\n    }\n  } else {\n    source = new src.Source('', options.meta?.moduleName);\n    ast = input;\n  }\n\n  let entityParser = undefined;\n  if (mode === 'codemod') {\n    entityParser = new CodemodEntityParser();\n  }\n\n  let offsets = src.SourceSpan.forCharPositions(source, 0, source.source.length);\n  ast.loc = {\n    source: '(program)',\n    start: offsets.startPosition,\n    end: offsets.endPosition,\n  };\n\n  let program = new TokenizerEventHandlers(source, entityParser, mode).acceptTemplate(ast);\n\n  if (options.strictMode) {\n    program.blockParams = options.locals ?? [];\n  }\n\n  if (options && options.plugins && options.plugins.ast) {\n    for (const transform of options.plugins.ast) {\n      let env: ASTPluginEnvironment = assign({}, options, { syntax }, { plugins: undefined });\n\n      let pluginResult = transform(env);\n\n      traverse(program, pluginResult.visitor);\n    }\n  }\n\n  return program;\n}\n","import { isKeyword } from './keywords';\nimport { preprocess } from './parser/tokenizer-event-handlers';\nimport traverse from './traversal/traverse';\nimport type * as ASTv1 from './v1/api';\n\ninterface GetTemplateLocalsOptions {\n  includeKeywords?: boolean;\n  includeHtmlElements?: boolean;\n}\n\n/**\n * Gets the correct Token from the Node based on it's type\n */\nfunction tokensFromType(\n  node: ASTv1.Node,\n  scopedTokens: string[],\n  options: GetTemplateLocalsOptions\n): string | void {\n  if (node.type === 'PathExpression') {\n    if (node.head.type === 'AtHead' || node.head.type === 'ThisHead') {\n      return;\n    }\n\n    const possbleToken = node.head.name;\n\n    if (scopedTokens.indexOf(possbleToken) === -1) {\n      return possbleToken;\n    }\n  } else if (node.type === 'ElementNode') {\n    const { tag } = node;\n\n    const char = tag.charAt(0);\n\n    if (char === ':' || char === '@') {\n      return;\n    }\n\n    if (!options.includeHtmlElements && tag.indexOf('.') === -1 && tag.toLowerCase() === tag) {\n      return;\n    }\n\n    if (tag.substr(0, 5) === 'this.') {\n      return;\n    }\n\n    // the tag may be from a yielded object\n    // example:\n    //   <x.button>\n    // An ElementNode does not parse the \"tag\" in to a PathExpression\n    // so we have to split on `.`, just like how `this` presence is checked.\n    if (tag.includes('.')) {\n      let [potentialLocal] = tag.split('.') as [string, ...string[]];\n\n      if (scopedTokens.includes(potentialLocal)) return;\n    }\n\n    if (scopedTokens.includes(tag)) return;\n\n    return tag;\n  }\n}\n\n/**\n * Adds tokens to the tokensSet based on their node.type\n */\nfunction addTokens(\n  tokensSet: Set<string>,\n  node: ASTv1.Node,\n  scopedTokens: string[],\n  options: GetTemplateLocalsOptions\n) {\n  const maybeTokens = tokensFromType(node, scopedTokens, options);\n\n  (Array.isArray(maybeTokens) ? maybeTokens : [maybeTokens]).forEach((maybeToken) => {\n    if (maybeToken !== undefined && maybeToken[0] !== '@') {\n      const maybeTokenFirstSegment = maybeToken.split('.')[0];\n      if (!scopedTokens.includes(maybeTokenFirstSegment)) {\n        tokensSet.add(maybeToken.split('.')[0]);\n      }\n    }\n  });\n}\n\n/**\n * Parses and traverses a given handlebars html template to extract all template locals\n * referenced that could possible come from the parent scope. Can exclude known keywords\n * optionally.\n */\nexport function getTemplateLocals(\n  html: string,\n  options: GetTemplateLocalsOptions = {\n    includeHtmlElements: false,\n    includeKeywords: false,\n  }\n): string[] {\n  const ast = preprocess(html);\n  const tokensSet = new Set<string>();\n  const scopedTokens: string[] = [];\n\n  traverse(ast, {\n    Block: {\n      enter({ blockParams }) {\n        blockParams.forEach((param) => {\n          scopedTokens.push(param);\n        });\n      },\n\n      exit({ blockParams }) {\n        blockParams.forEach(() => {\n          scopedTokens.pop();\n        });\n      },\n    },\n\n    ElementNode: {\n      enter(node) {\n        node.blockParams.forEach((param) => {\n          scopedTokens.push(param);\n        });\n        addTokens(tokensSet, node, scopedTokens, options);\n      },\n\n      exit({ blockParams }) {\n        blockParams.forEach(() => {\n          scopedTokens.pop();\n        });\n      },\n    },\n\n    PathExpression(node) {\n      addTokens(tokensSet, node, scopedTokens, options);\n    },\n  });\n\n  let tokens: string[] = [];\n\n  tokensSet.forEach((s) => tokens.push(s));\n\n  if (!options?.includeKeywords) {\n    tokens = tokens.filter((token) => !isKeyword(token));\n  }\n\n  return tokens;\n}\n","import { assign } from '@glimmer/util';\n\nimport type { SourceSpan } from '../../source/span';\n\nexport interface BaseNodeFields {\n  loc: SourceSpan;\n}\n\n/**\n * This is a convenience function for creating ASTv2 nodes, with an optional name and the node's\n * options.\n *\n * ```ts\n * export class HtmlText extends node('HtmlText').fields<{ chars: string }>() {}\n * ```\n *\n * This creates a new ASTv2 node with the name `'HtmlText'` and one field `chars: string` (in\n * addition to a `loc: SourceOffsets` field, which all nodes have).\n *\n * ```ts\n * export class Args extends node().fields<{\n *  positional: PositionalArguments;\n *  named: NamedArguments\n * }>() {}\n * ```\n *\n * This creates a new un-named ASTv2 node with two fields (`positional: Positional` and `named:\n * Named`, in addition to the generic `loc: SourceOffsets` field).\n *\n * Once you create a node using `node`, it is instantiated with all of its fields (including `loc`):\n *\n * ```ts\n * new HtmlText({ loc: offsets, chars: someString });\n * ```\n */\nexport function node(): {\n  fields<Fields extends object>(): NodeConstructor<Fields & BaseNodeFields>;\n};\nexport function node<T extends string>(\n  name: T\n): {\n  fields<Fields extends object>(): TypedNodeConstructor<T, Fields & BaseNodeFields>;\n};\n\nexport function node<T extends string>(\n  name?: T\n):\n  | {\n      fields<Fields extends object>(): TypedNodeConstructor<T, Fields & BaseNodeFields>;\n    }\n  | {\n      fields<Fields extends object>(): NodeConstructor<Fields & BaseNodeFields>;\n    } {\n  if (name !== undefined) {\n    const type = name;\n    return {\n      fields<Fields extends object>(): TypedNodeConstructor<T, BaseNodeFields & Fields> {\n        return class {\n          // SAFETY: initialized via `assign` in the constructor.\n          declare readonly loc: SourceSpan;\n          readonly type: T;\n\n          constructor(fields: BaseNodeFields & Fields) {\n            this.type = type;\n            assign(this, fields);\n          }\n        } as TypedNodeConstructor<T, BaseNodeFields & Fields>;\n      },\n    };\n  } else {\n    return {\n      fields<Fields>(): NodeConstructor<Fields & BaseNodeFields> {\n        return class {\n          // SAFETY: initialized via `assign` in the constructor.\n          declare readonly loc: SourceSpan;\n\n          constructor(fields: BaseNodeFields & Fields) {\n            assign(this, fields);\n          }\n        } as NodeConstructor<BaseNodeFields & Fields>;\n      },\n    };\n  }\n}\n\nexport interface NodeConstructor<Fields> {\n  new (fields: Fields): Readonly<Fields>;\n}\n\ntype TypedNode<T extends string, Fields> = { type: T } & Readonly<Fields>;\n\nexport interface TypedNodeConstructor<T extends string, Fields> {\n  new (options: Fields): TypedNode<T, Fields>;\n}\n","import type { SourceSlice } from '../../source/slice';\nimport type { SourceSpan } from '../../source/span';\nimport type { ExpressionNode } from './expr';\nimport { node } from './node';\n\n/**\n * Corresponds to syntaxes with positional and named arguments:\n *\n * - SubExpression\n * - Invoking Append\n * - Invoking attributes\n * - InvokeBlock\n *\n * If `Args` is empty, the `SourceOffsets` for this node should be the collapsed position\n * immediately after the parent call node's `callee`.\n */\nexport class Args extends node().fields<{\n  positional: PositionalArguments;\n  named: NamedArguments;\n}>() {\n  static empty(loc: SourceSpan): Args {\n    return new Args({\n      loc,\n      positional: PositionalArguments.empty(loc),\n      named: NamedArguments.empty(loc),\n    });\n  }\n\n  static named(named: NamedArguments): Args {\n    return new Args({\n      loc: named.loc,\n      positional: PositionalArguments.empty(named.loc.collapse('end')),\n      named,\n    });\n  }\n\n  nth(offset: number): ExpressionNode | null {\n    return this.positional.nth(offset);\n  }\n\n  get(name: string): ExpressionNode | null {\n    return this.named.get(name);\n  }\n\n  isEmpty(): boolean {\n    return this.positional.isEmpty() && this.named.isEmpty();\n  }\n}\n\n/**\n * Corresponds to positional arguments.\n *\n * If `PositionalArguments` is empty, the `SourceOffsets` for this node should be the collapsed\n * position immediately after the parent call node's `callee`.\n */\nexport class PositionalArguments extends node().fields<{\n  exprs: readonly ExpressionNode[];\n}>() {\n  static empty(loc: SourceSpan): PositionalArguments {\n    return new PositionalArguments({\n      loc,\n      exprs: [],\n    });\n  }\n\n  get size(): number {\n    return this.exprs.length;\n  }\n\n  nth(offset: number): ExpressionNode | null {\n    return this.exprs[offset] || null;\n  }\n\n  isEmpty(): boolean {\n    return this.exprs.length === 0;\n  }\n}\n\n/**\n * Corresponds to named arguments.\n *\n * If `PositionalArguments` and `NamedArguments` are empty, the `SourceOffsets` for this node should\n * be the same as the `Args` node that contains this node.\n *\n * If `PositionalArguments` is not empty but `NamedArguments` is empty, the `SourceOffsets` for this\n * node should be the collapsed position immediately after the last positional argument.\n */\nexport class NamedArguments extends node().fields<{\n  entries: readonly NamedArgument[];\n}>() {\n  static empty(loc: SourceSpan): NamedArguments {\n    return new NamedArguments({\n      loc,\n      entries: [],\n    });\n  }\n\n  get size(): number {\n    return this.entries.length;\n  }\n\n  get(name: string): ExpressionNode | null {\n    let entry = this.entries.filter((e) => e.name.chars === name)[0];\n\n    return entry ? entry.value : null;\n  }\n\n  isEmpty(): boolean {\n    return this.entries.length === 0;\n  }\n}\n\n/**\n * Corresponds to a single named argument.\n *\n * ```hbs\n * x=<expr>\n * ```\n */\nexport class NamedArgument {\n  readonly loc: SourceSpan;\n  readonly name: SourceSlice;\n  readonly value: ExpressionNode;\n\n  constructor(options: { name: SourceSlice; value: ExpressionNode }) {\n    this.loc = options.name.loc.extend(options.value.loc);\n    this.name = options.name;\n    this.value = options.value;\n  }\n}\n","import type { SourceSlice } from '../../source/slice';\nimport { NamedArgument } from './args';\nimport type { CallFields } from './base';\nimport type { ExpressionNode } from './expr';\nimport { node } from './node';\n\n/**\n * Attr nodes look like HTML attributes, but are classified as:\n *\n * 1. `HtmlAttr`, which means a regular HTML attribute in Glimmer\n * 2. `SplatAttr`, which means `...attributes`\n * 3. `ComponentArg`, which means an attribute whose name begins with `@`, and it is therefore a\n *    component argument.\n */\nexport type AttrNode = HtmlAttr | SplatAttr | ComponentArg;\n\n/**\n * `HtmlAttr` and `SplatAttr` are grouped together because the order of the `SplatAttr` node,\n * relative to other attributes, matters.\n */\nexport type HtmlOrSplatAttr = HtmlAttr | SplatAttr;\n\n/**\n * \"Attr Block\" nodes are allowed inside an open element tag in templates. They interact with the\n * element (or component).\n */\nexport type AttrBlockNode = AttrNode | ElementModifier;\n\n/**\n * `HtmlAttr` nodes are valid HTML attributes, with or without a value.\n *\n * Exceptions:\n *\n * - `...attributes` is `SplatAttr`\n * - `@x=<value>` is `ComponentArg`\n */\nexport class HtmlAttr extends node('HtmlAttr').fields<AttrNodeOptions>() {}\n\nexport class SplatAttr extends node('SplatAttr').fields<{ symbol: number }>() {}\n\n/**\n * Corresponds to an argument passed by a component (`@x=<value>`)\n */\nexport class ComponentArg extends node().fields<AttrNodeOptions>() {\n  /**\n   * Convert the component argument into a named argument node\n   */\n  toNamedArgument(): NamedArgument {\n    return new NamedArgument({\n      name: this.name,\n      value: this.value,\n    });\n  }\n}\n\n/**\n * An `ElementModifier` is just a normal call node in modifier position.\n */\nexport class ElementModifier extends node('ElementModifier').fields<CallFields>() {}\n\nexport interface AttrNodeOptions {\n  name: SourceSlice;\n  value: ExpressionNode;\n  trusting: boolean;\n}\n","import type { SourceSlice } from '../../source/slice';\nimport { SpanList } from '../../source/span-list';\nimport type { SymbolTable } from '../../symbol-table';\nimport { Args, NamedArguments } from './args';\nimport type { ComponentArg, ElementModifier, HtmlOrSplatAttr } from './attr-block';\nimport type { CallFields } from './base';\nimport type { ExpressionNode } from './expr';\nimport type { NamedBlock, NamedBlocks } from './internal-node';\nimport { type BaseNodeFields, node } from './node';\n\n/**\n * Content Nodes are allowed in content positions in templates. They correspond to behavior in the\n * [Data][data] tokenization state in HTML.\n *\n * [data]: https://html.spec.whatwg.org/multipage/parsing.html#data-state\n */\nexport type ContentNode =\n  | HtmlText\n  | HtmlComment\n  | AppendContent\n  | InvokeBlock\n  | InvokeComponent\n  | SimpleElement\n  | GlimmerComment;\n\nexport class GlimmerComment extends node('GlimmerComment').fields<{ text: SourceSlice }>() {}\nexport class HtmlText extends node('HtmlText').fields<{ chars: string }>() {}\nexport class HtmlComment extends node('HtmlComment').fields<{ text: SourceSlice }>() {}\n\nexport class AppendContent extends node('AppendContent').fields<{\n  value: ExpressionNode;\n  trusting: boolean;\n  table: SymbolTable;\n}>() {\n  get callee(): ExpressionNode {\n    if (this.value.type === 'Call') {\n      return this.value.callee;\n    } else {\n      return this.value;\n    }\n  }\n\n  get args(): Args {\n    if (this.value.type === 'Call') {\n      return this.value.args;\n    } else {\n      return Args.empty(this.value.loc.collapse('end'));\n    }\n  }\n}\n\nexport class InvokeBlock extends node('InvokeBlock').fields<\n  CallFields & { blocks: NamedBlocks }\n>() {}\n\ninterface InvokeComponentFields {\n  callee: ExpressionNode;\n  blocks: NamedBlocks;\n  attrs: readonly HtmlOrSplatAttr[];\n  componentArgs: readonly ComponentArg[];\n  modifiers: readonly ElementModifier[];\n}\n\n/**\n * Corresponds to a component invocation. When the content of a component invocation contains no\n * named blocks, `blocks` contains a single named block named `\"default\"`. When a component\n * invocation is self-closing, `blocks` is empty.\n */\nexport class InvokeComponent extends node('InvokeComponent').fields<InvokeComponentFields>() {\n  get args(): Args {\n    let entries = this.componentArgs.map((a) => a.toNamedArgument());\n\n    return Args.named(\n      new NamedArguments({\n        loc: SpanList.range(entries, this.callee.loc.collapse('end')),\n        entries,\n      })\n    );\n  }\n}\n\ninterface SimpleElementOptions extends BaseNodeFields {\n  tag: SourceSlice;\n  body: readonly ContentNode[];\n  attrs: readonly HtmlOrSplatAttr[];\n  componentArgs: readonly ComponentArg[];\n  modifiers: readonly ElementModifier[];\n}\n\n/**\n * Corresponds to a simple HTML element. The AST allows component arguments and modifiers to support\n * future extensions.\n */\nexport class SimpleElement extends node('SimpleElement').fields<SimpleElementOptions>() {\n  get args(): Args {\n    let entries = this.componentArgs.map((a) => a.toNamedArgument());\n\n    return Args.named(\n      new NamedArguments({\n        loc: SpanList.range(entries, this.tag.loc.collapse('end')),\n        entries,\n      })\n    );\n  }\n}\n\nexport type ElementNode = NamedBlock | InvokeComponent | SimpleElement;\n","import type { PresentArray } from '@glimmer/interfaces';\n\nimport { SourceSlice } from '../../source/slice';\nimport type { CallFields } from './base';\nimport { node } from './node';\nimport type { FreeVarReference, VariableReference } from './refs';\n\n/**\n * A Handlebars literal.\n *\n * {@link https://handlebarsjs.com/guide/expressions.html#literal-segments}\n */\nexport type LiteralValue = string | boolean | number | undefined | null;\n\nexport interface LiteralTypes {\n  string: string;\n  boolean: boolean;\n  number: number;\n  null: null;\n  undefined: undefined;\n}\n\n/**\n * Corresponds to a Handlebars literal.\n *\n * @see {LiteralValue}\n */\nexport class LiteralExpression extends node('Literal').fields<{ value: LiteralValue }>() {\n  toSlice(this: StringLiteral): SourceSlice {\n    return new SourceSlice({ loc: this.loc, chars: this.value });\n  }\n}\n\nexport type StringLiteral = LiteralExpression & { value: string };\n\n/**\n * Returns true if an input {@see ExpressionNode} is a literal.\n */\nexport function isLiteral<K extends keyof LiteralTypes = keyof LiteralTypes>(\n  node: ExpressionNode,\n  kind?: K\n): node is StringLiteral {\n  if (node.type === 'Literal') {\n    if (kind === undefined) {\n      return true;\n    } else if (kind === 'null') {\n      return node.value === null;\n    } else {\n      return typeof node.value === kind;\n    }\n  } else {\n    return false;\n  }\n}\n\n/**\n * Corresponds to a path in expression position.\n *\n * ```hbs\n * this\n * this.x\n * @x\n * @x.y\n * x\n * x.y\n * ```\n */\nexport class PathExpression extends node('Path').fields<{\n  ref: VariableReference;\n  tail: readonly SourceSlice[];\n}>() {}\n\n/**\n * Corresponds to a parenthesized call expression.\n *\n * ```hbs\n * (x)\n * (x.y)\n * (x y)\n * (x.y z)\n * ```\n */\nexport class CallExpression extends node('Call').fields<CallFields>() {}\n\n/**\n * Corresponds to a possible deprecated helper call. Must be:\n *\n * 1. A free variable (not this.foo, not @foo, not local).\n * 2. Argument-less.\n * 3. In a component invocation's named argument position.\n * 4. Not parenthesized (not @bar={{(helper)}}).\n * 5. Not interpolated (not @bar=\"{{helper}}\").\n *\n * ```hbs\n * <Foo @bar={{helper}} />\n * ```\n */\nexport class DeprecatedCallExpression extends node('DeprecatedCall').fields<{\n  arg: SourceSlice;\n  callee: FreeVarReference;\n}>() {}\n\n/**\n * Corresponds to an interpolation in attribute value position.\n *\n * ```hbs\n * <a href=\"{{url}}.html\"\n * ```\n */\nexport class InterpolateExpression extends node('Interpolate').fields<{\n  parts: PresentArray<ExpressionNode>;\n}>() {}\n\nexport type ExpressionNode =\n  | LiteralExpression\n  | PathExpression\n  | CallExpression\n  | DeprecatedCallExpression\n  | InterpolateExpression;\n","import type { SourceSlice } from '../../source/slice';\nimport { SpanList } from '../../source/span-list';\nimport type { BlockSymbolTable, ProgramSymbolTable } from '../../symbol-table';\nimport { Args, NamedArguments } from './args';\nimport type { ComponentArg, ElementModifier, HtmlOrSplatAttr } from './attr-block';\nimport type { GlimmerParentNodeOptions } from './base';\nimport { type BaseNodeFields, node } from './node';\n\n/**\n * Corresponds to an entire template.\n */\nexport class Template extends node().fields<\n  {\n    table: ProgramSymbolTable;\n  } & GlimmerParentNodeOptions\n>() {}\n\n/**\n * Represents a block. In principle this could be merged with `NamedBlock`, because all cases\n * involving blocks have at least a notional name.\n */\nexport class Block extends node().fields<\n  { scope: BlockSymbolTable } & GlimmerParentNodeOptions\n>() {}\n\n/**\n * Corresponds to a collection of named blocks.\n */\nexport class NamedBlocks extends node().fields<{ blocks: readonly NamedBlock[] }>() {\n  /**\n   * Get the `NamedBlock` for a given name.\n   */\n  get(name: 'default'): NamedBlock;\n  get(name: string): NamedBlock | null;\n  get(name: string): NamedBlock | null {\n    return this.blocks.filter((block) => block.name.chars === name)[0] || null;\n  }\n}\n\nexport interface NamedBlockFields extends BaseNodeFields {\n  name: SourceSlice;\n  block: Block;\n\n  // these are not currently supported, but are here for future expansion\n  attrs: readonly HtmlOrSplatAttr[];\n  componentArgs: readonly ComponentArg[];\n  modifiers: readonly ElementModifier[];\n}\n\n/**\n * Corresponds to a single named block. This is used for anonymous named blocks (`default` and\n * `else`).\n */\nexport class NamedBlock extends node().fields<NamedBlockFields>() {\n  get args(): Args {\n    let entries = this.componentArgs.map((a) => a.toNamedArgument());\n\n    return Args.named(\n      new NamedArguments({\n        loc: SpanList.range(entries, this.name.loc.collapse('end')),\n        entries,\n      })\n    );\n  }\n}\n","import type { SourceSlice } from '../../source/slice';\nimport { node } from './node';\nimport type { FreeVarResolution } from './resolution';\n\n/**\n * Corresponds to `this` at the head of an expression.\n */\nexport class ThisReference extends node('This').fields() {}\n\n/**\n * Corresponds to `@<ident>` at the beginning of an expression.\n */\nexport class ArgReference extends node('Arg').fields<{ name: SourceSlice; symbol: number }>() {}\n\n/**\n * Corresponds to `<ident>` at the beginning of an expression, when `<ident>` is in the current\n * block's scope.\n */\nexport class LocalVarReference extends node('Local').fields<{\n  name: string;\n  isTemplateLocal: boolean;\n  symbol: number;\n}>() {}\n\n/**\n * Corresponds to `<ident>` at the beginning of an expression, when `<ident>` is *not* in the\n * current block's scope.\n *\n * The `resolution: FreeVarResolution` field describes how to resolve the free variable.\n *\n * Note: In strict mode, it must always be a variable that is in a concrete JavaScript scope that\n * the template will be installed into.\n */\nexport class FreeVarReference extends node('Free').fields<{\n  name: string;\n  resolution: FreeVarResolution;\n  symbol: number;\n}>() {}\n\nexport type VariableReference = ThisReference | ArgReference | LocalVarReference | FreeVarReference;\n","/**\n * A free variable is resolved according to a resolution rule:\n *\n * 1. Strict resolution\n * 2. Namespaced resolution\n * 3. Fallback resolution\n */\n\nimport type { GetContextualFreeOpcode } from '@glimmer/interfaces';\nimport { SexpOpcodes } from '@glimmer/wire-format';\n\n/**\n * Strict resolution is used:\n *\n * 1. in a strict mode template\n * 2. in an unambiguous invocation with dot paths\n */\nexport const STRICT_RESOLUTION = {\n  resolution: (): GetContextualFreeOpcode => SexpOpcodes.GetStrictKeyword,\n  serialize: (): SerializedResolution => 'Strict',\n  isAngleBracket: false as const,\n};\n\nexport type StrictResolution = typeof STRICT_RESOLUTION;\n\nexport const HTML_RESOLUTION = {\n  ...STRICT_RESOLUTION,\n  isAngleBracket: true as const,\n};\n\nexport type HtmlResolution = typeof HTML_RESOLUTION;\n\nexport function isStrictResolution(value: unknown): value is StrictResolution {\n  return value === STRICT_RESOLUTION;\n}\n\n/**\n * A `LooseModeResolution` includes:\n *\n * - 0 or more namespaces to resolve the variable in\n * - optional fallback behavior\n *\n * In practice, there are a limited number of possible combinations of these degrees of freedom,\n * and they are captured by the `Ambiguity` union below.\n */\nexport class LooseModeResolution {\n  /**\n   * Namespaced resolution is used in an unambiguous syntax position:\n   *\n   * 1. `(sexp)` (namespace: `Helper`)\n   * 2. `{{#block}}` (namespace: `Component`)\n   * 3. `<a {{modifier}}>` (namespace: `Modifier`)\n   * 4. `<Component />` (namespace: `Component`)\n   *\n   * @see {NamespacedAmbiguity}\n   */\n  static namespaced(namespace: FreeVarNamespace, isAngleBracket = false): LooseModeResolution {\n    return new LooseModeResolution(\n      {\n        namespaces: [namespace],\n        fallback: false,\n      },\n      isAngleBracket\n    );\n  }\n\n  /**\n   * Fallback resolution is used when no namespaced resolutions are possible, but fallback\n   * resolution is still allowed.\n   *\n   * ```hbs\n   * {{x.y}}\n   * ```\n   *\n   * @see {FallbackAmbiguity}\n   */\n  static fallback(): LooseModeResolution {\n    return new LooseModeResolution({ namespaces: [], fallback: true });\n  }\n\n  /**\n   * Append resolution is used when the variable should be resolved in both the `component` and\n   * `helper` namespaces. Fallback resolution is optional.\n   *\n   * ```hbs\n   * {{x}}\n   * ```\n   *\n   * ^ `x` should be resolved in the `component` and `helper` namespaces with fallback resolution.\n   *\n   * ```hbs\n   * {{x y}}\n   * ```\n   *\n   * ^ `x` should be resolved in the `component` and `helper` namespaces without fallback\n   * resolution.\n   *\n   * @see {ComponentOrHelperAmbiguity}\n   */\n  static append({ invoke }: { invoke: boolean }): LooseModeResolution {\n    return new LooseModeResolution({\n      namespaces: [FreeVarNamespace.Component, FreeVarNamespace.Helper],\n      fallback: !invoke,\n    });\n  }\n\n  /**\n   * Trusting append resolution is used when the variable should be resolved in both the `component` and\n   * `helper` namespaces. Fallback resolution is optional.\n   *\n   * ```hbs\n   * {{{x}}}\n   * ```\n   *\n   * ^ `x` should be resolved in the `component` and `helper` namespaces with fallback resolution.\n   *\n   * ```hbs\n   * {{{x y}}}\n   * ```\n   *\n   * ^ `x` should be resolved in the `component` and `helper` namespaces without fallback\n   * resolution.\n   *\n   * @see {HelperAmbiguity}\n   */\n  static trustingAppend({ invoke }: { invoke: boolean }): LooseModeResolution {\n    return new LooseModeResolution({\n      namespaces: [FreeVarNamespace.Helper],\n      fallback: !invoke,\n    });\n  }\n\n  /**\n   * Attribute resolution is used when the variable should be resolved as a `helper` with fallback\n   * resolution.\n   *\n   * ```hbs\n   * <a href={{x}} />\n   * <a href=\"{{x}}.html\" />\n   * ```\n   *\n   * ^ resolved in the `helper` namespace with fallback\n   *\n   * @see {HelperAmbiguity}\n   */\n  static attr(): LooseModeResolution {\n    return new LooseModeResolution({ namespaces: [FreeVarNamespace.Helper], fallback: true });\n  }\n\n  constructor(readonly ambiguity: Ambiguity, readonly isAngleBracket = false) {}\n\n  resolution(): GetContextualFreeOpcode {\n    if (this.ambiguity.namespaces.length === 0) {\n      return SexpOpcodes.GetStrictKeyword;\n    } else if (this.ambiguity.namespaces.length === 1) {\n      if (this.ambiguity.fallback) {\n        // simple namespaced resolution with fallback must be attr={{x}}\n        return SexpOpcodes.GetFreeAsHelperHeadOrThisFallback;\n      } else {\n        // simple namespaced resolution without fallback\n        switch (this.ambiguity.namespaces[0]) {\n          case FreeVarNamespace.Helper:\n            return SexpOpcodes.GetFreeAsHelperHead;\n          case FreeVarNamespace.Modifier:\n            return SexpOpcodes.GetFreeAsModifierHead;\n          case FreeVarNamespace.Component:\n            return SexpOpcodes.GetFreeAsComponentHead;\n        }\n      }\n    } else if (this.ambiguity.fallback) {\n      // component or helper + fallback ({{something}})\n      return SexpOpcodes.GetFreeAsComponentOrHelperHeadOrThisFallback;\n    } else {\n      // component or helper without fallback ({{something something}})\n      return SexpOpcodes.GetFreeAsComponentOrHelperHead;\n    }\n  }\n\n  serialize(): SerializedResolution {\n    if (this.ambiguity.namespaces.length === 0) {\n      return 'Loose';\n    } else if (this.ambiguity.namespaces.length === 1) {\n      if (this.ambiguity.fallback) {\n        // simple namespaced resolution with fallback must be attr={{x}}\n        return ['ambiguous', SerializedAmbiguity.Attr];\n      } else {\n        return ['ns', this.ambiguity.namespaces[0]];\n      }\n    } else if (this.ambiguity.fallback) {\n      // component or helper + fallback ({{something}})\n      return ['ambiguous', SerializedAmbiguity.Append];\n    } else {\n      // component or helper without fallback ({{something something}})\n      return ['ambiguous', SerializedAmbiguity.Invoke];\n    }\n  }\n}\n\nexport const ARGUMENT_RESOLUTION = LooseModeResolution.fallback();\n\nexport enum FreeVarNamespace {\n  Helper = 'Helper',\n  Modifier = 'Modifier',\n  Component = 'Component',\n}\n\nexport const HELPER_NAMESPACE = FreeVarNamespace.Helper;\nexport const MODIFIER_NAMESPACE = FreeVarNamespace.Modifier;\nexport const COMPONENT_NAMESPACE = FreeVarNamespace.Component;\n\n/**\n * A `ComponentOrHelperAmbiguity` might be a component or a helper, with an optional fallback\n *\n * ```hbs\n * {{x}}\n * ```\n *\n * ^ `x` is resolved in the `component` and `helper` namespaces, with fallback\n *\n * ```hbs\n * {{x y}}\n * ```\n *\n * ^ `x` is resolved in the `component` and `helper` namespaces, without fallback\n */\ntype ComponentOrHelperAmbiguity = {\n  namespaces: [FreeVarNamespace.Component, FreeVarNamespace.Helper];\n  fallback: boolean;\n};\n\n/**\n * A `HelperAmbiguity` must be a helper, but it has fallback. If it didn't have fallback, it would\n * be a `NamespacedAmbiguity`.\n *\n * ```hbs\n * <a href={{x}} />\n * <a href=\"{{x}}.html\" />\n * ```\n *\n * ^ `x` is resolved in the `helper` namespace with fallback\n */\ntype HelperAmbiguity = { namespaces: [FreeVarNamespace.Helper]; fallback: boolean };\n\n/**\n * A `NamespacedAmbiguity` must be resolved in a particular namespace, without fallback.\n *\n * ```hbs\n * <X />\n * ```\n *\n * ^ `X` is resolved in the `component` namespace without fallback\n *\n * ```hbs\n * (x)\n * ```\n *\n * ^ `x` is resolved in the `helper` namespace without fallback\n *\n * ```hbs\n * <a {{x}} />\n * ```\n *\n * ^ `x` is resolved in the `modifier` namespace without fallback\n */\ntype NamespacedAmbiguity = {\n  namespaces: [FreeVarNamespace.Component | FreeVarNamespace.Helper | FreeVarNamespace.Modifier];\n  fallback: false;\n};\n\ntype FallbackAmbiguity = {\n  namespaces: [];\n  fallback: true;\n};\n\ntype Ambiguity =\n  | ComponentOrHelperAmbiguity\n  | HelperAmbiguity\n  | NamespacedAmbiguity\n  | FallbackAmbiguity;\n\nexport type FreeVarResolution = StrictResolution | HtmlResolution | LooseModeResolution;\n\n// Serialization\n\nconst enum SerializedAmbiguity {\n  // {{x}}\n  Append = 'Append',\n  // href={{x}}\n  Attr = 'Attr',\n  // {{x y}} (not attr)\n  Invoke = 'Invoke',\n}\n\nexport type SerializedResolution =\n  | 'Strict'\n  | 'Loose'\n  | ['ns', FreeVarNamespace]\n  | ['ambiguous', SerializedAmbiguity];\n\nexport function loadResolution(resolution: SerializedResolution): FreeVarResolution {\n  if (typeof resolution === 'string') {\n    switch (resolution) {\n      case 'Loose':\n        return LooseModeResolution.fallback();\n      case 'Strict':\n        return STRICT_RESOLUTION;\n    }\n  }\n\n  switch (resolution[0]) {\n    case 'ambiguous':\n      switch (resolution[1]) {\n        case SerializedAmbiguity.Append:\n          return LooseModeResolution.append({ invoke: false });\n        case SerializedAmbiguity.Attr:\n          return LooseModeResolution.attr();\n        case SerializedAmbiguity.Invoke:\n          return LooseModeResolution.append({ invoke: true });\n      }\n\n    case 'ns':\n      return LooseModeResolution.namespaced(resolution[1]);\n  }\n}\n","import type { Core, Dict } from '@glimmer/interfaces';\nimport { dict, unwrap } from '@glimmer/util';\nimport { SexpOpcodes } from '@glimmer/wire-format';\n\nimport * as ASTv2 from './v2/api';\n\nexport interface Upvar {\n  readonly name: string;\n  readonly resolution: ASTv2.FreeVarResolution;\n}\n\ninterface SymbolTableOptions {\n  customizeComponentName: (input: string) => string;\n  lexicalScope: (variable: string) => boolean;\n}\n\nexport abstract class SymbolTable {\n  static top(locals: string[], options: SymbolTableOptions): ProgramSymbolTable {\n    return new ProgramSymbolTable(locals, options);\n  }\n\n  abstract has(name: string): boolean;\n  abstract get(name: string): [symbol: number, isRoot: boolean];\n\n  abstract hasLexical(name: string): boolean;\n  abstract getLexical(name: string): number;\n\n  abstract getLocalsMap(): Dict<number>;\n  abstract getDebugInfo(): Core.DebugInfo;\n  abstract setHasDebugger(): void;\n\n  abstract allocateFree(name: string, resolution: ASTv2.FreeVarResolution): number;\n  abstract allocateNamed(name: string): number;\n  abstract allocateBlock(name: string): number;\n  abstract allocate(identifier: string): number;\n\n  child(locals: string[]): BlockSymbolTable {\n    let symbols = locals.map((name) => this.allocate(name));\n    return new BlockSymbolTable(this, locals, symbols);\n  }\n}\n\nexport class ProgramSymbolTable extends SymbolTable {\n  constructor(private templateLocals: string[], private options: SymbolTableOptions) {\n    super();\n  }\n\n  public symbols: string[] = [];\n  public upvars: string[] = [];\n\n  private size = 1;\n  private named = dict<number>();\n  private blocks = dict<number>();\n  private usedTemplateLocals: string[] = [];\n\n  #hasDebugger = false;\n\n  hasLexical(name: string): boolean {\n    return this.options.lexicalScope(name);\n  }\n\n  getLexical(name: string): number {\n    return this.allocateFree(name, ASTv2.HTML_RESOLUTION);\n  }\n\n  getUsedTemplateLocals(): string[] {\n    return this.usedTemplateLocals;\n  }\n\n  setHasDebugger(): void {\n    this.#hasDebugger = true;\n  }\n\n  get hasEval(): boolean {\n    return this.#hasDebugger;\n  }\n\n  has(name: string): boolean {\n    return this.templateLocals.includes(name);\n  }\n\n  get(name: string): [number, boolean] {\n    let index = this.usedTemplateLocals.indexOf(name);\n\n    if (index !== -1) {\n      return [index, true];\n    }\n\n    index = this.usedTemplateLocals.length;\n    this.usedTemplateLocals.push(name);\n    return [index, true];\n  }\n\n  getLocalsMap(): Dict<number> {\n    return dict();\n  }\n\n  getDebugInfo(): Core.DebugInfo {\n    return Object.values(this.getLocalsMap());\n  }\n\n  allocateFree(name: string, resolution: ASTv2.FreeVarResolution): number {\n    // If the name in question is an uppercase (i.e. angle-bracket) component invocation, run\n    // the optional `customizeComponentName` function provided to the precompiler.\n    if (\n      resolution.resolution() === SexpOpcodes.GetFreeAsComponentHead &&\n      resolution.isAngleBracket\n    ) {\n      name = this.options.customizeComponentName(name);\n    }\n\n    let index = this.upvars.indexOf(name);\n\n    if (index !== -1) {\n      return index;\n    }\n\n    index = this.upvars.length;\n    this.upvars.push(name);\n    return index;\n  }\n\n  allocateNamed(name: string): number {\n    let named = this.named[name];\n\n    if (!named) {\n      named = this.named[name] = this.allocate(name);\n    }\n\n    return named;\n  }\n\n  allocateBlock(name: string): number {\n    if (name === 'inverse') {\n      name = 'else';\n    }\n\n    let block = this.blocks[name];\n\n    if (!block) {\n      block = this.blocks[name] = this.allocate(`&${name}`);\n    }\n\n    return block;\n  }\n\n  allocate(identifier: string): number {\n    this.symbols.push(identifier);\n    return this.size++;\n  }\n}\n\nexport class BlockSymbolTable extends SymbolTable {\n  constructor(private parent: SymbolTable, public symbols: string[], public slots: number[]) {\n    super();\n  }\n\n  get locals(): string[] {\n    return this.symbols;\n  }\n\n  getLexical(name: string): number {\n    return this.parent.getLexical(name);\n  }\n\n  hasLexical(name: string): boolean {\n    return this.parent.hasLexical(name);\n  }\n\n  has(name: string): boolean {\n    return this.symbols.indexOf(name) !== -1 || this.parent.has(name);\n  }\n\n  get(name: string): [number, boolean] {\n    let local = this.#get(name);\n    return local ? [local, false] : this.parent.get(name);\n  }\n\n  #get(name: string): number | null {\n    let slot = this.symbols.indexOf(name);\n    return slot === -1 ? null : unwrap(this.slots[slot]);\n  }\n\n  getLocalsMap(): Dict<number> {\n    let dict = this.parent.getLocalsMap();\n    this.symbols.forEach((symbol) => (dict[symbol] = this.get(symbol)[0]));\n    return dict;\n  }\n\n  getDebugInfo(): Core.DebugInfo {\n    return Object.values(this.getLocalsMap());\n  }\n\n  setHasDebugger(): void {\n    this.parent.setHasDebugger();\n  }\n\n  allocateFree(name: string, resolution: ASTv2.FreeVarResolution): number {\n    return this.parent.allocateFree(name, resolution);\n  }\n\n  allocateNamed(name: string): number {\n    return this.parent.allocateNamed(name);\n  }\n\n  allocateBlock(name: string): number {\n    return this.parent.allocateBlock(name);\n  }\n\n  allocate(identifier: string): number {\n    return this.parent.allocate(identifier);\n  }\n}\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { assert, assertPresentArray, assign } from '@glimmer/util';\n\nimport { SourceSlice } from '../source/slice';\nimport type { SourceSpan } from '../source/span';\nimport { SpanList } from '../source/span-list';\nimport type { BlockSymbolTable, ProgramSymbolTable, SymbolTable } from '../symbol-table';\nimport * as ASTv2 from './api';\n\nexport interface CallParts {\n  callee: ASTv2.ExpressionNode;\n  args: ASTv2.Args;\n}\n\nexport class Builder {\n  // TEMPLATE //\n\n  template(\n    symbols: ProgramSymbolTable,\n    body: ASTv2.ContentNode[],\n    loc: SourceSpan\n  ): ASTv2.Template {\n    return new ASTv2.Template({\n      table: symbols,\n      body,\n      loc,\n    });\n  }\n\n  // INTERNAL (these nodes cannot be reached when doing general-purpose visiting) //\n\n  block(symbols: BlockSymbolTable, body: ASTv2.ContentNode[], loc: SourceSpan): ASTv2.Block {\n    return new ASTv2.Block({\n      scope: symbols,\n      body,\n      loc,\n    });\n  }\n\n  namedBlock(name: SourceSlice, block: ASTv2.Block, loc: SourceSpan): ASTv2.NamedBlock {\n    return new ASTv2.NamedBlock({\n      name,\n      block,\n      attrs: [],\n      componentArgs: [],\n      modifiers: [],\n      loc,\n    });\n  }\n\n  simpleNamedBlock(name: SourceSlice, block: ASTv2.Block, loc: SourceSpan): ASTv2.NamedBlock {\n    return new BuildElement({\n      selfClosing: false,\n      attrs: [],\n      componentArgs: [],\n      modifiers: [],\n      comments: [],\n    }).named(name, block, loc);\n  }\n\n  slice(chars: string, loc: SourceSpan): SourceSlice {\n    return new SourceSlice({\n      loc,\n      chars,\n    });\n  }\n\n  args(\n    positional: ASTv2.PositionalArguments,\n    named: ASTv2.NamedArguments,\n    loc: SourceSpan\n  ): ASTv2.Args {\n    return new ASTv2.Args({\n      loc,\n      positional,\n      named,\n    });\n  }\n\n  positional(exprs: ASTv2.ExpressionNode[], loc: SourceSpan): ASTv2.PositionalArguments {\n    return new ASTv2.PositionalArguments({\n      loc,\n      exprs,\n    });\n  }\n\n  namedArgument(key: SourceSlice, value: ASTv2.ExpressionNode): ASTv2.NamedArgument {\n    return new ASTv2.NamedArgument({\n      name: key,\n      value,\n    });\n  }\n\n  named(entries: ASTv2.NamedArgument[], loc: SourceSpan): ASTv2.NamedArguments {\n    return new ASTv2.NamedArguments({\n      loc,\n      entries,\n    });\n  }\n\n  attr(\n    {\n      name,\n      value,\n      trusting,\n    }: { name: SourceSlice; value: ASTv2.ExpressionNode; trusting: boolean },\n    loc: SourceSpan\n  ): ASTv2.HtmlAttr {\n    return new ASTv2.HtmlAttr({\n      loc,\n      name,\n      value,\n      trusting,\n    });\n  }\n\n  splatAttr(symbol: number, loc: SourceSpan): ASTv2.SplatAttr {\n    return new ASTv2.SplatAttr({\n      symbol,\n      loc,\n    });\n  }\n\n  arg(\n    {\n      name,\n      value,\n      trusting,\n    }: { name: SourceSlice; value: ASTv2.ExpressionNode; trusting: boolean },\n    loc: SourceSpan\n  ): ASTv2.ComponentArg {\n    return new ASTv2.ComponentArg({\n      name,\n      value,\n      trusting,\n      loc,\n    });\n  }\n\n  // EXPRESSIONS //\n\n  path(head: ASTv2.VariableReference, tail: SourceSlice[], loc: SourceSpan): ASTv2.PathExpression {\n    return new ASTv2.PathExpression({\n      loc,\n      ref: head,\n      tail,\n    });\n  }\n\n  self(loc: SourceSpan): ASTv2.VariableReference {\n    return new ASTv2.ThisReference({\n      loc,\n    });\n  }\n\n  at(name: string, symbol: number, loc: SourceSpan): ASTv2.VariableReference {\n    // the `@` should be included so we have a complete source range\n    assert(name[0] === '@', `call builders.at() with a string that starts with '@'`);\n\n    return new ASTv2.ArgReference({\n      loc,\n      name: new SourceSlice({ loc, chars: name }),\n      symbol,\n    });\n  }\n\n  freeVar({\n    name,\n    context,\n    symbol,\n    loc,\n  }: {\n    name: string;\n    context: ASTv2.FreeVarResolution;\n    symbol: number;\n    loc: SourceSpan;\n  }): ASTv2.FreeVarReference {\n    assert(\n      name !== 'this',\n      `You called builders.freeVar() with 'this'. Call builders.this instead`\n    );\n    assert(\n      name[0] !== '@',\n      `You called builders.freeVar() with '${name}'. Call builders.at('${name}') instead`\n    );\n\n    return new ASTv2.FreeVarReference({\n      name,\n      resolution: context,\n      symbol,\n      loc,\n    });\n  }\n\n  localVar(\n    name: string,\n    symbol: number,\n    isTemplateLocal: boolean,\n    loc: SourceSpan\n  ): ASTv2.VariableReference {\n    assert(name !== 'this', `You called builders.var() with 'this'. Call builders.this instead`);\n    assert(\n      name[0] !== '@',\n      `You called builders.var() with '${name}'. Call builders.at('${name}') instead`\n    );\n\n    return new ASTv2.LocalVarReference({\n      loc,\n      name,\n      isTemplateLocal,\n      symbol,\n    });\n  }\n\n  sexp(parts: CallParts, loc: SourceSpan): ASTv2.CallExpression {\n    return new ASTv2.CallExpression({\n      loc,\n      callee: parts.callee,\n      args: parts.args,\n    });\n  }\n\n  deprecatedCall(\n    arg: SourceSlice,\n    callee: ASTv2.FreeVarReference,\n    loc: SourceSpan\n  ): ASTv2.DeprecatedCallExpression {\n    return new ASTv2.DeprecatedCallExpression({\n      loc,\n      arg,\n      callee,\n    });\n  }\n\n  interpolate(parts: ASTv2.ExpressionNode[], loc: SourceSpan): ASTv2.InterpolateExpression {\n    assertPresentArray(parts);\n\n    return new ASTv2.InterpolateExpression({\n      loc,\n      parts,\n    });\n  }\n\n  literal(value: string, loc: SourceSpan): ASTv2.LiteralExpression & { value: string };\n  literal(value: number, loc: SourceSpan): ASTv2.LiteralExpression & { value: number };\n  literal(value: boolean, loc: SourceSpan): ASTv2.LiteralExpression & { value: boolean };\n  literal(value: null, loc: SourceSpan): ASTv2.LiteralExpression & { value: null };\n  literal(value: undefined, loc: SourceSpan): ASTv2.LiteralExpression & { value: undefined };\n  literal(\n    value: string | number | boolean | null | undefined,\n    loc: SourceSpan\n  ): ASTv2.LiteralExpression;\n  literal(\n    value: string | number | boolean | null | undefined,\n    loc: SourceSpan\n  ): ASTv2.LiteralExpression {\n    return new ASTv2.LiteralExpression({\n      loc,\n      value,\n    });\n  }\n\n  // STATEMENTS //\n\n  append(\n    {\n      table,\n      trusting,\n      value,\n    }: { table: SymbolTable; trusting: boolean; value: ASTv2.ExpressionNode },\n    loc: SourceSpan\n  ): ASTv2.AppendContent {\n    return new ASTv2.AppendContent({\n      table,\n      trusting,\n      value,\n      loc,\n    });\n  }\n\n  modifier({ callee, args }: CallParts, loc: SourceSpan): ASTv2.ElementModifier {\n    return new ASTv2.ElementModifier({\n      loc,\n      callee,\n      args,\n    });\n  }\n\n  namedBlocks(blocks: ASTv2.NamedBlock[], loc: SourceSpan): ASTv2.NamedBlocks {\n    return new ASTv2.NamedBlocks({\n      loc,\n      blocks,\n    });\n  }\n\n  blockStatement(\n    {\n      program,\n      inverse = null,\n      ...call\n    }: {\n      symbols: SymbolTable;\n      program: ASTv2.Block;\n      inverse?: ASTv2.Block | null;\n    } & CallParts,\n    loc: SourceSpan\n  ): ASTv2.InvokeBlock {\n    let blocksLoc = program.loc;\n    let blocks: PresentArray<ASTv2.NamedBlock> = [\n      this.namedBlock(SourceSlice.synthetic('default'), program, program.loc),\n    ];\n    if (inverse) {\n      blocksLoc = blocksLoc.extend(inverse.loc);\n      blocks.push(this.namedBlock(SourceSlice.synthetic('else'), inverse, inverse.loc));\n    }\n\n    return new ASTv2.InvokeBlock({\n      loc,\n      blocks: this.namedBlocks(blocks, blocksLoc),\n      callee: call.callee,\n      args: call.args,\n    });\n  }\n\n  element(options: BuildBaseElement): BuildElement {\n    return new BuildElement(options);\n  }\n}\n\nexport interface BuildBaseElement {\n  selfClosing: boolean;\n  attrs: ASTv2.HtmlOrSplatAttr[];\n  componentArgs: ASTv2.ComponentArg[];\n  modifiers: ASTv2.ElementModifier[];\n  comments: ASTv2.GlimmerComment[];\n}\n\nexport class BuildElement {\n  readonly builder: Builder;\n  constructor(readonly base: BuildBaseElement) {\n    this.builder = new Builder();\n  }\n\n  simple(tag: SourceSlice, body: ASTv2.ContentNode[], loc: SourceSpan): ASTv2.SimpleElement {\n    return new ASTv2.SimpleElement(\n      assign(\n        {\n          tag,\n          body,\n          componentArgs: [],\n          loc,\n        },\n        this.base\n      )\n    );\n  }\n\n  named(name: SourceSlice, block: ASTv2.Block, loc: SourceSpan): ASTv2.NamedBlock {\n    return new ASTv2.NamedBlock(\n      assign(\n        {\n          name,\n          block,\n          componentArgs: [],\n          loc,\n        },\n        this.base\n      )\n    );\n  }\n\n  selfClosingComponent(callee: ASTv2.ExpressionNode, loc: SourceSpan): ASTv2.InvokeComponent {\n    return new ASTv2.InvokeComponent(\n      assign(\n        {\n          loc,\n          callee,\n          // point the empty named blocks at the `/` self-closing tag\n          blocks: new ASTv2.NamedBlocks({\n            blocks: [],\n            loc: loc.sliceEndChars({ skipEnd: 1, chars: 1 }),\n          }),\n        },\n        this.base\n      )\n    );\n  }\n\n  componentWithDefaultBlock(\n    callee: ASTv2.ExpressionNode,\n    children: ASTv2.ContentNode[],\n    symbols: BlockSymbolTable,\n    loc: SourceSpan\n  ): ASTv2.InvokeComponent {\n    let block = this.builder.block(symbols, children, loc);\n    let namedBlock = this.builder.namedBlock(SourceSlice.synthetic('default'), block, loc); // BUILDER.simpleNamedBlock('default', children, symbols, loc);\n\n    return new ASTv2.InvokeComponent(\n      assign(\n        {\n          loc,\n          callee,\n          blocks: this.builder.namedBlocks([namedBlock], namedBlock.loc),\n        },\n        this.base\n      )\n    );\n  }\n\n  componentWithNamedBlocks(\n    callee: ASTv2.ExpressionNode,\n    blocks: PresentArray<ASTv2.NamedBlock>,\n    loc: SourceSpan\n  ): ASTv2.InvokeComponent {\n    return new ASTv2.InvokeComponent(\n      assign(\n        {\n          loc,\n          callee,\n          blocks: this.builder.namedBlocks(blocks, SpanList.range(blocks)),\n        },\n        this.base\n      )\n    );\n  }\n}\n","import type * as ASTv1 from '../v1/api';\nimport * as ASTv2 from './api';\n\nexport interface AstCallParts {\n  path: ASTv1.Expression;\n  params: ASTv1.Expression[];\n  hash: ASTv1.Hash;\n}\n\nexport interface VarPath extends ASTv1.PathExpression {\n  head: ASTv1.VarHead;\n}\n\nexport function SexpSyntaxContext(node: ASTv1.SubExpression): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.HELPER_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\nexport function ModifierSyntaxContext(\n  node: ASTv1.ElementModifierStatement\n): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.MODIFIER_NAMESPACE);\n  } else {\n    return null;\n  }\n}\n\nexport function BlockSyntaxContext(node: ASTv1.BlockStatement): ASTv2.FreeVarResolution | null {\n  if (isSimpleCallee(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.COMPONENT_NAMESPACE);\n  } else {\n    return ASTv2.LooseModeResolution.fallback();\n  }\n}\n\nexport function ComponentSyntaxContext(node: ASTv1.PathExpression): ASTv2.FreeVarResolution | null {\n  if (isSimplePath(node)) {\n    return ASTv2.LooseModeResolution.namespaced(ASTv2.FreeVarNamespace.Component, true);\n  } else {\n    return null;\n  }\n}\n\n/**\n * This corresponds to append positions (text curlies or attribute\n * curlies). In strict mode, this also corresponds to arg curlies.\n */\nexport function AttrValueSyntaxContext(node: ASTv1.MustacheStatement): ASTv2.FreeVarResolution {\n  let isSimple = isSimpleCallee(node);\n  let isInvoke = isInvokeNode(node);\n\n  if (isSimple) {\n    return isInvoke\n      ? ASTv2.LooseModeResolution.namespaced(ASTv2.FreeVarNamespace.Helper)\n      : ASTv2.LooseModeResolution.attr();\n  } else {\n    return isInvoke ? ASTv2.STRICT_RESOLUTION : ASTv2.LooseModeResolution.fallback();\n  }\n}\n\n/**\n * This corresponds to append positions (text curlies or attribute\n * curlies). In strict mode, this also corresponds to arg curlies.\n */\nexport function AppendSyntaxContext(node: ASTv1.MustacheStatement): ASTv2.FreeVarResolution {\n  let isSimple = isSimpleCallee(node);\n  let isInvoke = isInvokeNode(node);\n  let trusting = node.trusting;\n\n  if (isSimple) {\n    return trusting\n      ? ASTv2.LooseModeResolution.trustingAppend({ invoke: isInvoke })\n      : ASTv2.LooseModeResolution.append({ invoke: isInvoke });\n  } else {\n    return ASTv2.LooseModeResolution.fallback();\n  }\n}\n\nexport type Resolution<P extends AstCallParts | ASTv1.PathExpression> = (\n  call: P\n) => ASTv2.FreeVarResolution | null;\n\n// UTILITIES\n\n/**\n * A call node has a simple callee if its head is:\n *\n * - a `PathExpression`\n * - the `PathExpression`'s head is a `VarHead`\n * - it has no tail\n *\n * Simple heads:\n *\n * ```\n * {{x}}\n * {{x y}}\n * ```\n *\n * Not simple heads:\n *\n * ```\n * {{x.y}}\n * {{x.y z}}\n * {{@x}}\n * {{@x a}}\n * {{this}}\n * {{this a}}\n * ```\n */\nfunction isSimpleCallee(node: AstCallParts): boolean {\n  let path = node.path;\n\n  return isSimplePath(path);\n}\n\ntype SimplePath = ASTv1.PathExpression & { head: ASTv1.VarHead };\n\nfunction isSimplePath(node: ASTv1.Expression): node is SimplePath {\n  if (node.type === 'PathExpression' && node.head.type === 'VarHead') {\n    return node.tail.length === 0;\n  } else {\n    return false;\n  }\n}\n\n/**\n * The call expression has at least one argument.\n */\nfunction isInvokeNode(node: AstCallParts): boolean {\n  return node.params.length > 0 || node.hash.pairs.length > 0;\n}\n","import type { PresentArray } from '@glimmer/interfaces';\nimport { asPresentArray, assert, assign, isPresentArray } from '@glimmer/util';\n\nimport Printer from '../generation/printer';\nimport {\n  type PrecompileOptions,\n  type PrecompileOptionsWithLexicalScope,\n  preprocess,\n} from '../parser/tokenizer-event-handlers';\nimport type { SourceLocation } from '../source/location';\nimport { SourceSlice } from '../source/slice';\nimport type { Source } from '../source/source';\nimport type { SourceSpan } from '../source/span';\nimport { SpanList } from '../source/span-list';\nimport { type BlockSymbolTable, type ProgramSymbolTable, SymbolTable } from '../symbol-table';\nimport { generateSyntaxError } from '../syntax-error';\nimport { isLowerCase, isUpperCase } from '../utils';\nimport type * as ASTv1 from '../v1/api';\nimport b from '../v1/parser-builders';\nimport * as ASTv2 from './api';\nimport { type BuildElement, Builder, type CallParts } from './builders';\nimport {\n  AppendSyntaxContext,\n  AttrValueSyntaxContext,\n  BlockSyntaxContext,\n  ComponentSyntaxContext,\n  ModifierSyntaxContext,\n  type Resolution,\n  SexpSyntaxContext,\n} from './loose-resolution';\n\nexport function normalize(\n  source: Source,\n  options: PrecompileOptionsWithLexicalScope = { lexicalScope: () => false }\n): [ast: ASTv2.Template, locals: string[]] {\n  let ast = preprocess(source, options);\n\n  let normalizeOptions = {\n    strictMode: false,\n    locals: [],\n    ...options,\n  };\n\n  let top = SymbolTable.top(\n    normalizeOptions.locals,\n     \n    {\n      customizeComponentName: options.customizeComponentName ?? ((name) => name),\n      lexicalScope: options.lexicalScope,\n    }\n  );\n  let block = new BlockContext(source, normalizeOptions, top);\n  let normalizer = new StatementNormalizer(block);\n\n  let astV2 = new TemplateChildren(\n    block.loc(ast.loc),\n    ast.body.map((b) => normalizer.normalize(b)),\n    block\n  ).assertTemplate(top);\n\n  let locals = top.getUsedTemplateLocals();\n\n  return [astV2, locals];\n}\n\n/**\n * A `BlockContext` represents the block that a particular AST node is contained inside of.\n *\n * `BlockContext` is aware of template-wide options (such as strict mode), as well as the bindings\n * that are in-scope within that block.\n *\n * Concretely, it has the `PrecompileOptions` and current `SymbolTable`, and provides\n * facilities for working with those options.\n *\n * `BlockContext` is stateless.\n */\nexport class BlockContext<Table extends SymbolTable = SymbolTable> {\n  readonly builder: Builder;\n\n  constructor(\n    readonly source: Source,\n    private readonly options: PrecompileOptions,\n    readonly table: Table\n  ) {\n    this.builder = new Builder();\n  }\n\n  get strict(): boolean {\n    return this.options.strictMode || false;\n  }\n\n  loc(loc: SourceLocation): SourceSpan {\n    return this.source.spanFor(loc);\n  }\n\n  resolutionFor<N extends ASTv1.CallNode | ASTv1.PathExpression>(\n    node: N,\n    resolution: Resolution<N>\n  ): { result: ASTv2.FreeVarResolution } | { result: 'error'; path: string; head: string } {\n    if (this.strict) {\n      return { result: ASTv2.STRICT_RESOLUTION };\n    }\n\n    if (this.isFreeVar(node)) {\n      let r = resolution(node);\n\n      if (r === null) {\n        return {\n          result: 'error',\n          path: printPath(node),\n          head: printHead(node),\n        };\n      }\n\n      return { result: r };\n    } else {\n      return { result: ASTv2.STRICT_RESOLUTION };\n    }\n  }\n\n  isLexicalVar(variable: string): boolean {\n    return this.table.hasLexical(variable);\n  }\n\n  private isFreeVar(callee: ASTv1.CallNode | ASTv1.PathExpression): boolean {\n    if (callee.type === 'PathExpression') {\n      if (callee.head.type !== 'VarHead') {\n        return false;\n      }\n\n      return !this.table.has(callee.head.name);\n    } else if (callee.path.type === 'PathExpression') {\n      return this.isFreeVar(callee.path);\n    } else {\n      return false;\n    }\n  }\n\n  hasBinding(name: string): boolean {\n    return this.table.has(name) || this.table.hasLexical(name);\n  }\n\n  child(blockParams: string[]): BlockContext<BlockSymbolTable> {\n    return new BlockContext(this.source, this.options, this.table.child(blockParams));\n  }\n\n  customizeComponentName(input: string): string {\n    if (this.options.customizeComponentName) {\n      return this.options.customizeComponentName(input);\n    } else {\n      return input;\n    }\n  }\n}\n\n/**\n * An `ExpressionNormalizer` normalizes expressions within a block.\n *\n * `ExpressionNormalizer` is stateless.\n */\nclass ExpressionNormalizer {\n  constructor(private block: BlockContext) {}\n\n  /**\n   * The `normalize` method takes an arbitrary expression and its original syntax context and\n   * normalizes it to an ASTv2 expression.\n   *\n   * @see {SyntaxContext}\n   */\n  normalize(expr: ASTv1.Literal, resolution: ASTv2.FreeVarResolution): ASTv2.LiteralExpression;\n  normalize(\n    expr: ASTv1.MinimalPathExpression,\n    resolution: ASTv2.FreeVarResolution\n  ): ASTv2.PathExpression;\n  normalize(expr: ASTv1.SubExpression, resolution: ASTv2.FreeVarResolution): ASTv2.CallExpression;\n  normalize(expr: ASTv1.Expression, resolution: ASTv2.FreeVarResolution): ASTv2.ExpressionNode;\n  normalize(\n    expr: ASTv1.Expression | ASTv1.MinimalPathExpression,\n    resolution: ASTv2.FreeVarResolution\n  ): ASTv2.ExpressionNode {\n    switch (expr.type) {\n      case 'NullLiteral':\n      case 'BooleanLiteral':\n      case 'NumberLiteral':\n      case 'StringLiteral':\n      case 'UndefinedLiteral':\n        return this.block.builder.literal(expr.value, this.block.loc(expr.loc));\n      case 'PathExpression':\n        return this.path(expr, resolution);\n      case 'SubExpression': {\n        let resolution = this.block.resolutionFor(expr, SexpSyntaxContext);\n\n        if (resolution.result === 'error') {\n          throw generateSyntaxError(\n            `You attempted to invoke a path (\\`${resolution.path}\\`) but ${resolution.head} was not in scope`,\n            expr.loc\n          );\n        }\n\n        return this.block.builder.sexp(\n          this.callParts(expr, resolution.result),\n          this.block.loc(expr.loc)\n        );\n      }\n    }\n  }\n\n  private path(\n    expr: ASTv1.MinimalPathExpression,\n    resolution: ASTv2.FreeVarResolution\n  ): ASTv2.PathExpression {\n    let headOffsets = this.block.loc(expr.head.loc);\n\n    let tail = [];\n\n    // start with the head\n    let offset = headOffsets;\n\n    for (let part of expr.tail) {\n      offset = offset.sliceStartChars({ chars: part.length, skipStart: 1 });\n      tail.push(\n        new SourceSlice({\n          loc: offset,\n          chars: part,\n        })\n      );\n    }\n\n    return this.block.builder.path(this.ref(expr.head, resolution), tail, this.block.loc(expr.loc));\n  }\n\n  /**\n   * The `callParts` method takes ASTv1.CallParts as well as a syntax context and normalizes\n   * it to an ASTv2 CallParts.\n   */\n  callParts(parts: ASTv1.CallParts, context: ASTv2.FreeVarResolution): CallParts {\n    let { path, params, hash } = parts;\n\n    let callee = this.normalize(path, context);\n    let paramList = params.map((p) => this.normalize(p, ASTv2.ARGUMENT_RESOLUTION));\n    let paramLoc = SpanList.range(paramList, callee.loc.collapse('end'));\n    let namedLoc = this.block.loc(hash.loc);\n    let argsLoc = SpanList.range([paramLoc, namedLoc]);\n\n    let positional = this.block.builder.positional(\n      params.map((p) => this.normalize(p, ASTv2.ARGUMENT_RESOLUTION)),\n      paramLoc\n    );\n\n    let named = this.block.builder.named(\n      hash.pairs.map((p) => this.namedArgument(p)),\n      this.block.loc(hash.loc)\n    );\n\n    return {\n      callee,\n      args: this.block.builder.args(positional, named, argsLoc),\n    };\n  }\n\n  private namedArgument(pair: ASTv1.HashPair): ASTv2.NamedArgument {\n    let offsets = this.block.loc(pair.loc);\n\n    let keyOffsets = offsets.sliceStartChars({ chars: pair.key.length });\n\n    return this.block.builder.namedArgument(\n      new SourceSlice({ chars: pair.key, loc: keyOffsets }),\n      this.normalize(pair.value, ASTv2.ARGUMENT_RESOLUTION)\n    );\n  }\n\n  /**\n   * The `ref` method normalizes an `ASTv1.PathHead` into an `ASTv2.VariableReference`.\n   * This method is extremely important, because it is responsible for normalizing free\n   * variables into an an ASTv2.PathHead *with appropriate context*.\n   *\n   * The syntax context is originally determined by the syntactic position that this `PathHead`\n   * came from, and is ultimately attached to the `ASTv2.VariableReference` here. In ASTv2,\n   * the `VariableReference` node bears full responsibility for loose mode rules that control\n   * the behavior of free variables.\n   */\n  private ref(head: ASTv1.PathHead, resolution: ASTv2.FreeVarResolution): ASTv2.VariableReference {\n    let { block } = this;\n    let { builder, table } = block;\n    let offsets = block.loc(head.loc);\n\n    switch (head.type) {\n      case 'ThisHead':\n        return builder.self(offsets);\n      case 'AtHead': {\n        let symbol = table.allocateNamed(head.name);\n        return builder.at(head.name, symbol, offsets);\n      }\n      case 'VarHead': {\n        if (block.hasBinding(head.name)) {\n          let [symbol, isRoot] = table.get(head.name);\n\n          return block.builder.localVar(head.name, symbol, isRoot, offsets);\n        } else {\n          let context = block.strict ? ASTv2.STRICT_RESOLUTION : resolution;\n          let symbol = block.table.allocateFree(head.name, context);\n\n          return block.builder.freeVar({\n            name: head.name,\n            context,\n            symbol,\n            loc: offsets,\n          });\n        }\n      }\n    }\n  }\n}\n\n/**\n * `TemplateNormalizer` normalizes top-level ASTv1 statements to ASTv2.\n */\nclass StatementNormalizer {\n  constructor(private readonly block: BlockContext) {}\n\n  normalize(node: ASTv1.Statement): ASTv2.ContentNode | ASTv2.NamedBlock {\n    switch (node.type) {\n      case 'PartialStatement':\n        throw new Error(`Handlebars partial syntax ({{> ...}}) is not allowed in Glimmer`);\n      case 'BlockStatement':\n        return this.BlockStatement(node);\n      case 'ElementNode':\n        return new ElementNormalizer(this.block).ElementNode(node);\n      case 'MustacheStatement':\n        return this.MustacheStatement(node);\n\n      // These are the same in ASTv2\n      case 'MustacheCommentStatement':\n        return this.MustacheCommentStatement(node);\n\n      case 'CommentStatement': {\n        let loc = this.block.loc(node.loc);\n        return new ASTv2.HtmlComment({\n          loc,\n          text: loc.slice({ skipStart: 4, skipEnd: 3 }).toSlice(node.value),\n        });\n      }\n\n      case 'TextNode':\n        return new ASTv2.HtmlText({\n          loc: this.block.loc(node.loc),\n          chars: node.chars,\n        });\n    }\n  }\n\n  MustacheCommentStatement(node: ASTv1.MustacheCommentStatement): ASTv2.GlimmerComment {\n    let loc = this.block.loc(node.loc);\n    let textLoc: SourceSpan;\n\n    if (loc.asString().slice(0, 5) === '{{!--') {\n      textLoc = loc.slice({ skipStart: 5, skipEnd: 4 });\n    } else {\n      textLoc = loc.slice({ skipStart: 3, skipEnd: 2 });\n    }\n\n    return new ASTv2.GlimmerComment({\n      loc,\n      text: textLoc.toSlice(node.value),\n    });\n  }\n\n  /**\n   * Normalizes an ASTv1.MustacheStatement to an ASTv2.AppendStatement\n   */\n  MustacheStatement(mustache: ASTv1.MustacheStatement): ASTv2.AppendContent {\n    let { escaped } = mustache;\n    let loc = this.block.loc(mustache.loc);\n\n    // Normalize the call parts in AppendSyntaxContext\n    let callParts = this.expr.callParts(\n      {\n        path: mustache.path,\n        params: mustache.params,\n        hash: mustache.hash,\n      },\n      AppendSyntaxContext(mustache)\n    );\n\n    let value = callParts.args.isEmpty()\n      ? callParts.callee\n      : this.block.builder.sexp(callParts, loc);\n\n    return this.block.builder.append(\n      {\n        table: this.block.table,\n        trusting: !escaped,\n        value,\n      },\n      loc\n    );\n  }\n\n  /**\n   * Normalizes a ASTv1.BlockStatement to an ASTv2.BlockStatement\n   */\n  BlockStatement(block: ASTv1.BlockStatement): ASTv2.InvokeBlock {\n    let { program, inverse } = block;\n    let loc = this.block.loc(block.loc);\n\n    let resolution = this.block.resolutionFor(block, BlockSyntaxContext);\n\n    if (resolution.result === 'error') {\n      throw generateSyntaxError(\n        `You attempted to invoke a path (\\`{{#${resolution.path}}}\\`) but ${resolution.head} was not in scope`,\n        loc\n      );\n    }\n\n    let callParts = this.expr.callParts(block, resolution.result);\n\n    return this.block.builder.blockStatement(\n      assign(\n        {\n          symbols: this.block.table,\n          program: this.Block(program),\n          inverse: inverse ? this.Block(inverse) : null,\n        },\n        callParts\n      ),\n      loc\n    );\n  }\n\n  Block({ body, loc, blockParams }: ASTv1.Block): ASTv2.Block {\n    let child = this.block.child(blockParams);\n    let normalizer = new StatementNormalizer(child);\n    return new BlockChildren(\n      this.block.loc(loc),\n      body.map((b) => normalizer.normalize(b)),\n      this.block\n    ).assertBlock(child.table);\n  }\n\n  private get expr(): ExpressionNormalizer {\n    return new ExpressionNormalizer(this.block);\n  }\n}\n\nclass ElementNormalizer {\n  constructor(private readonly ctx: BlockContext) {}\n\n  /**\n   * Normalizes an ASTv1.ElementNode to:\n   *\n   * - ASTv2.NamedBlock if the tag name begins with `:`\n   * - ASTv2.Component if the tag name matches the component heuristics\n   * - ASTv2.SimpleElement if the tag name doesn't match the component heuristics\n   *\n   * A tag name represents a component if:\n   *\n   * - it begins with `@`\n   * - it is exactly `this` or begins with `this.`\n   * - the part before the first `.` is a reference to an in-scope variable binding\n   * - it begins with an uppercase character\n   */\n  ElementNode(element: ASTv1.ElementNode): ASTv2.ElementNode {\n    let { tag, selfClosing, comments } = element;\n    let loc = this.ctx.loc(element.loc);\n\n    let [tagHead, ...rest] = asPresentArray(tag.split('.'));\n\n    // the head, attributes and modifiers are in the current scope\n    let path = this.classifyTag(tagHead, rest, element.loc);\n\n    let attrs = element.attributes.filter((a) => a.name[0] !== '@').map((a) => this.attr(a));\n    let args = element.attributes.filter((a) => a.name[0] === '@').map((a) => this.arg(a));\n\n    let modifiers = element.modifiers.map((m) => this.modifier(m));\n\n    // the element's block params are in scope for the children\n    let child = this.ctx.child(element.blockParams);\n    let normalizer = new StatementNormalizer(child);\n\n    let childNodes = element.children.map((s) => normalizer.normalize(s));\n\n    let el = this.ctx.builder.element({\n      selfClosing,\n      attrs,\n      componentArgs: args,\n      modifiers,\n      comments: comments.map((c) => new StatementNormalizer(this.ctx).MustacheCommentStatement(c)),\n    });\n\n    let children = new ElementChildren(el, loc, childNodes, this.ctx);\n\n    let offsets = this.ctx.loc(element.loc);\n    let tagOffsets = offsets.sliceStartChars({ chars: tag.length, skipStart: 1 });\n\n    if (path === 'ElementHead') {\n      if (tag[0] === ':') {\n        return children.assertNamedBlock(\n          tagOffsets.slice({ skipStart: 1 }).toSlice(tag.slice(1)),\n          child.table\n        );\n      } else {\n        return children.assertElement(tagOffsets.toSlice(tag), element.blockParams.length > 0);\n      }\n    }\n\n    if (element.selfClosing) {\n      return el.selfClosingComponent(path, loc);\n    } else {\n      let blocks = children.assertComponent(tag, child.table, element.blockParams.length > 0);\n      return el.componentWithNamedBlocks(path, blocks, loc);\n    }\n  }\n\n  private modifier(m: ASTv1.ElementModifierStatement): ASTv2.ElementModifier {\n    let resolution = this.ctx.resolutionFor(m, ModifierSyntaxContext);\n\n    if (resolution.result === 'error') {\n      throw generateSyntaxError(\n        `You attempted to invoke a path (\\`{{#${resolution.path}}}\\`) as a modifier, but ${resolution.head} was not in scope. Try adding \\`this\\` to the beginning of the path`,\n        m.loc\n      );\n    }\n\n    let callParts = this.expr.callParts(m, resolution.result);\n    return this.ctx.builder.modifier(callParts, this.ctx.loc(m.loc));\n  }\n\n  /**\n   * This method handles attribute values that are curlies, as well as curlies nested inside of\n   * interpolations:\n   *\n   * ```hbs\n   * <a href={{url}} />\n   * <a href=\"{{url}}.html\" />\n   * ```\n   */\n  private mustacheAttr(mustache: ASTv1.MustacheStatement): ASTv2.ExpressionNode {\n    // Normalize the call parts in AttrValueSyntaxContext\n    let sexp = this.ctx.builder.sexp(\n      this.expr.callParts(mustache, AttrValueSyntaxContext(mustache)),\n      this.ctx.loc(mustache.loc)\n    );\n\n    // If there are no params or hash, just return the function part as its own expression\n    if (sexp.args.isEmpty()) {\n      return sexp.callee;\n    } else {\n      return sexp;\n    }\n  }\n\n  /**\n   * attrPart is the narrowed down list of valid attribute values that are also\n   * allowed as a concat part (you can't nest concats).\n   */\n  private attrPart(part: ASTv1.MustacheStatement | ASTv1.TextNode): {\n    expr: ASTv2.ExpressionNode;\n    trusting: boolean;\n  } {\n    switch (part.type) {\n      case 'MustacheStatement':\n        return { expr: this.mustacheAttr(part), trusting: !part.escaped };\n      case 'TextNode':\n        return {\n          expr: this.ctx.builder.literal(part.chars, this.ctx.loc(part.loc)),\n          trusting: true,\n        };\n    }\n  }\n\n  private attrValue(part: ASTv1.MustacheStatement | ASTv1.TextNode | ASTv1.ConcatStatement): {\n    expr: ASTv2.ExpressionNode;\n    trusting: boolean;\n  } {\n    switch (part.type) {\n      case 'ConcatStatement': {\n        let parts = part.parts.map((p) => this.attrPart(p).expr);\n        return {\n          expr: this.ctx.builder.interpolate(parts, this.ctx.loc(part.loc)),\n          trusting: false,\n        };\n      }\n      default:\n        return this.attrPart(part);\n    }\n  }\n\n  private attr(m: ASTv1.AttrNode): ASTv2.HtmlOrSplatAttr {\n    assert(m.name[0] !== '@', 'An attr name must not start with `@`');\n\n    if (m.name === '...attributes') {\n      return this.ctx.builder.splatAttr(this.ctx.table.allocateBlock('attrs'), this.ctx.loc(m.loc));\n    }\n\n    let offsets = this.ctx.loc(m.loc);\n    let nameSlice = offsets.sliceStartChars({ chars: m.name.length }).toSlice(m.name);\n\n    let value = this.attrValue(m.value);\n    return this.ctx.builder.attr(\n      { name: nameSlice, value: value.expr, trusting: value.trusting },\n      offsets\n    );\n  }\n\n  private maybeDeprecatedCall(\n    arg: SourceSlice,\n    part: ASTv1.MustacheStatement | ASTv1.TextNode | ASTv1.ConcatStatement\n  ): { expr: ASTv2.DeprecatedCallExpression; trusting: boolean } | null {\n    if (this.ctx.strict) {\n      return null;\n    }\n\n    if (part.type !== 'MustacheStatement') {\n      return null;\n    }\n\n    let { path } = part;\n\n    if (path.type !== 'PathExpression') {\n      return null;\n    }\n\n    if (path.head.type !== 'VarHead') {\n      return null;\n    }\n\n    let { name } = path.head;\n\n    if (name === 'has-block' || name === 'has-block-params') {\n      return null;\n    }\n\n    if (this.ctx.hasBinding(name)) {\n      return null;\n    }\n\n    if (path.tail.length !== 0) {\n      return null;\n    }\n\n    if (part.params.length !== 0 || part.hash.pairs.length !== 0) {\n      return null;\n    }\n\n    let context = ASTv2.LooseModeResolution.attr();\n\n    let callee = this.ctx.builder.freeVar({\n      name,\n      context,\n      symbol: this.ctx.table.allocateFree(name, context),\n      loc: path.loc,\n    });\n\n    return {\n      expr: this.ctx.builder.deprecatedCall(arg, callee, part.loc),\n      trusting: false,\n    };\n  }\n\n  private arg(arg: ASTv1.AttrNode): ASTv2.ComponentArg {\n    assert(arg.name[0] === '@', 'An arg name must start with `@`');\n\n    let offsets = this.ctx.loc(arg.loc);\n    let nameSlice = offsets.sliceStartChars({ chars: arg.name.length }).toSlice(arg.name);\n\n    let value = this.maybeDeprecatedCall(nameSlice, arg.value) || this.attrValue(arg.value);\n    return this.ctx.builder.arg(\n      { name: nameSlice, value: value.expr, trusting: value.trusting },\n      offsets\n    );\n  }\n\n  /**\n   * This function classifies the head of an ASTv1.Element into an ASTv2.PathHead (if the\n   * element is a component) or `'ElementHead'` (if the element is a simple element).\n   *\n   * Rules:\n   *\n   * 1. If the variable is an `@arg`, return an `AtHead`\n   * 2. If the variable is `this`, return a `ThisHead`\n   * 3. If the variable is in the current scope:\n   *   a. If the scope is the root scope, then return a Free `LocalVarHead`\n   *   b. Else, return a standard `LocalVarHead`\n   * 4. If the tag name is a path and the variable is not in the current scope, Syntax Error\n   * 5. If the variable is uppercase return a FreeVar(ResolveAsComponentHead)\n   * 6. Otherwise, return `'ElementHead'`\n   */\n  private classifyTag(\n    variable: string,\n    tail: string[],\n    loc: SourceSpan\n  ): ASTv2.ExpressionNode | 'ElementHead' {\n    let uppercase = isUpperCase(variable);\n    let inScope = variable[0] === '@' || variable === 'this' || this.ctx.hasBinding(variable);\n\n    if (this.ctx.strict && !inScope) {\n      if (uppercase) {\n        throw generateSyntaxError(\n          `Attempted to invoke a component that was not in scope in a strict mode template, \\`<${variable}>\\`. If you wanted to create an element with that name, convert it to lowercase - \\`<${variable.toLowerCase()}>\\``,\n          loc\n        );\n      }\n\n      // In strict mode, values are always elements unless they are in scope\n      return 'ElementHead';\n    }\n\n    // Since the parser handed us the HTML element name as a string, we need\n    // to convert it into an ASTv1 path so it can be processed using the\n    // expression normalizer.\n    let isComponent = inScope || uppercase;\n\n    let variableLoc = loc.sliceStartChars({ skipStart: 1, chars: variable.length });\n\n    let tailLength = tail.reduce((accum, part) => accum + 1 + part.length, 0);\n    let pathEnd = variableLoc.getEnd().move(tailLength);\n    let pathLoc = variableLoc.withEnd(pathEnd);\n\n    if (isComponent) {\n      let path = b.path({\n        head: b.head(variable, variableLoc),\n        tail,\n        loc: pathLoc,\n      });\n\n      let resolution = this.ctx.isLexicalVar(variable)\n        ? { result: ASTv2.STRICT_RESOLUTION }\n        : this.ctx.resolutionFor(path, ComponentSyntaxContext);\n\n      if (resolution.result === 'error') {\n        throw generateSyntaxError(\n          `You attempted to invoke a path (\\`<${resolution.path}>\\`) but ${resolution.head} was not in scope`,\n          loc\n        );\n      }\n\n      return new ExpressionNormalizer(this.ctx).normalize(path, resolution.result);\n    } else {\n      this.ctx.table.allocateFree(variable, ASTv2.STRICT_RESOLUTION);\n    }\n\n    // If the tag name wasn't a valid component but contained a `.`, it's\n    // a syntax error.\n    if (tail.length > 0) {\n      throw generateSyntaxError(\n        `You used ${variable}.${tail.join('.')} as a tag name, but ${variable} is not in scope`,\n        loc\n      );\n    }\n\n    return 'ElementHead';\n  }\n\n  private get expr(): ExpressionNormalizer {\n    return new ExpressionNormalizer(this.ctx);\n  }\n}\n\nclass Children {\n  readonly namedBlocks: ASTv2.NamedBlock[];\n  readonly hasSemanticContent: boolean;\n  readonly nonBlockChildren: ASTv2.ContentNode[];\n\n  constructor(\n    readonly loc: SourceSpan,\n    readonly children: (ASTv2.ContentNode | ASTv2.NamedBlock)[],\n    readonly block: BlockContext\n  ) {\n    this.namedBlocks = children.filter((c): c is ASTv2.NamedBlock => c instanceof ASTv2.NamedBlock);\n    this.hasSemanticContent = Boolean(\n      children.filter((c): c is ASTv2.ContentNode => {\n        if (c instanceof ASTv2.NamedBlock) {\n          return false;\n        }\n        switch (c.type) {\n          case 'GlimmerComment':\n          case 'HtmlComment':\n            return false;\n          case 'HtmlText':\n            return !/^\\s*$/u.test(c.chars);\n          default:\n            return true;\n        }\n      }).length\n    );\n    this.nonBlockChildren = children.filter(\n      (c): c is ASTv2.ContentNode => !(c instanceof ASTv2.NamedBlock)\n    );\n  }\n}\n\nclass TemplateChildren extends Children {\n  assertTemplate(table: ProgramSymbolTable): ASTv2.Template {\n    if (isPresentArray(this.namedBlocks)) {\n      throw generateSyntaxError(`Unexpected named block at the top-level of a template`, this.loc);\n    }\n\n    return this.block.builder.template(table, this.nonBlockChildren, this.block.loc(this.loc));\n  }\n}\n\nclass BlockChildren extends Children {\n  assertBlock(table: BlockSymbolTable): ASTv2.Block {\n    if (isPresentArray(this.namedBlocks)) {\n      throw generateSyntaxError(`Unexpected named block nested in a normal block`, this.loc);\n    }\n\n    return this.block.builder.block(table, this.nonBlockChildren, this.loc);\n  }\n}\n\nclass ElementChildren extends Children {\n  constructor(\n    private el: BuildElement,\n    loc: SourceSpan,\n    children: (ASTv2.ContentNode | ASTv2.NamedBlock)[],\n    block: BlockContext\n  ) {\n    super(loc, children, block);\n  }\n\n  assertNamedBlock(name: SourceSlice, table: BlockSymbolTable): ASTv2.NamedBlock {\n    if (this.el.base.selfClosing) {\n      throw generateSyntaxError(\n        `<:${name.chars}/> is not a valid named block: named blocks cannot be self-closing`,\n        this.loc\n      );\n    }\n\n    if (isPresentArray(this.namedBlocks)) {\n      throw generateSyntaxError(\n        `Unexpected named block inside <:${name.chars}> named block: named blocks cannot contain nested named blocks`,\n        this.loc\n      );\n    }\n\n    if (!isLowerCase(name.chars)) {\n      throw generateSyntaxError(\n        `<:${name.chars}> is not a valid named block, and named blocks must begin with a lowercase letter`,\n        this.loc\n      );\n    }\n\n    if (\n      this.el.base.attrs.length > 0 ||\n      this.el.base.componentArgs.length > 0 ||\n      this.el.base.modifiers.length > 0\n    ) {\n      throw generateSyntaxError(\n        `named block <:${name.chars}> cannot have attributes, arguments, or modifiers`,\n        this.loc\n      );\n    }\n\n    let offsets = SpanList.range(this.nonBlockChildren, this.loc);\n\n    return this.block.builder.namedBlock(\n      name,\n      this.block.builder.block(table, this.nonBlockChildren, offsets),\n      this.loc\n    );\n  }\n\n  assertElement(name: SourceSlice, hasBlockParams: boolean): ASTv2.SimpleElement {\n    if (hasBlockParams) {\n      throw generateSyntaxError(\n        `Unexpected block params in <${name}>: simple elements cannot have block params`,\n        this.loc\n      );\n    }\n\n    if (isPresentArray(this.namedBlocks)) {\n      let names = this.namedBlocks.map((b) => b.name);\n\n      if (names.length === 1) {\n        throw generateSyntaxError(\n          `Unexpected named block <:foo> inside <${name.chars}> HTML element`,\n          this.loc\n        );\n      } else {\n        let printedNames = names.map((n) => `<:${n.chars}>`).join(', ');\n        throw generateSyntaxError(\n          `Unexpected named blocks inside <${name.chars}> HTML element (${printedNames})`,\n          this.loc\n        );\n      }\n    }\n\n    return this.el.simple(name, this.nonBlockChildren, this.loc);\n  }\n\n  assertComponent(\n    name: string,\n    table: BlockSymbolTable,\n    hasBlockParams: boolean\n  ): PresentArray<ASTv2.NamedBlock> {\n    if (isPresentArray(this.namedBlocks) && this.hasSemanticContent) {\n      throw generateSyntaxError(\n        `Unexpected content inside <${name}> component invocation: when using named blocks, the tag cannot contain other content`,\n        this.loc\n      );\n    }\n\n    if (isPresentArray(this.namedBlocks)) {\n      if (hasBlockParams) {\n        throw generateSyntaxError(\n          `Unexpected block params list on <${name}> component invocation: when passing named blocks, the invocation tag cannot take block params`,\n          this.loc\n        );\n      }\n\n      let seenNames = new Set<string>();\n\n      for (let block of this.namedBlocks) {\n        let name = block.name.chars;\n\n        if (seenNames.has(name)) {\n          throw generateSyntaxError(\n            `Component had two named blocks with the same name, \\`<:${name}>\\`. Only one block with a given name may be passed`,\n            this.loc\n          );\n        }\n\n        if (\n          (name === 'inverse' && seenNames.has('else')) ||\n          (name === 'else' && seenNames.has('inverse'))\n        ) {\n          throw generateSyntaxError(\n            `Component has both <:else> and <:inverse> block. <:inverse> is an alias for <:else>`,\n            this.loc\n          );\n        }\n\n        seenNames.add(name);\n      }\n\n      return this.namedBlocks;\n    } else {\n      return [\n        this.block.builder.namedBlock(\n          SourceSlice.synthetic('default'),\n          this.block.builder.block(table, this.nonBlockChildren, this.loc),\n          this.loc\n        ),\n      ];\n    }\n  }\n}\n\nfunction printPath(node: ASTv1.PathExpression | ASTv1.CallNode): string {\n  if (node.type !== 'PathExpression' && node.path.type === 'PathExpression') {\n    return printPath(node.path);\n  } else {\n    return new Printer({ entityEncoding: 'raw' }).print(node);\n  }\n}\n\nfunction printHead(node: ASTv1.PathExpression | ASTv1.CallNode): string {\n  if (node.type === 'PathExpression') {\n    switch (node.head.type) {\n      case 'AtHead':\n      case 'VarHead':\n        return node.head.name;\n      case 'ThisHead':\n        return 'this';\n    }\n  } else if (node.path.type === 'PathExpression') {\n    return printHead(node.path);\n  } else {\n    return new Printer({ entityEncoding: 'raw' }).print(node);\n  }\n}\n"],"names":["Char","ATTR_VALUE_REGEX_TEST","ATTR_VALUE_REGEX_REPLACE","RegExp","source","TEXT_REGEX_TEST","TEXT_REGEX_REPLACE","attrValueReplacer","char","charCodeAt","NBSP","QUOT","AMP","textReplacer","LT","GT","sortByLoc","a","b","loc","isInvisible","startPosition","line","column","voidMap","Set","getVoidTags","NON_WHITESPACE","isVoidTag","tag","has","toLowerCase","Printer","buffer","options","constructor","this","handledByOverride","node","ensureLeadingWhitespace","arguments","length","undefined","override","result","test","Node","type","TopLevelStatement","Expression","Block","ConcatStatement","Hash","HashPair","ElementModifierStatement","expression","Literal","PathExpression","SubExpression","literal","StringLiteral","BooleanLiteral","NumberLiteral","UndefinedLiteral","NullLiteral","statement","MustacheStatement","BlockStatement","PartialStatement","MustacheCommentStatement","CommentStatement","TextNode","ElementNode","AttrNode","block","chained","body","TopLevelStatements","statements","forEach","el","OpenElementNode","children","CloseElementNode","parts","attributes","modifiers","comments","sort","part","blockParams","BlockParams","selfClosing","attr","name","value","chars","AttrNodeValue","text","isAttr","attrValue","entityEncoding","replace","escapeText","mustache","escaped","strip","open","path","Params","params","hash","close","inverseStrip","openStrip","program","inverse","closeStrip","join","partial","concat","comment","mod","original","sexp","param","pairs","pair","key","str","JSON","stringify","bool","number","print","build","ast","isKeyword","word","KEYWORDS_TYPES","component","debugger","each","helper","if","let","log","modifier","mount","mut","outlet","readonly","unbound","unless","with","yield","UNKNOWN_POSITION","Object","freeze","SYNTHETIC_LOCATION","start","end","NON_EXISTENT_LOCATION","BROKEN_LOCATION","OffsetKind","MatchAny","IsInvisible","WhenList","_whens","whens","first","kind","when","match","isPresentArray","When","_map","Map","get","pattern","or","set","add","out","Broken","InternalsSynthetic","NonExistent","patternFor","exact","fallback","push","callback","Matcher","check","left","right","matchFor","nesteds","assert","LOCAL_DEBUG","window","location","search","SourceSlice","synthetic","offsets","src","load","slice","getString","serialize","SourceSpan","NON_EXISTENT","InvisibleSpan","wrap","serialized","forCharPositions","Array","isArray","broken","assertNever","forHbsLoc","HbsPosition","HbsSpan","startPos","endPos","CharPosition","CharPositionSpan","pos","data","getStart","getEnd","span","toHbsSpan","toHbsLoc","module","getModule","endPosition","toJSON","withStart","other","withEnd","asString","toSlice","expected","console","warn","position","locDidUpdate","collapse","where","collapsed","extend","_ref","skipStart","skipEnd","move","sliceStartChars","_ref2","sliceEndChars","_ref3","_locPosSpan","charPositions","charPos","locPosSpan","toHbsPos","BROKEN","toCharPosSpan","_charPosSpan","_providedHbsLoc","hbsPositions","providedHbsLoc","updateProvided","edge","_ref4","hbsPos","charPosSpan","toCharPos","string","_ref5","InvisiblePosition","m","rightCharPos","leftCharPos","_","SourceOffset","forHbsPos","offset","eql","until","by","_locPos","hbs","locPos","hbsPosFor","_charPos","charPosNumber","charPosFor","_ref6","Source","from","meta","moduleName","offsetFor","spanFor","seenLines","seenChars","nextLine","indexOf","sourceLength","roundTrip","SpanList","range","map","getRangeOffset","_span","getFirst","last","getLast","hasSpan","maybeLoc","generateSyntaxError","message","code","quotedCode","split","error","Error","visitorKeys","Program","Template","PathHead","NamedBlock","SimpleElement","Component","TraversalError","parent","call","stack","prototype","create","cannotRemoveNode","cannotReplaceNode","cannotReplaceOrRemoveInKeyHandlerYet","WalkerPath","parentKey","parentNode","parents","Symbol","iterator","PathParentsIterator","next","done","getEnterFunction","handler","enter","getExitFunction","exit","visitNode","visitor","nodeType","deprecate","All","getNodeHandler","visitArray","keys","i","visitKey","keyEnter","keyExit","keyHandler","keyVisitor","getKeyHandler","assignKey","array","unwrap","spliceArray","index","splice","traverse","Walker","order","visit","pop","visitors","walker","walkBody","child","_SOURCE","ID_INVERSE_PATTERN","parseElementBlockParams","element","l","attrNames","asIndex","charAt","paramsString","expect","parseBlockParams","appendChild","childrenFor","isHBSLiteral","SOURCE","headToString","head","buildHead","headNode","tail","asPresentArray","buildLoc","buildThis","buildAtName","buildVar","buildPath","originalHead","PathExpressionImplV1","buildLiteral","buildHash","_len","args","_key","startLine","startColumn","endLine","endColumn","_source","publicBuilder","raw","trusting","_defaultBlock","_elseBlock","defaultBlock","elseBlock","assign","indent","mustacheComment","tagName","attrs","elementModifier","sexpr","blockItself","template","fullPath","headParts","at","var","blockName","boolean","null","unshift","_head","firstPart","assertPresentArray","firstPartLoc","DEFAULT_STRIP","_ref7","_ref8","_ref9","_ref10","atName","_ref11","_ref12","Parser","elementStack","lines","currentAttribute","currentNode","tokenizer","entityParser","EntityParser","namedCharRefs","mode","EventedTokenizer","finish","currentAttr","currentTag","currentStartTag","currentEndTag","currentComment","currentData","acceptTemplate","acceptNode","currentElement","sourceForNode","endNode","lastLine","lastColumn","firstLine","currentLine","firstColumn","BEFORE_ATTRIBUTE_NAME","HandlebarsNodeVisitors","isTopLevel","poppedNode","elementNode","state","appendToCommentData","acceptCallNodes","rawMustache","addElementModifier","beginAttributeValue","finishAttributeValue","transitionTo","appendDynamicAttributeValuePart","finalizeTextPart","isDynamic","currentPart","startTextPart","ContentStatement","content","columns","difference","lineCount","calculateRightStrippedOffsets","updateTokenizerLocation","tokenizePart","flushData","rawComment","PartialBlockStatement","partialBlock","Decorator","decorator","DecoratorBlock","decoratorBlock","pathHead","thisHead","shift","undef","nul","compiler","endsWith","toString","e","printLiteral","TokenizerEventHandlers","tagOpenLine","tagOpenColumn","reset","beginComment","finishComment","beginData","appendToData","finishData","tagOpen","beginStartTag","beginEndTag","finishTag","finishStartTag","finishEndTag","isVoid","validateEndTag","markTagAsSelfClosing","appendToTagName","beginAttribute","isQuoted","valueSpan","appendToAttributeName","appendToAttributeValue","lastPart","current","tokenizerPos","assembleAttributeValue","attribute","reportSyntaxError","assembleConcatenatedValue","syntax","parse","preprocess","builders","CodemodEntityParser","super","input","parseWithoutProcessing","parseOptions","strictMode","locals","plugins","transform","addTokens","tokensSet","scopedTokens","maybeTokens","possbleToken","includeHtmlElements","substr","includes","potentialLocal","tokensFromType","maybeToken","maybeTokenFirstSegment","getTemplateLocals","html","includeKeywords","tokens","s","filter","token","fields","Args","empty","positional","PositionalArguments","named","NamedArguments","nth","isEmpty","exprs","size","entries","entry","NamedArgument","HtmlAttr","SplatAttr","ComponentArg","toNamedArgument","ElementModifier","GlimmerComment","HtmlText","HtmlComment","AppendContent","callee","InvokeBlock","InvokeComponent","componentArgs","LiteralExpression","CallExpression","DeprecatedCallExpression","InterpolateExpression","NamedBlocks","blocks","ThisReference","ArgReference","LocalVarReference","FreeVarReference","STRICT_RESOLUTION","resolution","SexpOpcodes","GetStrictKeyword","isAngleBracket","HTML_RESOLUTION","LooseModeResolution","namespaced","namespace","namespaces","append","invoke","FreeVarNamespace","Helper","trustingAppend","ambiguity","GetFreeAsComponentOrHelperHeadOrThisFallback","GetFreeAsComponentOrHelperHead","GetFreeAsHelperHeadOrThisFallback","GetFreeAsHelperHead","Modifier","GetFreeAsModifierHead","GetFreeAsComponentHead","SerializedAmbiguity","Attr","Append","Invoke","ARGUMENT_RESOLUTION","HELPER_NAMESPACE","MODIFIER_NAMESPACE","COMPONENT_NAMESPACE","SymbolTable","top","ProgramSymbolTable","symbols","allocate","BlockSymbolTable","templateLocals","upvars","dict","usedTemplateLocals","hasDebugger","hasLexical","lexicalScope","getLexical","allocateFree","ASTv2","getUsedTemplateLocals","setHasDebugger","hasEval","getLocalsMap","getDebugInfo","values","customizeComponentName","allocateNamed","allocateBlock","identifier","slots","local","slot","symbol","Builder","table","scope","namedBlock","simpleNamedBlock","BuildElement","namedArgument","splatAttr","arg","ref","self","freeVar","context","localVar","isTemplateLocal","deprecatedCall","interpolate","namedBlocks","blockStatement","blocksLoc","builder","base","simple","selfClosingComponent","componentWithDefaultBlock","componentWithNamedBlocks","SexpSyntaxContext","isSimpleCallee","ModifierSyntaxContext","BlockSyntaxContext","ComponentSyntaxContext","isSimplePath","isInvokeNode","normalize","normalizeOptions","BlockContext","normalizer","StatementNormalizer","astV2","TemplateChildren","assertTemplate","strict","resolutionFor","isFreeVar","r","printPath","printHead","isLexicalVar","variable","hasBinding","ExpressionNormalizer","expr","callParts","paramList","p","paramLoc","namedLoc","argsLoc","keyOffsets","isRoot","ElementNormalizer","textLoc","isSimple","isInvoke","AppendSyntaxContext","BlockChildren","assertBlock","ctx","tagHead","rest","classifyTag","childNodes","c","ElementChildren","tagOffsets","assertNamedBlock","assertElement","assertComponent","mustacheAttr","AttrValueSyntaxContext","attrPart","nameSlice","maybeDeprecatedCall","uppercase","toUpperCase","inScope","isComponent","variableLoc","tailLength","reduce","accum","pathEnd","pathLoc","Children","hasSemanticContent","nonBlockChildren","Boolean","hasBlockParams","names","printedNames","n","seenNames"],"mappings":"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"}